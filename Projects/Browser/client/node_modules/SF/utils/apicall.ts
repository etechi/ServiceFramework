import superagent=require("superagent");
import bluebird = require("bluebird");

function uri_encode(values: any) {
    var qs = [];
    for (var k in values) {
        var v = values[k]; 
        if (v === undefined || v===null) continue;
        qs.push(encodeURIComponent(k) + "=" + encodeURIComponent(v+""));
    }
    return qs.join("&");
};
export interface IQueryPaging {
    offset?: number;
    limit?: number;
    sortMethod?: string;
    sortOrder?: "Asc" | "Desc";
    totalRequired?: boolean;
    summaryRequired?: boolean;
}
export interface ICallOptions {
    serviceId?: number;
    paging?: IQueryPaging,
    query?:any
}
export function call<R>(
    type: string,
    method: string,
    query: { [index: string]: any },
    post: { [index: string]: any }, 
    opts: ICallOptions
) {
    return new Promise<R>((resolve, reject) => {
        var uri = "/api/" + type;
        if (opts && opts.serviceId)
            uri += "-" + opts.serviceId;
        uri+="/" + method;

        var q:any = {};
        if (query)
            for (var k in query)
                q[k] = query[k];
        if (opts) {
            if (opts.paging) {
                q._po = opts.paging.offset || undefined;
                q._pl = opts.paging.limit || undefined;
                q._pm = opts.paging.sortMethod || undefined;
                q._ps = opts.paging.sortOrder || undefined;
                
                if (opts.paging.totalRequired)
                    q._pt = 1;
                if (opts.paging.summaryRequired)
                    q._pa = 1;
            }
            if (opts.query)
                for (var k in opts.query)
                    q[k] = opts.query[k];
        }
        var has_query_vars = false;
        for (var k in q) {
            has_query_vars = true;
            break;
        }
        if (has_query_vars )
            uri += "?" + uri_encode(q);
        var sa = post ? superagent("POST", uri) : superagent(uri);
        if (post) sa.send(post);
        return sa.end((e, r) => {
            if (e) {
                return reject({
                    _netDown: !e.status && !r,
                    _error: r && r.body && r.body.Message || "网络故障，请稍后再试..."
                });
            }
            resolve(<R>r.body);
        });
    })
}