#region Apache License Version 2.0
/*----------------------------------------------------------------
Copyright 2017 Yang Chen (cy2000@gmail.com)

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
except in compliance with the License. You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software distributed under the
License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
either express or implied. See the License for the specific language governing permissions
and limitations under the License.
Detail: https://github.com/etechi/ServiceFramework/blob/master/license.md
----------------------------------------------------------------*/
#endregion Apache License Version 2.0

// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SF.Applications;
using SF.Common.TextMessages.Management;
using SF.Entities;
using SF.Management.MenuServices.Models;
using System;

namespace SF.App.Core.Migrations
{
    [DbContext(typeof(SFDbContext))]
    partial class SFDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MemberInvitation_2", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long>("InvitorId");

                    b.Property<string>("Invitors");

                    b.Property<DateTime>("Time");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InvitorId");

                    b.HasIndex("UserId");

                    b.ToTable("MemberInvitation");
                });

            modelBuilder.Entity("SF.Auth.Identities.Entity.DataModels.Identity", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte>("ObjectState");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("ScopeId");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("SignupExtraArgument")
                        .HasMaxLength(200);

                    b.Property<long>("SignupIdentProviderId");

                    b.Property<string>("SignupIdentValue")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("SignupIdentProviderId");

                    b.HasIndex("SignupIdentValue");

                    b.ToTable("SysAuthIdentity");
                });

            modelBuilder.Entity("SF.Auth.Identities.Entity.DataModels.IdentityCredential", b =>
                {
                    b.Property<long>("ScopeId");

                    b.Property<long>("ProviderId");

                    b.Property<string>("Credential")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ConfirmedTime");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<long>("IdentityId");

                    b.Property<string>("UnionIdent")
                        .HasMaxLength(100);

                    b.HasKey("ScopeId", "ProviderId", "Credential");

                    b.HasIndex("IdentityId");

                    b.HasIndex("ScopeId", "ProviderId", "UnionIdent");

                    b.ToTable("SysAuthIdentityCredential");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Category", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("BannerImage")
                        .HasMaxLength(200);

                    b.Property<string>("BannerUrl")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<int>("ItemCount");

                    b.Property<string>("MobileBannerImage")
                        .HasMaxLength(200);

                    b.Property<string>("MobileBannerUrl")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte>("ObjectState");

                    b.Property<int>("Order");

                    b.Property<long>("OwnerUserId");

                    b.Property<long?>("ParentId");

                    b.Property<string>("Tag")
                        .HasMaxLength(20);

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Tag");

                    b.ToTable("BizProductCategory");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.CategoryItem", b =>
                {
                    b.Property<long>("CategoryId");

                    b.Property<long>("ItemId");

                    b.Property<long>("Order");

                    b.HasKey("CategoryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("CategoryId", "Order");

                    b.ToTable("BizProductCategoryItem");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Item", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("CategoryTags");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<byte>("ObjectState");

                    b.Property<decimal?>("Price");

                    b.Property<long>("ProductId");

                    b.Property<long>("SellerId");

                    b.Property<long?>("SourceItemId");

                    b.Property<int>("SourceLevel");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SourceItemId");

                    b.ToTable("BizProductItem");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Product", b =>
                {
                    b.Property<long>("Id");

                    b.Property<bool>("CouponDisabled");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Image");

                    b.Property<bool>("IsVirtual");

                    b.Property<decimal>("MarketPrice");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte>("ObjectState");

                    b.Property<double>("Order");

                    b.Property<long>("OwnerUserId");

                    b.Property<decimal>("Price");

                    b.Property<DateTime?>("PublishedTime");

                    b.Property<int>("SellCount");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("TypeId");

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("VIADSpecId");

                    b.Property<int>("Visited");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("TypeId");

                    b.HasIndex("ObjectState", "Order");

                    b.HasIndex("ObjectState", "Price");

                    b.HasIndex("ObjectState", "PublishedTime");

                    b.HasIndex("ObjectState", "SellCount");

                    b.HasIndex("ObjectState", "Visited");

                    b.HasIndex("ObjectState", "TypeId", "Order");

                    b.HasIndex("ObjectState", "TypeId", "Price");

                    b.HasIndex("ObjectState", "TypeId", "PublishedTime");

                    b.HasIndex("ObjectState", "TypeId", "SellCount");

                    b.HasIndex("ObjectState", "TypeId", "Visited");

                    b.ToTable("BizProduct");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.ProductDetail", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Detail");

                    b.Property<string>("Images");

                    b.HasKey("Id");

                    b.ToTable("BizProductDetail");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.ProductSpec", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Desc");

                    b.Property<string>("Image")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte>("ObjectState");

                    b.Property<int>("Order");

                    b.Property<long>("ProductId");

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("VIADSpecId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("app_biz_product_spec");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.ProductType", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte>("ObjectState");

                    b.Property<int>("Order");

                    b.Property<int>("ProductCount");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Unit")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Order");

                    b.ToTable("BizProductType");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Property", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Icon");

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte>("ObjectState");

                    b.Property<int>("Order");

                    b.Property<long?>("ParentId");

                    b.Property<long>("ScopeId");

                    b.Property<long>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ParentId", "Order");

                    b.HasIndex("TypeId", "ParentId", "Name")
                        .IsUnique()
                        .HasFilter("[ParentId] IS NOT NULL");

                    b.ToTable("BizProductProperty");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.PropertyItem", b =>
                {
                    b.Property<long>("PropertyId");

                    b.Property<long>("ProductId");

                    b.Property<double>("Order");

                    b.HasKey("PropertyId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PropertyId", "Order");

                    b.ToTable("BizProductPropertyItem");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.PropertyScope", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Icon")
                        .HasMaxLength(200);

                    b.Property<string>("Image")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte>("ObjectState");

                    b.Property<int>("Order");

                    b.Property<long>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("Order");

                    b.HasIndex("TypeId", "Name")
                        .IsUnique();

                    b.ToTable("BizProductPropertyScope");
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.Document", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("AuthorId");

                    b.Property<long?>("ContainerId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Ident")
                        .HasMaxLength(50);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<int>("ItemOrder");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OwnerId");

                    b.Property<DateTime?>("PublishDate");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<long?>("ScopeId");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Ident");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PublishDate");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("ContainerId", "ItemOrder");

                    b.HasIndex("ContainerId", "PublishDate");

                    b.ToTable("CommonDocument");
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DocumentAuthor", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OwnerId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<long?>("ScopeId");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("CommonDocumentAuthor");
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DocumentCategory", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("ContainerId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<int>("ItemOrder");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OwnerId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<long?>("ScopeId");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("ContainerId", "ItemOrder");

                    b.ToTable("CommonDocumentCategory");
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DocumentTag", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OwnerId");

                    b.Property<long?>("ScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("ScopeId", "Name")
                        .IsUnique()
                        .HasFilter("[ScopeId] IS NOT NULL");

                    b.ToTable("CommonDocumentTag");
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DocumentTagReference", b =>
                {
                    b.Property<long>("DocumentId");

                    b.Property<long>("TagId");

                    b.HasKey("DocumentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("CommonDocumentTagRef");
                });

            modelBuilder.Entity("SF.Common.TextMessages.Management.DataModels.TextMessageRecord", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Args")
                        .HasMaxLength(1000);

                    b.Property<string>("Body")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("CompletedTime");

                    b.Property<string>("Error");

                    b.Property<string>("Headers")
                        .HasMaxLength(1000);

                    b.Property<string>("Result");

                    b.Property<long?>("ScopeId");

                    b.Property<string>("Sender")
                        .HasMaxLength(100);

                    b.Property<long>("ServiceId");

                    b.Property<int>("Status");

                    b.Property<string>("Target")
                        .IsRequired();

                    b.Property<DateTime>("Time");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<string>("TrackEntityId")
                        .HasMaxLength(100);

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.HasIndex("Time");

                    b.HasIndex("UserId");

                    b.HasIndex("ServiceId", "Time");

                    b.HasIndex("Status", "Time");

                    b.HasIndex("UserId", "Time");

                    b.ToTable("CommonTextMessageRecord");
                });

            modelBuilder.Entity("SF.Core.CallPlans.Storage.DataModels.CallExpired", b =>
                {
                    b.Property<string>("Callable")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200);

                    b.Property<string>("CallArgument")
                        .HasMaxLength(200);

                    b.Property<string>("CallError")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("ExecCount");

                    b.Property<string>("ExecError")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Expired");

                    b.Property<DateTime?>("LastExecTime");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Callable");

                    b.ToTable("SysCallExpired");
                });

            modelBuilder.Entity("SF.Core.CallPlans.Storage.DataModels.CallInstance", b =>
                {
                    b.Property<string>("Callable")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200);

                    b.Property<string>("CallArgument")
                        .HasMaxLength(200);

                    b.Property<string>("CallError")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CallTime");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("DelaySecondsOnError");

                    b.Property<int>("ErrorCount");

                    b.Property<string>("ExecError")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Expire");

                    b.Property<DateTime?>("LastExecTime");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Callable");

                    b.HasIndex("CallTime");

                    b.ToTable("SysCallInstance");
                });

            modelBuilder.Entity("SF.Core.ServiceManagement.Management.DataModels.ServiceInstance", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("ContainerId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("ImplementId")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("ImplementType")
                        .IsRequired();

                    b.Property<string>("InternalRemarks");

                    b.Property<int>("ItemOrder");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OwnerId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<long?>("ScopeId");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("ServiceIdent")
                        .HasMaxLength(200);

                    b.Property<string>("ServiceType")
                        .IsRequired();

                    b.Property<string>("Setting");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("ImplementId");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ServiceIdent");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("ContainerId", "ItemOrder");

                    b.HasIndex("ContainerId", "ServiceId");

                    b.ToTable("SysServiceInstance");
                });

            modelBuilder.Entity("SF.Data.IdentGenerator.DataModels.IdentSeed", b =>
                {
                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<long>("NextValue");

                    b.Property<int>("Section");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Type");

                    b.ToTable("SysIdentSeed");
                });

            modelBuilder.Entity("SF.Management.BizAdmins.Entity.DataModels.BizAdmin", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Account")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OwnerId");

                    b.Property<long?>("ScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("Account");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("MgrBizAdmin");
                });

            modelBuilder.Entity("SF.Management.FrontEndContents.DataModels.Content", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("Disabled");

                    b.Property<string>("FontIcon")
                        .HasMaxLength(100);

                    b.Property<string>("Icon")
                        .HasMaxLength(200);

                    b.Property<string>("Image")
                        .HasMaxLength(200);

                    b.Property<string>("ItemsData");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ProviderConfig");

                    b.Property<string>("ProviderType")
                        .HasMaxLength(100);

                    b.Property<string>("Summary");

                    b.Property<string>("Title1")
                        .HasMaxLength(200);

                    b.Property<string>("Title2")
                        .HasMaxLength(200);

                    b.Property<string>("Title3")
                        .HasMaxLength(200);

                    b.Property<string>("Uri")
                        .HasMaxLength(200);

                    b.Property<string>("UriTarget")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FrontContent");
                });

            modelBuilder.Entity("SF.Management.FrontEndContents.DataModels.Site", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<long>("TemplateId");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("FrontSite");
                });

            modelBuilder.Entity("SF.Management.FrontEndContents.DataModels.SiteTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FrontSiteTemplate");
                });

            modelBuilder.Entity("SF.Management.MenuServices.Entity.DataModels.Menu", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Ident")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OwnerId");

                    b.Property<long?>("ScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("ScopeId", "Ident");

                    b.ToTable("MgrMenu");
                });

            modelBuilder.Entity("SF.Management.MenuServices.Entity.DataModels.MenuItem", b =>
                {
                    b.Property<long>("Id");

                    b.Property<int>("Action");

                    b.Property<string>("ActionArgument")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("FontIcon")
                        .HasMaxLength(100);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<long>("MenuId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OwnerId");

                    b.Property<long?>("ParentId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<long?>("ScopeId");

                    b.Property<long?>("ServiceId");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("MenuId");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("MgrMenuItem");
                });

            modelBuilder.Entity("SF.Management.SysAdmins.Entity.DataModels.SysAdmin", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Account")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OwnerId");

                    b.Property<long?>("ScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("Account");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("MgrSysAdmin");
                });

            modelBuilder.Entity("SF.Users.Members.Entity.DataModels.Member", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("OwnerId");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.Property<long?>("ScopeId");

                    b.Property<long>("SignupIdentityId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("ScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("UserMember");
                });

            modelBuilder.Entity("SF.Auth.Identities.Entity.DataModels.IdentityCredential", b =>
                {
                    b.HasOne("SF.Auth.Identities.Entity.DataModels.Identity", "Identity")
                        .WithMany("Credentials")
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Category", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.CategoryItem", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Biz.Products.Entity.DataModels.Item", "Item")
                        .WithMany("CategoryItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Item", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Product", "Product")
                        .WithMany("Items")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Biz.Products.Entity.DataModels.Item", "SourceItem")
                        .WithMany("ChildItems")
                        .HasForeignKey("SourceItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Product", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.ProductType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.ProductDetail", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Product", "Product")
                        .WithOne("Detail")
                        .HasForeignKey("SF.Biz.Products.Entity.DataModels.ProductDetail", "Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.ProductSpec", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Product", "Product")
                        .WithMany("Specs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Property", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Property", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Biz.Products.Entity.DataModels.PropertyScope", "Scope")
                        .WithMany("Properties")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Biz.Products.Entity.DataModels.ProductType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.PropertyItem", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Product", "Product")
                        .WithMany("PropertyItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Biz.Products.Entity.DataModels.Property", "Property")
                        .WithMany("ProductItems")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.PropertyScope", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.ProductType", "Type")
                        .WithMany("PropertyScopes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.Document", b =>
                {
                    b.HasOne("SF.Common.Documents.DataModels.DocumentAuthor", "Author")
                        .WithMany("Documents")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Common.Documents.DataModels.DocumentCategory", "Container")
                        .WithMany("Items")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DocumentCategory", b =>
                {
                    b.HasOne("SF.Common.Documents.DataModels.DocumentCategory", "Container")
                        .WithMany("Children")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DocumentTagReference", b =>
                {
                    b.HasOne("SF.Common.Documents.DataModels.Document", "Document")
                        .WithMany("Tags")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Common.Documents.DataModels.DocumentTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Core.ServiceManagement.Management.DataModels.ServiceInstance", b =>
                {
                    b.HasOne("SF.Core.ServiceManagement.Management.DataModels.ServiceInstance", "Container")
                        .WithMany("Children")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Management.FrontEndContents.DataModels.Site", b =>
                {
                    b.HasOne("SF.Management.FrontEndContents.DataModels.SiteTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Management.MenuServices.Entity.DataModels.MenuItem", b =>
                {
                    b.HasOne("SF.Management.MenuServices.Entity.DataModels.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Management.MenuServices.Entity.DataModels.MenuItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
