<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SF.Biz.Payments.Providers</name>
    </assembly>
    <members>
        <member name="T:SF.Biz.Payments.Platforms.Alipay.AlipayCollectProvider">
            <summary>
            支付宝收款提供者
            </summary>
        </member>
        <member name="T:SF.Biz.Payments.Platforms.Tests.TestCollectProvider">
            <summary>
            测试收款提供者
            </summary>
        </member>
        <member name="T:SF.Biz.Payments.Platforms.Weichat.WeichatCollectProvider">
            <summary>
            微信收款提供者
            </summary>
        </member>
        <member name="P:SF.Biz.Payments.Platforms.Weichat.WeiChatPaySetting.AppId">
            <title>公众号APPID</title>
             <summary>
             公众号唯一标识
             </summary>
        </member>
        <member name="P:SF.Biz.Payments.Platforms.Weichat.WeiChatPaySetting.MCHID">
            <title>微信支付商户号</title>
             <summary>
             微信支付商户号
             </summary>
        </member>
        <member name="P:SF.Biz.Payments.Platforms.Weichat.WeiChatPaySetting.KEY">
            <title>商户支付支付秘钥</title>
             <summary>
             商户支付密钥，参考开户邮件设置
             </summary>
        </member>
        <member name="P:SF.Biz.Payments.Platforms.Weichat.WeiChatPaySetting.SSLCERT_PATH">
            <title>证书路径</title>
             <summary>
             证书路径,注意填写相对于网站根目录的路径（仅退款、撤销订单时需要）
             </summary>
        </member>
        <member name="P:SF.Biz.Payments.Platforms.Weichat.WeiChatPaySetting.SSLCERT_PASSWORD">
            <title>证书密码</title>
             <summary>
             仅退款、撤销订单时需要
             </summary>
        </member>
        <member name="T:WxPayAPI.WxPayConfig">
            配置账号信息
        </member>
        <member name="T:WxPayAPI.WxPayData">
            <summary>
            微信支付协议接口数据类，所有的API接口通信都依赖这个数据结构，
            在调用接口之前先填充各个字段的值，然后进行接口通信，
            这样设计的好处是可扩展性强，用户可随意对协议进行更改而不用重新设计数据结构，
            还可以随意组合出不同的协议数据包，不用为每个协议设计一个数据包结构
            </summary>
        </member>
        <member name="M:WxPayAPI.WxPayData.SetValue(System.String,System.Object)">
                    * 设置某个字段的值
                    * @param key 字段名
                     * @param value 字段值
        </member>
        <member name="M:WxPayAPI.WxPayData.GetValue(System.String)">
                    * 根据字段名获取某个字段的值
                    * @param key 字段名
                     * @return key对应的字段值
        </member>
        <member name="M:WxPayAPI.WxPayData.IsSet(System.String)">
            判断某个字段是否已设置
            @param key 字段名
            @return 若字段key已被设置，则返回true，否则返回false
        </member>
        <member name="M:WxPayAPI.WxPayData.ToXml">
             @将Dictionary转成xml
             @return 经转换得到的xml串
             @throws WxPayException
            
        </member>
        <member name="M:WxPayAPI.WxPayData.FromXml(System.String,WxPayAPI.WxPayConfig)">
            @将xml转为WxPayData对象并返回对象内部的数据
            @param string 待转换的xml串
            @return 经转换得到的Dictionary
            @throws WxPayException
        </member>
        <member name="M:WxPayAPI.WxPayData.ToUrl">
            @Dictionary格式转化成url参数格式
            @ return url格式串, 该串不包含sign字段值
        </member>
        <member name="M:WxPayAPI.WxPayData.MakeSign(WxPayAPI.WxPayConfig)">
            @生成签名，详见签名生成算法
            @return 签名, sign字段不参加签名
        </member>
        <member name="M:WxPayAPI.WxPayData.CheckSign(WxPayAPI.WxPayConfig)">
            
            检测签名是否正确
            正确返回true，错误抛异常
        </member>
        <member name="M:WxPayAPI.WxPayData.GetValues">
            @获取Dictionary
        </member>
        <member name="T:WxPayAPI.HttpService">
            <summary>
            http连接基础类，负责底层的http通信
            </summary>
        </member>
        <member name="M:WxPayAPI.HttpService.Get(System.String)">
            <summary>
            处理http GET请求，返回数据
            </summary>
            <param name="url">请求的url地址</param>
            <returns>http GET成功后返回的数据，失败抛WebException异常</returns>
        </member>
        <member name="M:WxPayAPI.Log.Debug(System.String,System.String)">
            向日志文件写入调试信息
            @param className 类名
            @param content 写入内容
        </member>
        <member name="M:WxPayAPI.Log.Info(System.String,System.String)">
            向日志文件写入运行时信息
            @param className 类名
            @param content 写入内容
        </member>
        <member name="M:WxPayAPI.Log.Error(System.String,System.String)">
            向日志文件写入出错信息
            @param className 类名
            @param content 写入内容
        </member>
        <member name="M:WxPayAPI.Log.WriteLog(System.String,System.String,System.String)">
            实际的写日志操作
            @param type 日志记录类型
            @param className 类名
            @param content 写入内容
        </member>
        <member name="T:WxPayAPI.Notify">
            <summary>
            回调处理基类
            主要负责接收微信支付后台发送过来的数据，对数据进行签名验证
            子类在此类基础上进行派生并重写自己的回调处理过程
            </summary>
        </member>
        <member name="M:WxPayAPI.WxPayApi.Micropay(WxPayAPI.WxPayData,System.Int32)">
            提交被扫支付API
            收银员使用扫码设备读取微信用户刷卡授权码以后，二维码或条码信息传送至商户收银台，
            由商户收银台或者商户后台调用该接口发起支付。
            @param WxPayData inputObj 提交给被扫支付API的参数
            @param int timeOut 超时时间
            @throws WxPayException
            @return 成功时返回调用结果，其他抛异常
        </member>
        <member name="M:WxPayAPI.WxPayApi.OrderQuery(WxPayAPI.WxPayData,System.Int32)">
               
            查询订单
            @param WxPayData inputObj 提交给查询订单API的参数
            @param int timeOut 超时时间
            @throws WxPayException
            @return 成功时返回订单查询结果，其他抛异常
        </member>
        <member name="M:WxPayAPI.WxPayApi.Reverse(WxPayAPI.WxPayData,System.Int32)">
            
            撤销订单API接口
            @param WxPayData inputObj 提交给撤销订单API接口的参数，out_trade_no和transaction_id必填一个
            @param int timeOut 接口超时时间
            @throws WxPayException
            @return 成功时返回API调用结果，其他抛异常
        </member>
        <member name="M:WxPayAPI.WxPayApi.Refund(WxPayAPI.WxPayData,System.Int32)">
            
            申请退款
            @param WxPayData inputObj 提交给申请退款API的参数
            @param int timeOut 超时时间
            @throws WxPayException
            @return 成功时返回接口调用结果，其他抛异常
        </member>
        <member name="M:WxPayAPI.WxPayApi.RefundQuery(WxPayAPI.WxPayData,System.Int32)">
            
            查询退款
            提交退款申请后，通过该接口查询退款状态。退款有一定延时，
            用零钱支付的退款20分钟内到账，银行卡支付的退款3个工作日后重新查询退款状态。
            out_refund_no、out_trade_no、transaction_id、refund_id四个参数必填一个
            @param WxPayData inputObj 提交给查询退款API的参数
            @param int timeOut 接口超时时间
            @throws WxPayException
            @return 成功时返回，其他抛异常
        </member>
        <member name="M:WxPayAPI.WxPayApi.DownloadBill(WxPayAPI.WxPayData,System.Int32)">
            下载对账单
            @param WxPayData inputObj 提交给下载对账单API的参数
            @param int timeOut 接口超时时间
            @throws WxPayException
            @return 成功时返回，其他抛异常
        </member>
        <member name="M:WxPayAPI.WxPayApi.ShortUrl(WxPayAPI.WxPayData,System.Int32)">
            
            转换短链接
            该接口主要用于扫码原生支付模式一中的二维码链接转成短链接(weixin://wxpay/s/XXXXXX)，
            减小二维码数据量，提升扫描速度和精确度。
            @param WxPayData inputObj 提交给转换短连接API的参数
            @param int timeOut 接口超时时间
            @throws WxPayException
            @return 成功时返回，其他抛异常
        </member>
        <member name="M:WxPayAPI.WxPayApi.UnifiedOrder(WxPayAPI.WxPayData,System.Int32)">
            
            统一下单
            @param WxPaydata inputObj 提交给统一下单API的参数
            @param int timeOut 超时时间
            @throws WxPayException
            @return 成功时返回，其他抛异常
        </member>
        <member name="M:WxPayAPI.WxPayApi.CloseOrder(WxPayAPI.WxPayData,System.Int32)">
            
            关闭订单
            @param WxPayData inputObj 提交给关闭订单API的参数
            @param int timeOut 接口超时时间
            @throws WxPayException
            @return 成功时返回，其他抛异常
        </member>
        <member name="M:WxPayAPI.WxPayApi.ReportCostTime(System.String,System.Int32,WxPayAPI.WxPayData)">
            
            测速上报
            @param string interface_url 接口URL
            @param int timeCost 接口耗时
            @param WxPayData inputObj参数数组
        </member>
        <member name="M:WxPayAPI.WxPayApi.Report(WxPayAPI.WxPayData,System.Int32)">
            
            测速上报接口实现
            @param WxPayData inputObj 提交给测速上报接口的参数
            @param int timeOut 测速上报接口超时时间
            @throws WxPayException
            @return 成功时返回测速上报接口返回的结果，其他抛异常
        </member>
        <member name="M:WxPayAPI.WxPayApi.GenerateOutTradeNo">
                    * 根据当前系统时间加随机序列来生成订单号
                     * @return 订单号
        </member>
        <member name="M:WxPayAPI.WxPayApi.GenerateTimeStamp">
                    * 生成时间戳，标准北京时间，时区为东八区，自1970年1月1日 0点0分0秒以来的秒数
                     * @return 时间戳
        </member>
        <member name="M:WxPayAPI.WxPayApi.GenerateNonceStr">
            生成随机串，随机串包含字母或数字
            @return 随机串
        </member>
    </members>
</doc>
