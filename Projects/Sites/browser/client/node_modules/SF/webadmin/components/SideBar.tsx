import React = require('react')
import Link from 'SF/components/utils/Link';
import * as menu from "../menu-types"
//import ScrollArea from 'react-scrollbar';
import ScrollArea from 'react-scrollbar';
import classnames = require("classnames"); 
import * as lodash from 'lodash';  

export class SearchBox extends React.Component<any, any> {
    render() {
        return <li className="sidebar-search-wrapper">
            <form className="sidebar-search sidebar-search-bordered" action="#" method="POST">
                <a href="javascript:;" className="remove">
                    <i className="icon-close"></i>
                </a>
                <div className="input-group">
                    <input type="text" className="form-control" placeholder="Search..."/>
                    <span className="input-group-btn">
                        <a href="javascript:;" className="btn submit">
                            <i className="icon-magnifier"></i>
                        </a>
                    </span>
                </div>
            </form>
        </li>
    }
}


export interface MenuCategoryProperty {
    icon: string;
    name: string;
    children?: JSX.Element[],
}
interface MenuCategoryState {
    is_active: boolean;
}
class MenuCategory extends React.Component<MenuCategoryProperty, MenuCategoryState> {
    constructor(props: MenuCategoryProperty, ctx: any) {
        super(props, ctx);
    }
    static contextTypes = {
        router: React.PropTypes.object.isRequired,
        openedCategory: React.PropTypes.object,
        openCategory: React.PropTypes.func.isRequired
    };
    is_active(router: any) {
        var paths = React.Children.toArray(this.props.children).reduce((ps, e) => {
            if ((e as any).props.to.indexOf('://') != -1)
                return ps;

            var cs = (e as any).props.to.split('/');
            if (ps == null)
                return cs;
            var i = 0;
            for (; i < Math.min(cs.length, ps.length); i++)
                if (cs[i] != ps[i])
                    break;
            if (i < ps.length)
                ps = ps.slice(0, i);
            return ps;
        }, null as string[]);
        if (!paths)
            return false;
        var href = router.createHref(paths.join('/'));
        return router.isActive(href);
    }
    render() {
        const ctx = this.context as any;
        const open = ctx && ctx.openCategory || ((x: any) => { });
        var router = ctx.router;
        var is_active = router && this.is_active(router) || false;
        const is_open = ctx && ctx.openedCategory == this || !ctx.openedCategory && is_active;
        var selected = is_active ? <span className="selected" /> : null;
        return <li
            className={classnames("nav-item", { active: is_active, open: is_open }) }
            onClick={() => open(this) }
            >
            <a href="javascript:;" className="nav-link nav-toggle">
                <i className={this.props.icon}></i>
                <span className="title">{this.props.name}</span>
                <span className={classnames("arrow", { open: is_open }) } ></span>
                {selected}
            </a>
            <ul className="sub-menu" style={{ display: is_open ? 'block' : 'none' }}>
                {this.props.children}
            </ul>
        </li>
    }
}

export interface MenuGroupProperty {
    name: string;
}
export class MenuGroup extends React.Component<MenuGroupProperty, any> {
    render() {
        return <li className="heading">
            <h3 className="">{this.props.name}</h3>
        </li>
    }
}

export interface MenuItemProperty {
    icon: string;
    name: string;
    to: string;
}


export class MenuItem extends React.Component<MenuItemProperty, any> {

    static contextTypes = {
        router: React.PropTypes.object.isRequired
    };

    is_active(router: any) {
        if (this.props.to.indexOf('://') != -1)
            return false;
        var href = router.createHref(this.props.to);
        return router.isActive(href);
    }
    render() {
        var router = (this.context as any).router;
        var is_active = router ? this.is_active(router) : false;
        var selected = is_active ? <span className="selected" /> : null;

        return <li className={classnames({ active: is_active }) } >
            <Link to={this.props.to} target={this.props.to.indexOf('://')!=-1?'_blank':null}>
                <i className={this.props.icon} ></i> {this.props.name}
                {selected}
            </Link>
        </li>
    }
}


export interface ContainerProps {
    children?: JSX.Element[];
    pathPrefix?: string;
    menuCategories?: menu.IMenuCategory[];

}
export interface ContainerState {
    openedCategory?: MenuCategory
}
export class Container extends React.Component<ContainerProps, ContainerState> {
    constructor(props: ContainerProps, ctx: any) {
        super(props, ctx);
        this.state = { openedCategory: null };
    }

    getChildContext(): any {
        var cctx: any = this.context;
        return {
            openedCategory: this.state.openedCategory,
            openCategory: (category: MenuCategory) => {
                this.setState({
                    openedCategory: category
                });
            },
            router: cctx.router
        }
    }
    
    render() {
        var chds = this.props.children ? React.Children.toArray(this.props.children) : [];

        const searchbox = chds.filter(i => (i as any).type == SearchBox);
        const children = chds.filter(i => (i as any).type != SearchBox);
        const pathMerge = (prefix, base, path) => {
            if (path.indexOf('://')!=-1)
                return path;
            if (path.charAt(0) == '/')
                return path;
            if (base.charAt(0) == '/')
                return base + "/" + path;
            if (prefix[prefix.length - 1] != '/')
                prefix += '/';
            return prefix  + base + "/" + path;
        }
        if (this.props.menuCategories) {
            var pathPrefix = this.props.pathPrefix || "";
            var idx = 0;
            lodash(this.props.menuCategories)
                .map((c, i) => ({ c: c, i: i }))
                .groupBy(i => i.c.group || "")
                .values()
                .sortBy(c => c[0].i)
                .map((c: any[]) => c.map(i => i.c))
                .forEach((cs: menu.IMenuCategory[]) => {
                    if(cs[0].group)
                        children.push(<MenuGroup key={idx++} name={cs[0].group}/>);
                    cs.forEach((c) => {
                        children.push(
                            <MenuCategory key={idx++}  name={c.name} icon={c.icon}>
                                {
                                    c.items.map((i, idx) =>
                                        <MenuItem key={idx} name={i.name} icon={i.icon} to={pathMerge(pathPrefix,c.path,i.path)} />
                                    )
                                }
                            </MenuCategory>
                        )
                    });
                });
        }
        return <div className="navbar-collapse collapse page-sidebar" style={{ top: "42px", bottom: "0px" }}>
            <ScrollArea smoothScrolling={true} style={{ height: "100%" }}>
                <ul className="page-sidebar-menu" data-keep-expanded="false" data-auto-scroll="true" data-slide-speed="200">
                    {searchbox}
                    {children}
                </ul>
            </ScrollArea>
        </div>
    }
}


(Container as any).contextTypes = {
    router: React.PropTypes.object.isRequired
};
(Container as any).childContextTypes = {
    router: React.PropTypes.object,
    openedCategory: React.PropTypes.object,
    openCategory: React.PropTypes.func
}

