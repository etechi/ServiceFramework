/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/scripts/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  ///<reference path="../../scripts/typings/index.d.ts"/>
  window.Promise = __webpack_require__(175);
  var userTracking = __webpack_require__(13);
  __webpack_require__(139);
  __webpack_require__(138);
  __webpack_require__(133);
  var panel_carousel = __webpack_require__(173);
  var panel_round_timer = __webpack_require__(17);
  var panel_timer = __webpack_require__(174);
  var page_home = __webpack_require__(141);
  var page_product_category = __webpack_require__(148);
  var page_product_collection = __webpack_require__(149);
  var page_product_cur_round = __webpack_require__(150);
  var page_product_history_round = __webpack_require__(151);
  var page_user_signin = __webpack_require__(170);
  var page_user_signup = __webpack_require__(171);
  var page_user_reset_password = __webpack_require__(167);
  var page_user_bind_phonenumber = __webpack_require__(162);
  var page_user_index = __webpack_require__(164);
  var page_user_security = __webpack_require__(168);
  var page_user_win_records = __webpack_require__(172);
  var page_other_win_records = __webpack_require__(160);
  var page_user_expose = __webpack_require__(163);
  var page_user_share = __webpack_require__(169);
  var page_user_notification = __webpack_require__(166);
  var page_user_notification_detail = __webpack_require__(165);
  var page_user_address = __webpack_require__(161);
  var page_shopping_cart = __webpack_require__(157);
  var page_round_shared = __webpack_require__(156);
  var page_payment_qrcode = __webpack_require__(146);
  var page_payment_status = __webpack_require__(147);
  var page_account_recharge = __webpack_require__(137);
  var page_account_recharge_history = __webpack_require__(136);
  var page_trade_history = __webpack_require__(158);
  var page_promotion_bonuspoint = __webpack_require__(152);
  var page_promotion_coupon = __webpack_require__(153);
  var page_promotion_private_activity = __webpack_require__(155);
  var page_promotion_invite = __webpack_require__(154);
  var page_help_feedback = __webpack_require__(140);
  var page_netdisk_home = __webpack_require__(144);
  var page_netdisk_account = __webpack_require__(142);
  var page_netdisk_user = __webpack_require__(145);
  var panels = {
      'utils/carousel': panel_carousel,
      'utils/round-timer': panel_round_timer,
      'utils/timer': panel_timer
  };
  var pages = {
      page_home: page_home,
      page_product_category: page_product_category,
      page_product_collection: page_product_collection,
      page_product_cur_round: page_product_cur_round,
      page_product_history_round: page_product_history_round,
      page_user_signin: page_user_signin,
      page_user_signup: page_user_signup,
      page_user_reset_password: page_user_reset_password,
      page_user_bind_phonenumber: page_user_bind_phonenumber,
      page_user_index: page_user_index,
      page_user_security: page_user_security,
      page_user_win_records: page_user_win_records,
      page_other_win_records: page_other_win_records,
      page_user_expose: page_user_expose,
      page_user_share: page_user_share,
      page_user_address: page_user_address,
      page_user_notification: page_user_notification,
      page_user_notification_detail: page_user_notification_detail,
      page_shopping_cart: page_shopping_cart,
      page_round_shared: page_round_shared,
      page_account_recharge: page_account_recharge,
      page_account_recharge_history: page_account_recharge_history,
      page_trade_history: page_trade_history,
      page_payment_qrcode: page_payment_qrcode,
      page_payment_status: page_payment_status,
      page_promotion_bonuspoint: page_promotion_bonuspoint,
      page_promotion_coupon: page_promotion_coupon,
      page_promotion_private_activity: page_promotion_private_activity,
      page_promotion_invite: page_promotion_invite,
      page_help_feedback: page_help_feedback,
      page_netdisk_home: page_netdisk_home,
      page_netdisk_account: page_netdisk_account,
      page_netdisk_user: page_netdisk_user
  };
  function boot(e) {
      var type = e.getAttribute("type");
      if (!type)
          return;
      panels[type.replace(/\./g, '/')](e);
  }
  var es = document.getElementsByTagName("ins");
  for (var i = 0; i < es.length; i++)
      boot(es.item(i));
  window.boot = function (page, args) {
      pages["page_" + page.replace(/-/g, '_')](args);
  };
  userTracking.tryUserTracking();


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(module) {//! moment.js
  //! version : 2.13.0
  //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
  //! license : MIT
  //! momentjs.com

  ;(function (global, factory) {
       true ? module.exports = factory() :
      typeof define === 'function' && define.amd ? define(factory) :
      global.moment = factory()
  }(this, function () { 'use strict';

      var hookCallback;

      function utils_hooks__hooks () {
          return hookCallback.apply(null, arguments);
      }

      // This is done to register the method called with moment()
      // without creating circular dependencies.
      function setHookCallback (callback) {
          hookCallback = callback;
      }

      function isArray(input) {
          return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
      }

      function isDate(input) {
          return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
      }

      function map(arr, fn) {
          var res = [], i;
          for (i = 0; i < arr.length; ++i) {
              res.push(fn(arr[i], i));
          }
          return res;
      }

      function hasOwnProp(a, b) {
          return Object.prototype.hasOwnProperty.call(a, b);
      }

      function extend(a, b) {
          for (var i in b) {
              if (hasOwnProp(b, i)) {
                  a[i] = b[i];
              }
          }

          if (hasOwnProp(b, 'toString')) {
              a.toString = b.toString;
          }

          if (hasOwnProp(b, 'valueOf')) {
              a.valueOf = b.valueOf;
          }

          return a;
      }

      function create_utc__createUTC (input, format, locale, strict) {
          return createLocalOrUTC(input, format, locale, strict, true).utc();
      }

      function defaultParsingFlags() {
          // We need to deep clone this object.
          return {
              empty           : false,
              unusedTokens    : [],
              unusedInput     : [],
              overflow        : -2,
              charsLeftOver   : 0,
              nullInput       : false,
              invalidMonth    : null,
              invalidFormat   : false,
              userInvalidated : false,
              iso             : false,
              parsedDateParts : [],
              meridiem        : null
          };
      }

      function getParsingFlags(m) {
          if (m._pf == null) {
              m._pf = defaultParsingFlags();
          }
          return m._pf;
      }

      var some;
      if (Array.prototype.some) {
          some = Array.prototype.some;
      } else {
          some = function (fun) {
              var t = Object(this);
              var len = t.length >>> 0;

              for (var i = 0; i < len; i++) {
                  if (i in t && fun.call(this, t[i], i, t)) {
                      return true;
                  }
              }

              return false;
          };
      }

      function valid__isValid(m) {
          if (m._isValid == null) {
              var flags = getParsingFlags(m);
              var parsedParts = some.call(flags.parsedDateParts, function (i) {
                  return i != null;
              });
              m._isValid = !isNaN(m._d.getTime()) &&
                  flags.overflow < 0 &&
                  !flags.empty &&
                  !flags.invalidMonth &&
                  !flags.invalidWeekday &&
                  !flags.nullInput &&
                  !flags.invalidFormat &&
                  !flags.userInvalidated &&
                  (!flags.meridiem || (flags.meridiem && parsedParts));

              if (m._strict) {
                  m._isValid = m._isValid &&
                      flags.charsLeftOver === 0 &&
                      flags.unusedTokens.length === 0 &&
                      flags.bigHour === undefined;
              }
          }
          return m._isValid;
      }

      function valid__createInvalid (flags) {
          var m = create_utc__createUTC(NaN);
          if (flags != null) {
              extend(getParsingFlags(m), flags);
          }
          else {
              getParsingFlags(m).userInvalidated = true;
          }

          return m;
      }

      function isUndefined(input) {
          return input === void 0;
      }

      // Plugins that add properties should also add the key here (null value),
      // so we can properly clone ourselves.
      var momentProperties = utils_hooks__hooks.momentProperties = [];

      function copyConfig(to, from) {
          var i, prop, val;

          if (!isUndefined(from._isAMomentObject)) {
              to._isAMomentObject = from._isAMomentObject;
          }
          if (!isUndefined(from._i)) {
              to._i = from._i;
          }
          if (!isUndefined(from._f)) {
              to._f = from._f;
          }
          if (!isUndefined(from._l)) {
              to._l = from._l;
          }
          if (!isUndefined(from._strict)) {
              to._strict = from._strict;
          }
          if (!isUndefined(from._tzm)) {
              to._tzm = from._tzm;
          }
          if (!isUndefined(from._isUTC)) {
              to._isUTC = from._isUTC;
          }
          if (!isUndefined(from._offset)) {
              to._offset = from._offset;
          }
          if (!isUndefined(from._pf)) {
              to._pf = getParsingFlags(from);
          }
          if (!isUndefined(from._locale)) {
              to._locale = from._locale;
          }

          if (momentProperties.length > 0) {
              for (i in momentProperties) {
                  prop = momentProperties[i];
                  val = from[prop];
                  if (!isUndefined(val)) {
                      to[prop] = val;
                  }
              }
          }

          return to;
      }

      var updateInProgress = false;

      // Moment prototype object
      function Moment(config) {
          copyConfig(this, config);
          this._d = new Date(config._d != null ? config._d.getTime() : NaN);
          // Prevent infinite loop in case updateOffset creates new moment
          // objects.
          if (updateInProgress === false) {
              updateInProgress = true;
              utils_hooks__hooks.updateOffset(this);
              updateInProgress = false;
          }
      }

      function isMoment (obj) {
          return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
      }

      function absFloor (number) {
          if (number < 0) {
              return Math.ceil(number);
          } else {
              return Math.floor(number);
          }
      }

      function toInt(argumentForCoercion) {
          var coercedNumber = +argumentForCoercion,
              value = 0;

          if (coercedNumber !== 0 && isFinite(coercedNumber)) {
              value = absFloor(coercedNumber);
          }

          return value;
      }

      // compare two arrays, return the number of differences
      function compareArrays(array1, array2, dontConvert) {
          var len = Math.min(array1.length, array2.length),
              lengthDiff = Math.abs(array1.length - array2.length),
              diffs = 0,
              i;
          for (i = 0; i < len; i++) {
              if ((dontConvert && array1[i] !== array2[i]) ||
                  (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                  diffs++;
              }
          }
          return diffs + lengthDiff;
      }

      function warn(msg) {
          if (utils_hooks__hooks.suppressDeprecationWarnings === false &&
                  (typeof console !==  'undefined') && console.warn) {
              console.warn('Deprecation warning: ' + msg);
          }
      }

      function deprecate(msg, fn) {
          var firstTime = true;

          return extend(function () {
              if (utils_hooks__hooks.deprecationHandler != null) {
                  utils_hooks__hooks.deprecationHandler(null, msg);
              }
              if (firstTime) {
                  warn(msg + '\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\n' + (new Error()).stack);
                  firstTime = false;
              }
              return fn.apply(this, arguments);
          }, fn);
      }

      var deprecations = {};

      function deprecateSimple(name, msg) {
          if (utils_hooks__hooks.deprecationHandler != null) {
              utils_hooks__hooks.deprecationHandler(name, msg);
          }
          if (!deprecations[name]) {
              warn(msg);
              deprecations[name] = true;
          }
      }

      utils_hooks__hooks.suppressDeprecationWarnings = false;
      utils_hooks__hooks.deprecationHandler = null;

      function isFunction(input) {
          return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
      }

      function isObject(input) {
          return Object.prototype.toString.call(input) === '[object Object]';
      }

      function locale_set__set (config) {
          var prop, i;
          for (i in config) {
              prop = config[i];
              if (isFunction(prop)) {
                  this[i] = prop;
              } else {
                  this['_' + i] = prop;
              }
          }
          this._config = config;
          // Lenient ordinal parsing accepts just a number in addition to
          // number + (possibly) stuff coming from _ordinalParseLenient.
          this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
      }

      function mergeConfigs(parentConfig, childConfig) {
          var res = extend({}, parentConfig), prop;
          for (prop in childConfig) {
              if (hasOwnProp(childConfig, prop)) {
                  if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                      res[prop] = {};
                      extend(res[prop], parentConfig[prop]);
                      extend(res[prop], childConfig[prop]);
                  } else if (childConfig[prop] != null) {
                      res[prop] = childConfig[prop];
                  } else {
                      delete res[prop];
                  }
              }
          }
          return res;
      }

      function Locale(config) {
          if (config != null) {
              this.set(config);
          }
      }

      var keys;

      if (Object.keys) {
          keys = Object.keys;
      } else {
          keys = function (obj) {
              var i, res = [];
              for (i in obj) {
                  if (hasOwnProp(obj, i)) {
                      res.push(i);
                  }
              }
              return res;
          };
      }

      // internal storage for locale config files
      var locales = {};
      var globalLocale;

      function normalizeLocale(key) {
          return key ? key.toLowerCase().replace('_', '-') : key;
      }

      // pick the locale from the array
      // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
      // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
      function chooseLocale(names) {
          var i = 0, j, next, locale, split;

          while (i < names.length) {
              split = normalizeLocale(names[i]).split('-');
              j = split.length;
              next = normalizeLocale(names[i + 1]);
              next = next ? next.split('-') : null;
              while (j > 0) {
                  locale = loadLocale(split.slice(0, j).join('-'));
                  if (locale) {
                      return locale;
                  }
                  if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                      //the next array item is better than a shallower substring of this one
                      break;
                  }
                  j--;
              }
              i++;
          }
          return null;
      }

      function loadLocale(name) {
          var oldLocale = null;
          // TODO: Find a better way to register and load all the locales in Node
          if (!locales[name] && (typeof module !== 'undefined') &&
                  module && module.exports) {
              try {
                  oldLocale = globalLocale._abbr;
                  __webpack_require__(177)("./" + name);
                  // because defineLocale currently also sets the global locale, we
                  // want to undo that for lazy loaded locales
                  locale_locales__getSetGlobalLocale(oldLocale);
              } catch (e) { }
          }
          return locales[name];
      }

      // This function will load locale and then set the global locale.  If
      // no arguments are passed in, it will simply return the current global
      // locale key.
      function locale_locales__getSetGlobalLocale (key, values) {
          var data;
          if (key) {
              if (isUndefined(values)) {
                  data = locale_locales__getLocale(key);
              }
              else {
                  data = defineLocale(key, values);
              }

              if (data) {
                  // moment.duration._locale = moment._locale = data;
                  globalLocale = data;
              }
          }

          return globalLocale._abbr;
      }

      function defineLocale (name, config) {
          if (config !== null) {
              config.abbr = name;
              if (locales[name] != null) {
                  deprecateSimple('defineLocaleOverride',
                          'use moment.updateLocale(localeName, config) to change ' +
                          'an existing locale. moment.defineLocale(localeName, ' +
                          'config) should only be used for creating a new locale');
                  config = mergeConfigs(locales[name]._config, config);
              } else if (config.parentLocale != null) {
                  if (locales[config.parentLocale] != null) {
                      config = mergeConfigs(locales[config.parentLocale]._config, config);
                  } else {
                      // treat as if there is no base config
                      deprecateSimple('parentLocaleUndefined',
                              'specified parentLocale is not defined yet');
                  }
              }
              locales[name] = new Locale(config);

              // backwards compat for now: also set the locale
              locale_locales__getSetGlobalLocale(name);

              return locales[name];
          } else {
              // useful for testing
              delete locales[name];
              return null;
          }
      }

      function updateLocale(name, config) {
          if (config != null) {
              var locale;
              if (locales[name] != null) {
                  config = mergeConfigs(locales[name]._config, config);
              }
              locale = new Locale(config);
              locale.parentLocale = locales[name];
              locales[name] = locale;

              // backwards compat for now: also set the locale
              locale_locales__getSetGlobalLocale(name);
          } else {
              // pass null for config to unupdate, useful for tests
              if (locales[name] != null) {
                  if (locales[name].parentLocale != null) {
                      locales[name] = locales[name].parentLocale;
                  } else if (locales[name] != null) {
                      delete locales[name];
                  }
              }
          }
          return locales[name];
      }

      // returns locale data
      function locale_locales__getLocale (key) {
          var locale;

          if (key && key._locale && key._locale._abbr) {
              key = key._locale._abbr;
          }

          if (!key) {
              return globalLocale;
          }

          if (!isArray(key)) {
              //short-circuit everything else
              locale = loadLocale(key);
              if (locale) {
                  return locale;
              }
              key = [key];
          }

          return chooseLocale(key);
      }

      function locale_locales__listLocales() {
          return keys(locales);
      }

      var aliases = {};

      function addUnitAlias (unit, shorthand) {
          var lowerCase = unit.toLowerCase();
          aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
      }

      function normalizeUnits(units) {
          return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
      }

      function normalizeObjectUnits(inputObject) {
          var normalizedInput = {},
              normalizedProp,
              prop;

          for (prop in inputObject) {
              if (hasOwnProp(inputObject, prop)) {
                  normalizedProp = normalizeUnits(prop);
                  if (normalizedProp) {
                      normalizedInput[normalizedProp] = inputObject[prop];
                  }
              }
          }

          return normalizedInput;
      }

      function makeGetSet (unit, keepTime) {
          return function (value) {
              if (value != null) {
                  get_set__set(this, unit, value);
                  utils_hooks__hooks.updateOffset(this, keepTime);
                  return this;
              } else {
                  return get_set__get(this, unit);
              }
          };
      }

      function get_set__get (mom, unit) {
          return mom.isValid() ?
              mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
      }

      function get_set__set (mom, unit, value) {
          if (mom.isValid()) {
              mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
          }
      }

      // MOMENTS

      function getSet (units, value) {
          var unit;
          if (typeof units === 'object') {
              for (unit in units) {
                  this.set(unit, units[unit]);
              }
          } else {
              units = normalizeUnits(units);
              if (isFunction(this[units])) {
                  return this[units](value);
              }
          }
          return this;
      }

      function zeroFill(number, targetLength, forceSign) {
          var absNumber = '' + Math.abs(number),
              zerosToFill = targetLength - absNumber.length,
              sign = number >= 0;
          return (sign ? (forceSign ? '+' : '') : '-') +
              Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }

      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

      var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

      var formatFunctions = {};

      var formatTokenFunctions = {};

      // token:    'M'
      // padded:   ['MM', 2]
      // ordinal:  'Mo'
      // callback: function () { this.month() + 1 }
      function addFormatToken (token, padded, ordinal, callback) {
          var func = callback;
          if (typeof callback === 'string') {
              func = function () {
                  return this[callback]();
              };
          }
          if (token) {
              formatTokenFunctions[token] = func;
          }
          if (padded) {
              formatTokenFunctions[padded[0]] = function () {
                  return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
              };
          }
          if (ordinal) {
              formatTokenFunctions[ordinal] = function () {
                  return this.localeData().ordinal(func.apply(this, arguments), token);
              };
          }
      }

      function removeFormattingTokens(input) {
          if (input.match(/\[[\s\S]/)) {
              return input.replace(/^\[|\]$/g, '');
          }
          return input.replace(/\\/g, '');
      }

      function makeFormatFunction(format) {
          var array = format.match(formattingTokens), i, length;

          for (i = 0, length = array.length; i < length; i++) {
              if (formatTokenFunctions[array[i]]) {
                  array[i] = formatTokenFunctions[array[i]];
              } else {
                  array[i] = removeFormattingTokens(array[i]);
              }
          }

          return function (mom) {
              var output = '', i;
              for (i = 0; i < length; i++) {
                  output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
              }
              return output;
          };
      }

      // format date using native date object
      function formatMoment(m, format) {
          if (!m.isValid()) {
              return m.localeData().invalidDate();
          }

          format = expandFormat(format, m.localeData());
          formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

          return formatFunctions[format](m);
      }

      function expandFormat(format, locale) {
          var i = 5;

          function replaceLongDateFormatTokens(input) {
              return locale.longDateFormat(input) || input;
          }

          localFormattingTokens.lastIndex = 0;
          while (i >= 0 && localFormattingTokens.test(format)) {
              format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
              localFormattingTokens.lastIndex = 0;
              i -= 1;
          }

          return format;
      }

      var match1         = /\d/;            //       0 - 9
      var match2         = /\d\d/;          //      00 - 99
      var match3         = /\d{3}/;         //     000 - 999
      var match4         = /\d{4}/;         //    0000 - 9999
      var match6         = /[+-]?\d{6}/;    // -999999 - 999999
      var match1to2      = /\d\d?/;         //       0 - 99
      var match3to4      = /\d\d\d\d?/;     //     999 - 9999
      var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
      var match1to3      = /\d{1,3}/;       //       0 - 999
      var match1to4      = /\d{1,4}/;       //       0 - 9999
      var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

      var matchUnsigned  = /\d+/;           //       0 - inf
      var matchSigned    = /[+-]?\d+/;      //    -inf - inf

      var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
      var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

      var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

      // any word (or two) characters or numbers including two/three word month in arabic.
      // includes scottish gaelic two word and hyphenated months
      var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


      var regexes = {};

      function addRegexToken (token, regex, strictRegex) {
          regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
              return (isStrict && strictRegex) ? strictRegex : regex;
          };
      }

      function getParseRegexForToken (token, config) {
          if (!hasOwnProp(regexes, token)) {
              return new RegExp(unescapeFormat(token));
          }

          return regexes[token](config._strict, config._locale);
      }

      // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
      function unescapeFormat(s) {
          return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
              return p1 || p2 || p3 || p4;
          }));
      }

      function regexEscape(s) {
          return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      }

      var tokens = {};

      function addParseToken (token, callback) {
          var i, func = callback;
          if (typeof token === 'string') {
              token = [token];
          }
          if (typeof callback === 'number') {
              func = function (input, array) {
                  array[callback] = toInt(input);
              };
          }
          for (i = 0; i < token.length; i++) {
              tokens[token[i]] = func;
          }
      }

      function addWeekParseToken (token, callback) {
          addParseToken(token, function (input, array, config, token) {
              config._w = config._w || {};
              callback(input, config._w, config, token);
          });
      }

      function addTimeToArrayFromToken(token, input, config) {
          if (input != null && hasOwnProp(tokens, token)) {
              tokens[token](input, config._a, config, token);
          }
      }

      var YEAR = 0;
      var MONTH = 1;
      var DATE = 2;
      var HOUR = 3;
      var MINUTE = 4;
      var SECOND = 5;
      var MILLISECOND = 6;
      var WEEK = 7;
      var WEEKDAY = 8;

      var indexOf;

      if (Array.prototype.indexOf) {
          indexOf = Array.prototype.indexOf;
      } else {
          indexOf = function (o) {
              // I know
              var i;
              for (i = 0; i < this.length; ++i) {
                  if (this[i] === o) {
                      return i;
                  }
              }
              return -1;
          };
      }

      function daysInMonth(year, month) {
          return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
      }

      // FORMATTING

      addFormatToken('M', ['MM', 2], 'Mo', function () {
          return this.month() + 1;
      });

      addFormatToken('MMM', 0, 0, function (format) {
          return this.localeData().monthsShort(this, format);
      });

      addFormatToken('MMMM', 0, 0, function (format) {
          return this.localeData().months(this, format);
      });

      // ALIASES

      addUnitAlias('month', 'M');

      // PARSING

      addRegexToken('M',    match1to2);
      addRegexToken('MM',   match1to2, match2);
      addRegexToken('MMM',  function (isStrict, locale) {
          return locale.monthsShortRegex(isStrict);
      });
      addRegexToken('MMMM', function (isStrict, locale) {
          return locale.monthsRegex(isStrict);
      });

      addParseToken(['M', 'MM'], function (input, array) {
          array[MONTH] = toInt(input) - 1;
      });

      addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
          var month = config._locale.monthsParse(input, token, config._strict);
          // if we didn't find a month name, mark the date as invalid.
          if (month != null) {
              array[MONTH] = month;
          } else {
              getParsingFlags(config).invalidMonth = input;
          }
      });

      // LOCALES

      var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;
      var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
      function localeMonths (m, format) {
          return isArray(this._months) ? this._months[m.month()] :
              this._months[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
      }

      var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
      function localeMonthsShort (m, format) {
          return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
              this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
      }

      function units_month__handleStrictParse(monthName, format, strict) {
          var i, ii, mom, llc = monthName.toLocaleLowerCase();
          if (!this._monthsParse) {
              // this is not used
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
              for (i = 0; i < 12; ++i) {
                  mom = create_utc__createUTC([2000, i]);
                  this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                  this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
              }
          }

          if (strict) {
              if (format === 'MMM') {
                  ii = indexOf.call(this._shortMonthsParse, llc);
                  return ii !== -1 ? ii : null;
              } else {
                  ii = indexOf.call(this._longMonthsParse, llc);
                  return ii !== -1 ? ii : null;
              }
          } else {
              if (format === 'MMM') {
                  ii = indexOf.call(this._shortMonthsParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._longMonthsParse, llc);
                  return ii !== -1 ? ii : null;
              } else {
                  ii = indexOf.call(this._longMonthsParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._shortMonthsParse, llc);
                  return ii !== -1 ? ii : null;
              }
          }
      }

      function localeMonthsParse (monthName, format, strict) {
          var i, mom, regex;

          if (this._monthsParseExact) {
              return units_month__handleStrictParse.call(this, monthName, format, strict);
          }

          if (!this._monthsParse) {
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
          }

          // TODO: add sorting
          // Sorting makes sure if one month (or abbr) is a prefix of another
          // see sorting in computeMonthsParse
          for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = create_utc__createUTC([2000, i]);
              if (strict && !this._longMonthsParse[i]) {
                  this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                  this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
              }
              if (!strict && !this._monthsParse[i]) {
                  regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                  this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
              }
              // test the regex
              if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                  return i;
              } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                  return i;
              } else if (!strict && this._monthsParse[i].test(monthName)) {
                  return i;
              }
          }
      }

      // MOMENTS

      function setMonth (mom, value) {
          var dayOfMonth;

          if (!mom.isValid()) {
              // No op
              return mom;
          }

          if (typeof value === 'string') {
              if (/^\d+$/.test(value)) {
                  value = toInt(value);
              } else {
                  value = mom.localeData().monthsParse(value);
                  // TODO: Another silent failure?
                  if (typeof value !== 'number') {
                      return mom;
                  }
              }
          }

          dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
          mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
          return mom;
      }

      function getSetMonth (value) {
          if (value != null) {
              setMonth(this, value);
              utils_hooks__hooks.updateOffset(this, true);
              return this;
          } else {
              return get_set__get(this, 'Month');
          }
      }

      function getDaysInMonth () {
          return daysInMonth(this.year(), this.month());
      }

      var defaultMonthsShortRegex = matchWord;
      function monthsShortRegex (isStrict) {
          if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                  computeMonthsParse.call(this);
              }
              if (isStrict) {
                  return this._monthsShortStrictRegex;
              } else {
                  return this._monthsShortRegex;
              }
          } else {
              return this._monthsShortStrictRegex && isStrict ?
                  this._monthsShortStrictRegex : this._monthsShortRegex;
          }
      }

      var defaultMonthsRegex = matchWord;
      function monthsRegex (isStrict) {
          if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                  computeMonthsParse.call(this);
              }
              if (isStrict) {
                  return this._monthsStrictRegex;
              } else {
                  return this._monthsRegex;
              }
          } else {
              return this._monthsStrictRegex && isStrict ?
                  this._monthsStrictRegex : this._monthsRegex;
          }
      }

      function computeMonthsParse () {
          function cmpLenRev(a, b) {
              return b.length - a.length;
          }

          var shortPieces = [], longPieces = [], mixedPieces = [],
              i, mom;
          for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = create_utc__createUTC([2000, i]);
              shortPieces.push(this.monthsShort(mom, ''));
              longPieces.push(this.months(mom, ''));
              mixedPieces.push(this.months(mom, ''));
              mixedPieces.push(this.monthsShort(mom, ''));
          }
          // Sorting makes sure if one month (or abbr) is a prefix of another it
          // will match the longer piece.
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);
          for (i = 0; i < 12; i++) {
              shortPieces[i] = regexEscape(shortPieces[i]);
              longPieces[i] = regexEscape(longPieces[i]);
              mixedPieces[i] = regexEscape(mixedPieces[i]);
          }

          this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
          this._monthsShortRegex = this._monthsRegex;
          this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
          this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      }

      function checkOverflow (m) {
          var overflow;
          var a = m._a;

          if (a && getParsingFlags(m).overflow === -2) {
              overflow =
                  a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                  a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                  a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                  a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                  a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                  a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                  -1;

              if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                  overflow = DATE;
              }
              if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                  overflow = WEEK;
              }
              if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                  overflow = WEEKDAY;
              }

              getParsingFlags(m).overflow = overflow;
          }

          return m;
      }

      // iso 8601 regex
      // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
      var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;

      var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

      var isoDates = [
          ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
          ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
          ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
          ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
          ['YYYY-DDD', /\d{4}-\d{3}/],
          ['YYYY-MM', /\d{4}-\d\d/, false],
          ['YYYYYYMMDD', /[+-]\d{10}/],
          ['YYYYMMDD', /\d{8}/],
          // YYYYMM is NOT allowed by the standard
          ['GGGG[W]WWE', /\d{4}W\d{3}/],
          ['GGGG[W]WW', /\d{4}W\d{2}/, false],
          ['YYYYDDD', /\d{7}/]
      ];

      // iso time formats and regexes
      var isoTimes = [
          ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
          ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
          ['HH:mm:ss', /\d\d:\d\d:\d\d/],
          ['HH:mm', /\d\d:\d\d/],
          ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
          ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
          ['HHmmss', /\d\d\d\d\d\d/],
          ['HHmm', /\d\d\d\d/],
          ['HH', /\d\d/]
      ];

      var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

      // date from iso format
      function configFromISO(config) {
          var i, l,
              string = config._i,
              match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
              allowTime, dateFormat, timeFormat, tzFormat;

          if (match) {
              getParsingFlags(config).iso = true;

              for (i = 0, l = isoDates.length; i < l; i++) {
                  if (isoDates[i][1].exec(match[1])) {
                      dateFormat = isoDates[i][0];
                      allowTime = isoDates[i][2] !== false;
                      break;
                  }
              }
              if (dateFormat == null) {
                  config._isValid = false;
                  return;
              }
              if (match[3]) {
                  for (i = 0, l = isoTimes.length; i < l; i++) {
                      if (isoTimes[i][1].exec(match[3])) {
                          // match[2] should be 'T' or space
                          timeFormat = (match[2] || ' ') + isoTimes[i][0];
                          break;
                      }
                  }
                  if (timeFormat == null) {
                      config._isValid = false;
                      return;
                  }
              }
              if (!allowTime && timeFormat != null) {
                  config._isValid = false;
                  return;
              }
              if (match[4]) {
                  if (tzRegex.exec(match[4])) {
                      tzFormat = 'Z';
                  } else {
                      config._isValid = false;
                      return;
                  }
              }
              config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
              configFromStringAndFormat(config);
          } else {
              config._isValid = false;
          }
      }

      // date from iso format or fallback
      function configFromString(config) {
          var matched = aspNetJsonRegex.exec(config._i);

          if (matched !== null) {
              config._d = new Date(+matched[1]);
              return;
          }

          configFromISO(config);
          if (config._isValid === false) {
              delete config._isValid;
              utils_hooks__hooks.createFromInputFallback(config);
          }
      }

      utils_hooks__hooks.createFromInputFallback = deprecate(
          'moment construction falls back to js Date. This is ' +
          'discouraged and will be removed in upcoming major ' +
          'release. Please refer to ' +
          'https://github.com/moment/moment/issues/1407 for more info.',
          function (config) {
              config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
          }
      );

      function createDate (y, m, d, h, M, s, ms) {
          //can't just apply() to create a date:
          //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
          var date = new Date(y, m, d, h, M, s, ms);

          //the date constructor remaps years 0-99 to 1900-1999
          if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
              date.setFullYear(y);
          }
          return date;
      }

      function createUTCDate (y) {
          var date = new Date(Date.UTC.apply(null, arguments));

          //the Date.UTC function remaps years 0-99 to 1900-1999
          if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
              date.setUTCFullYear(y);
          }
          return date;
      }

      // FORMATTING

      addFormatToken('Y', 0, 0, function () {
          var y = this.year();
          return y <= 9999 ? '' + y : '+' + y;
      });

      addFormatToken(0, ['YY', 2], 0, function () {
          return this.year() % 100;
      });

      addFormatToken(0, ['YYYY',   4],       0, 'year');
      addFormatToken(0, ['YYYYY',  5],       0, 'year');
      addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

      // ALIASES

      addUnitAlias('year', 'y');

      // PARSING

      addRegexToken('Y',      matchSigned);
      addRegexToken('YY',     match1to2, match2);
      addRegexToken('YYYY',   match1to4, match4);
      addRegexToken('YYYYY',  match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);

      addParseToken(['YYYYY', 'YYYYYY'], YEAR);
      addParseToken('YYYY', function (input, array) {
          array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken('YY', function (input, array) {
          array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
      });
      addParseToken('Y', function (input, array) {
          array[YEAR] = parseInt(input, 10);
      });

      // HELPERS

      function daysInYear(year) {
          return isLeapYear(year) ? 366 : 365;
      }

      function isLeapYear(year) {
          return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
      }

      // HOOKS

      utils_hooks__hooks.parseTwoDigitYear = function (input) {
          return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
      };

      // MOMENTS

      var getSetYear = makeGetSet('FullYear', true);

      function getIsLeapYear () {
          return isLeapYear(this.year());
      }

      // start-of-first-week - start-of-year
      function firstWeekOffset(year, dow, doy) {
          var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
              fwd = 7 + dow - doy,
              // first-week day local weekday -- which local weekday is fwd
              fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

          return -fwdlw + fwd - 1;
      }

      //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
          var localWeekday = (7 + weekday - dow) % 7,
              weekOffset = firstWeekOffset(year, dow, doy),
              dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
              resYear, resDayOfYear;

          if (dayOfYear <= 0) {
              resYear = year - 1;
              resDayOfYear = daysInYear(resYear) + dayOfYear;
          } else if (dayOfYear > daysInYear(year)) {
              resYear = year + 1;
              resDayOfYear = dayOfYear - daysInYear(year);
          } else {
              resYear = year;
              resDayOfYear = dayOfYear;
          }

          return {
              year: resYear,
              dayOfYear: resDayOfYear
          };
      }

      function weekOfYear(mom, dow, doy) {
          var weekOffset = firstWeekOffset(mom.year(), dow, doy),
              week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
              resWeek, resYear;

          if (week < 1) {
              resYear = mom.year() - 1;
              resWeek = week + weeksInYear(resYear, dow, doy);
          } else if (week > weeksInYear(mom.year(), dow, doy)) {
              resWeek = week - weeksInYear(mom.year(), dow, doy);
              resYear = mom.year() + 1;
          } else {
              resYear = mom.year();
              resWeek = week;
          }

          return {
              week: resWeek,
              year: resYear
          };
      }

      function weeksInYear(year, dow, doy) {
          var weekOffset = firstWeekOffset(year, dow, doy),
              weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
          return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }

      // Pick the first defined of two or three arguments.
      function defaults(a, b, c) {
          if (a != null) {
              return a;
          }
          if (b != null) {
              return b;
          }
          return c;
      }

      function currentDateArray(config) {
          // hooks is actually the exported moment object
          var nowValue = new Date(utils_hooks__hooks.now());
          if (config._useUTC) {
              return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
          }
          return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }

      // convert an array to a date.
      // the array should mirror the parameters below
      // note: all values past the year are optional and will default to the lowest possible value.
      // [year, month, day , hour, minute, second, millisecond]
      function configFromArray (config) {
          var i, date, input = [], currentDate, yearToUse;

          if (config._d) {
              return;
          }

          currentDate = currentDateArray(config);

          //compute day of the year from weeks and weekdays
          if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
              dayOfYearFromWeekInfo(config);
          }

          //if the day of the year is set, figure out what it is
          if (config._dayOfYear) {
              yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

              if (config._dayOfYear > daysInYear(yearToUse)) {
                  getParsingFlags(config)._overflowDayOfYear = true;
              }

              date = createUTCDate(yearToUse, 0, config._dayOfYear);
              config._a[MONTH] = date.getUTCMonth();
              config._a[DATE] = date.getUTCDate();
          }

          // Default to current date.
          // * if no year, month, day of month are given, default to today
          // * if day of month is given, default month and year
          // * if month is given, default only year
          // * if year is given, don't default anything
          for (i = 0; i < 3 && config._a[i] == null; ++i) {
              config._a[i] = input[i] = currentDate[i];
          }

          // Zero out whatever was not defaulted, including time
          for (; i < 7; i++) {
              config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
          }

          // Check for 24:00:00.000
          if (config._a[HOUR] === 24 &&
                  config._a[MINUTE] === 0 &&
                  config._a[SECOND] === 0 &&
                  config._a[MILLISECOND] === 0) {
              config._nextDay = true;
              config._a[HOUR] = 0;
          }

          config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
          // Apply timezone offset from input. The actual utcOffset can be changed
          // with parseZone.
          if (config._tzm != null) {
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          }

          if (config._nextDay) {
              config._a[HOUR] = 24;
          }
      }

      function dayOfYearFromWeekInfo(config) {
          var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

          w = config._w;
          if (w.GG != null || w.W != null || w.E != null) {
              dow = 1;
              doy = 4;

              // TODO: We need to take the current isoWeekYear, but that depends on
              // how we interpret now (local, utc, fixed offset). So create
              // a now version of current config (take local/utc/offset flags, and
              // create now).
              weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
              week = defaults(w.W, 1);
              weekday = defaults(w.E, 1);
              if (weekday < 1 || weekday > 7) {
                  weekdayOverflow = true;
              }
          } else {
              dow = config._locale._week.dow;
              doy = config._locale._week.doy;

              weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
              week = defaults(w.w, 1);

              if (w.d != null) {
                  // weekday -- low day numbers are considered next week
                  weekday = w.d;
                  if (weekday < 0 || weekday > 6) {
                      weekdayOverflow = true;
                  }
              } else if (w.e != null) {
                  // local weekday -- counting starts from begining of week
                  weekday = w.e + dow;
                  if (w.e < 0 || w.e > 6) {
                      weekdayOverflow = true;
                  }
              } else {
                  // default to begining of week
                  weekday = dow;
              }
          }
          if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
              getParsingFlags(config)._overflowWeeks = true;
          } else if (weekdayOverflow != null) {
              getParsingFlags(config)._overflowWeekday = true;
          } else {
              temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
              config._a[YEAR] = temp.year;
              config._dayOfYear = temp.dayOfYear;
          }
      }

      // constant that refers to the ISO standard
      utils_hooks__hooks.ISO_8601 = function () {};

      // date from string and format string
      function configFromStringAndFormat(config) {
          // TODO: Move this to another part of the creation flow to prevent circular deps
          if (config._f === utils_hooks__hooks.ISO_8601) {
              configFromISO(config);
              return;
          }

          config._a = [];
          getParsingFlags(config).empty = true;

          // This array is used to make a Date, either with `new Date` or `Date.UTC`
          var string = '' + config._i,
              i, parsedInput, tokens, token, skipped,
              stringLength = string.length,
              totalParsedInputLength = 0;

          tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

          for (i = 0; i < tokens.length; i++) {
              token = tokens[i];
              parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
              // console.log('token', token, 'parsedInput', parsedInput,
              //         'regex', getParseRegexForToken(token, config));
              if (parsedInput) {
                  skipped = string.substr(0, string.indexOf(parsedInput));
                  if (skipped.length > 0) {
                      getParsingFlags(config).unusedInput.push(skipped);
                  }
                  string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                  totalParsedInputLength += parsedInput.length;
              }
              // don't parse if it's not a known token
              if (formatTokenFunctions[token]) {
                  if (parsedInput) {
                      getParsingFlags(config).empty = false;
                  }
                  else {
                      getParsingFlags(config).unusedTokens.push(token);
                  }
                  addTimeToArrayFromToken(token, parsedInput, config);
              }
              else if (config._strict && !parsedInput) {
                  getParsingFlags(config).unusedTokens.push(token);
              }
          }

          // add remaining unparsed input length to the string
          getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
          if (string.length > 0) {
              getParsingFlags(config).unusedInput.push(string);
          }

          // clear _12h flag if hour is <= 12
          if (getParsingFlags(config).bigHour === true &&
                  config._a[HOUR] <= 12 &&
                  config._a[HOUR] > 0) {
              getParsingFlags(config).bigHour = undefined;
          }

          getParsingFlags(config).parsedDateParts = config._a.slice(0);
          getParsingFlags(config).meridiem = config._meridiem;
          // handle meridiem
          config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

          configFromArray(config);
          checkOverflow(config);
      }


      function meridiemFixWrap (locale, hour, meridiem) {
          var isPm;

          if (meridiem == null) {
              // nothing to do
              return hour;
          }
          if (locale.meridiemHour != null) {
              return locale.meridiemHour(hour, meridiem);
          } else if (locale.isPM != null) {
              // Fallback
              isPm = locale.isPM(meridiem);
              if (isPm && hour < 12) {
                  hour += 12;
              }
              if (!isPm && hour === 12) {
                  hour = 0;
              }
              return hour;
          } else {
              // this is not supposed to happen
              return hour;
          }
      }

      // date from string and array of format strings
      function configFromStringAndArray(config) {
          var tempConfig,
              bestMoment,

              scoreToBeat,
              i,
              currentScore;

          if (config._f.length === 0) {
              getParsingFlags(config).invalidFormat = true;
              config._d = new Date(NaN);
              return;
          }

          for (i = 0; i < config._f.length; i++) {
              currentScore = 0;
              tempConfig = copyConfig({}, config);
              if (config._useUTC != null) {
                  tempConfig._useUTC = config._useUTC;
              }
              tempConfig._f = config._f[i];
              configFromStringAndFormat(tempConfig);

              if (!valid__isValid(tempConfig)) {
                  continue;
              }

              // if there is any input that was not parsed add a penalty for that format
              currentScore += getParsingFlags(tempConfig).charsLeftOver;

              //or tokens
              currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

              getParsingFlags(tempConfig).score = currentScore;

              if (scoreToBeat == null || currentScore < scoreToBeat) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;
              }
          }

          extend(config, bestMoment || tempConfig);
      }

      function configFromObject(config) {
          if (config._d) {
              return;
          }

          var i = normalizeObjectUnits(config._i);
          config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
              return obj && parseInt(obj, 10);
          });

          configFromArray(config);
      }

      function createFromConfig (config) {
          var res = new Moment(checkOverflow(prepareConfig(config)));
          if (res._nextDay) {
              // Adding is smart enough around DST
              res.add(1, 'd');
              res._nextDay = undefined;
          }

          return res;
      }

      function prepareConfig (config) {
          var input = config._i,
              format = config._f;

          config._locale = config._locale || locale_locales__getLocale(config._l);

          if (input === null || (format === undefined && input === '')) {
              return valid__createInvalid({nullInput: true});
          }

          if (typeof input === 'string') {
              config._i = input = config._locale.preparse(input);
          }

          if (isMoment(input)) {
              return new Moment(checkOverflow(input));
          } else if (isArray(format)) {
              configFromStringAndArray(config);
          } else if (format) {
              configFromStringAndFormat(config);
          } else if (isDate(input)) {
              config._d = input;
          } else {
              configFromInput(config);
          }

          if (!valid__isValid(config)) {
              config._d = null;
          }

          return config;
      }

      function configFromInput(config) {
          var input = config._i;
          if (input === undefined) {
              config._d = new Date(utils_hooks__hooks.now());
          } else if (isDate(input)) {
              config._d = new Date(input.valueOf());
          } else if (typeof input === 'string') {
              configFromString(config);
          } else if (isArray(input)) {
              config._a = map(input.slice(0), function (obj) {
                  return parseInt(obj, 10);
              });
              configFromArray(config);
          } else if (typeof(input) === 'object') {
              configFromObject(config);
          } else if (typeof(input) === 'number') {
              // from milliseconds
              config._d = new Date(input);
          } else {
              utils_hooks__hooks.createFromInputFallback(config);
          }
      }

      function createLocalOrUTC (input, format, locale, strict, isUTC) {
          var c = {};

          if (typeof(locale) === 'boolean') {
              strict = locale;
              locale = undefined;
          }
          // object construction must be done this way.
          // https://github.com/moment/moment/issues/1423
          c._isAMomentObject = true;
          c._useUTC = c._isUTC = isUTC;
          c._l = locale;
          c._i = input;
          c._f = format;
          c._strict = strict;

          return createFromConfig(c);
      }

      function local__createLocal (input, format, locale, strict) {
          return createLocalOrUTC(input, format, locale, strict, false);
      }

      var prototypeMin = deprecate(
           'moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
           function () {
               var other = local__createLocal.apply(null, arguments);
               if (this.isValid() && other.isValid()) {
                   return other < this ? this : other;
               } else {
                   return valid__createInvalid();
               }
           }
       );

      var prototypeMax = deprecate(
          'moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
          function () {
              var other = local__createLocal.apply(null, arguments);
              if (this.isValid() && other.isValid()) {
                  return other > this ? this : other;
              } else {
                  return valid__createInvalid();
              }
          }
      );

      // Pick a moment m from moments so that m[fn](other) is true for all
      // other. This relies on the function fn to be transitive.
      //
      // moments should either be an array of moment objects or an array, whose
      // first element is an array of moment objects.
      function pickBy(fn, moments) {
          var res, i;
          if (moments.length === 1 && isArray(moments[0])) {
              moments = moments[0];
          }
          if (!moments.length) {
              return local__createLocal();
          }
          res = moments[0];
          for (i = 1; i < moments.length; ++i) {
              if (!moments[i].isValid() || moments[i][fn](res)) {
                  res = moments[i];
              }
          }
          return res;
      }

      // TODO: Use [].sort instead?
      function min () {
          var args = [].slice.call(arguments, 0);

          return pickBy('isBefore', args);
      }

      function max () {
          var args = [].slice.call(arguments, 0);

          return pickBy('isAfter', args);
      }

      var now = function () {
          return Date.now ? Date.now() : +(new Date());
      };

      function Duration (duration) {
          var normalizedInput = normalizeObjectUnits(duration),
              years = normalizedInput.year || 0,
              quarters = normalizedInput.quarter || 0,
              months = normalizedInput.month || 0,
              weeks = normalizedInput.week || 0,
              days = normalizedInput.day || 0,
              hours = normalizedInput.hour || 0,
              minutes = normalizedInput.minute || 0,
              seconds = normalizedInput.second || 0,
              milliseconds = normalizedInput.millisecond || 0;

          // representation for dateAddRemove
          this._milliseconds = +milliseconds +
              seconds * 1e3 + // 1000
              minutes * 6e4 + // 1000 * 60
              hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
          // Because of dateAddRemove treats 24 hours as different from a
          // day when working around DST, we need to store them separately
          this._days = +days +
              weeks * 7;
          // It is impossible translate months into days without knowing
          // which months you are are talking about, so we have to store
          // it separately.
          this._months = +months +
              quarters * 3 +
              years * 12;

          this._data = {};

          this._locale = locale_locales__getLocale();

          this._bubble();
      }

      function isDuration (obj) {
          return obj instanceof Duration;
      }

      // FORMATTING

      function offset (token, separator) {
          addFormatToken(token, 0, 0, function () {
              var offset = this.utcOffset();
              var sign = '+';
              if (offset < 0) {
                  offset = -offset;
                  sign = '-';
              }
              return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
          });
      }

      offset('Z', ':');
      offset('ZZ', '');

      // PARSING

      addRegexToken('Z',  matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken(['Z', 'ZZ'], function (input, array, config) {
          config._useUTC = true;
          config._tzm = offsetFromString(matchShortOffset, input);
      });

      // HELPERS

      // timezone chunker
      // '+10:00' > ['10',  '00']
      // '-1530'  > ['-15', '30']
      var chunkOffset = /([\+\-]|\d\d)/gi;

      function offsetFromString(matcher, string) {
          var matches = ((string || '').match(matcher) || []);
          var chunk   = matches[matches.length - 1] || [];
          var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
          var minutes = +(parts[1] * 60) + toInt(parts[2]);

          return parts[0] === '+' ? minutes : -minutes;
      }

      // Return a moment from input, that is local/utc/zone equivalent to model.
      function cloneWithOffset(input, model) {
          var res, diff;
          if (model._isUTC) {
              res = model.clone();
              diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();
              // Use low-level api, because this fn is low-level api.
              res._d.setTime(res._d.valueOf() + diff);
              utils_hooks__hooks.updateOffset(res, false);
              return res;
          } else {
              return local__createLocal(input).local();
          }
      }

      function getDateOffset (m) {
          // On Firefox.24 Date#getTimezoneOffset returns a floating point.
          // https://github.com/moment/moment/pull/1871
          return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
      }

      // HOOKS

      // This function will be called whenever a moment is mutated.
      // It is intended to keep the offset in sync with the timezone.
      utils_hooks__hooks.updateOffset = function () {};

      // MOMENTS

      // keepLocalTime = true means only change the timezone, without
      // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
      // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
      // +0200, so we adjust the time as needed, to be valid.
      //
      // Keeping the time actually adds/subtracts (one hour)
      // from the actual represented time. That is why we call updateOffset
      // a second time. In case it wants us to change the offset again
      // _changeInProgress == true case, then we have to adjust, because
      // there is no such time in the given timezone.
      function getSetOffset (input, keepLocalTime) {
          var offset = this._offset || 0,
              localAdjust;
          if (!this.isValid()) {
              return input != null ? this : NaN;
          }
          if (input != null) {
              if (typeof input === 'string') {
                  input = offsetFromString(matchShortOffset, input);
              } else if (Math.abs(input) < 16) {
                  input = input * 60;
              }
              if (!this._isUTC && keepLocalTime) {
                  localAdjust = getDateOffset(this);
              }
              this._offset = input;
              this._isUTC = true;
              if (localAdjust != null) {
                  this.add(localAdjust, 'm');
              }
              if (offset !== input) {
                  if (!keepLocalTime || this._changeInProgress) {
                      add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                  } else if (!this._changeInProgress) {
                      this._changeInProgress = true;
                      utils_hooks__hooks.updateOffset(this, true);
                      this._changeInProgress = null;
                  }
              }
              return this;
          } else {
              return this._isUTC ? offset : getDateOffset(this);
          }
      }

      function getSetZone (input, keepLocalTime) {
          if (input != null) {
              if (typeof input !== 'string') {
                  input = -input;
              }

              this.utcOffset(input, keepLocalTime);

              return this;
          } else {
              return -this.utcOffset();
          }
      }

      function setOffsetToUTC (keepLocalTime) {
          return this.utcOffset(0, keepLocalTime);
      }

      function setOffsetToLocal (keepLocalTime) {
          if (this._isUTC) {
              this.utcOffset(0, keepLocalTime);
              this._isUTC = false;

              if (keepLocalTime) {
                  this.subtract(getDateOffset(this), 'm');
              }
          }
          return this;
      }

      function setOffsetToParsedOffset () {
          if (this._tzm) {
              this.utcOffset(this._tzm);
          } else if (typeof this._i === 'string') {
              this.utcOffset(offsetFromString(matchOffset, this._i));
          }
          return this;
      }

      function hasAlignedHourOffset (input) {
          if (!this.isValid()) {
              return false;
          }
          input = input ? local__createLocal(input).utcOffset() : 0;

          return (this.utcOffset() - input) % 60 === 0;
      }

      function isDaylightSavingTime () {
          return (
              this.utcOffset() > this.clone().month(0).utcOffset() ||
              this.utcOffset() > this.clone().month(5).utcOffset()
          );
      }

      function isDaylightSavingTimeShifted () {
          if (!isUndefined(this._isDSTShifted)) {
              return this._isDSTShifted;
          }

          var c = {};

          copyConfig(c, this);
          c = prepareConfig(c);

          if (c._a) {
              var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
              this._isDSTShifted = this.isValid() &&
                  compareArrays(c._a, other.toArray()) > 0;
          } else {
              this._isDSTShifted = false;
          }

          return this._isDSTShifted;
      }

      function isLocal () {
          return this.isValid() ? !this._isUTC : false;
      }

      function isUtcOffset () {
          return this.isValid() ? this._isUTC : false;
      }

      function isUtc () {
          return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }

      // ASP.NET json date format regex
      var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/;

      // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
      // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
      // and further modified to allow for strings containing both week and day
      var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

      function create__createDuration (input, key) {
          var duration = input,
              // matching against regexp is expensive, do it on demand
              match = null,
              sign,
              ret,
              diffRes;

          if (isDuration(input)) {
              duration = {
                  ms : input._milliseconds,
                  d  : input._days,
                  M  : input._months
              };
          } else if (typeof input === 'number') {
              duration = {};
              if (key) {
                  duration[key] = input;
              } else {
                  duration.milliseconds = input;
              }
          } else if (!!(match = aspNetRegex.exec(input))) {
              sign = (match[1] === '-') ? -1 : 1;
              duration = {
                  y  : 0,
                  d  : toInt(match[DATE])        * sign,
                  h  : toInt(match[HOUR])        * sign,
                  m  : toInt(match[MINUTE])      * sign,
                  s  : toInt(match[SECOND])      * sign,
                  ms : toInt(match[MILLISECOND]) * sign
              };
          } else if (!!(match = isoRegex.exec(input))) {
              sign = (match[1] === '-') ? -1 : 1;
              duration = {
                  y : parseIso(match[2], sign),
                  M : parseIso(match[3], sign),
                  w : parseIso(match[4], sign),
                  d : parseIso(match[5], sign),
                  h : parseIso(match[6], sign),
                  m : parseIso(match[7], sign),
                  s : parseIso(match[8], sign)
              };
          } else if (duration == null) {// checks for null or undefined
              duration = {};
          } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
              diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

              duration = {};
              duration.ms = diffRes.milliseconds;
              duration.M = diffRes.months;
          }

          ret = new Duration(duration);

          if (isDuration(input) && hasOwnProp(input, '_locale')) {
              ret._locale = input._locale;
          }

          return ret;
      }

      create__createDuration.fn = Duration.prototype;

      function parseIso (inp, sign) {
          // We'd normally use ~~inp for this, but unfortunately it also
          // converts floats to ints.
          // inp may be undefined, so careful calling replace on it.
          var res = inp && parseFloat(inp.replace(',', '.'));
          // apply sign while we're at it
          return (isNaN(res) ? 0 : res) * sign;
      }

      function positiveMomentsDifference(base, other) {
          var res = {milliseconds: 0, months: 0};

          res.months = other.month() - base.month() +
              (other.year() - base.year()) * 12;
          if (base.clone().add(res.months, 'M').isAfter(other)) {
              --res.months;
          }

          res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

          return res;
      }

      function momentsDifference(base, other) {
          var res;
          if (!(base.isValid() && other.isValid())) {
              return {milliseconds: 0, months: 0};
          }

          other = cloneWithOffset(other, base);
          if (base.isBefore(other)) {
              res = positiveMomentsDifference(base, other);
          } else {
              res = positiveMomentsDifference(other, base);
              res.milliseconds = -res.milliseconds;
              res.months = -res.months;
          }

          return res;
      }

      function absRound (number) {
          if (number < 0) {
              return Math.round(-1 * number) * -1;
          } else {
              return Math.round(number);
          }
      }

      // TODO: remove 'name' arg after deprecation is removed
      function createAdder(direction, name) {
          return function (val, period) {
              var dur, tmp;
              //invert the arguments, but complain about it
              if (period !== null && !isNaN(+period)) {
                  deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                  tmp = val; val = period; period = tmp;
              }

              val = typeof val === 'string' ? +val : val;
              dur = create__createDuration(val, period);
              add_subtract__addSubtract(this, dur, direction);
              return this;
          };
      }

      function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
          var milliseconds = duration._milliseconds,
              days = absRound(duration._days),
              months = absRound(duration._months);

          if (!mom.isValid()) {
              // No op
              return;
          }

          updateOffset = updateOffset == null ? true : updateOffset;

          if (milliseconds) {
              mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
          }
          if (days) {
              get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
          }
          if (months) {
              setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
          }
          if (updateOffset) {
              utils_hooks__hooks.updateOffset(mom, days || months);
          }
      }

      var add_subtract__add      = createAdder(1, 'add');
      var add_subtract__subtract = createAdder(-1, 'subtract');

      function moment_calendar__calendar (time, formats) {
          // We want to compare the start of today, vs this.
          // Getting start-of-today depends on whether we're local/utc/offset or not.
          var now = time || local__createLocal(),
              sod = cloneWithOffset(now, this).startOf('day'),
              diff = this.diff(sod, 'days', true),
              format = diff < -6 ? 'sameElse' :
                  diff < -1 ? 'lastWeek' :
                  diff < 0 ? 'lastDay' :
                  diff < 1 ? 'sameDay' :
                  diff < 2 ? 'nextDay' :
                  diff < 7 ? 'nextWeek' : 'sameElse';

          var output = formats && (isFunction(formats[format]) ? formats[format]() : formats[format]);

          return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
      }

      function clone () {
          return new Moment(this);
      }

      function isAfter (input, units) {
          var localInput = isMoment(input) ? input : local__createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
              return false;
          }
          units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
          if (units === 'millisecond') {
              return this.valueOf() > localInput.valueOf();
          } else {
              return localInput.valueOf() < this.clone().startOf(units).valueOf();
          }
      }

      function isBefore (input, units) {
          var localInput = isMoment(input) ? input : local__createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
              return false;
          }
          units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
          if (units === 'millisecond') {
              return this.valueOf() < localInput.valueOf();
          } else {
              return this.clone().endOf(units).valueOf() < localInput.valueOf();
          }
      }

      function isBetween (from, to, units, inclusivity) {
          inclusivity = inclusivity || '()';
          return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
              (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
      }

      function isSame (input, units) {
          var localInput = isMoment(input) ? input : local__createLocal(input),
              inputMs;
          if (!(this.isValid() && localInput.isValid())) {
              return false;
          }
          units = normalizeUnits(units || 'millisecond');
          if (units === 'millisecond') {
              return this.valueOf() === localInput.valueOf();
          } else {
              inputMs = localInput.valueOf();
              return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
          }
      }

      function isSameOrAfter (input, units) {
          return this.isSame(input, units) || this.isAfter(input,units);
      }

      function isSameOrBefore (input, units) {
          return this.isSame(input, units) || this.isBefore(input,units);
      }

      function diff (input, units, asFloat) {
          var that,
              zoneDelta,
              delta, output;

          if (!this.isValid()) {
              return NaN;
          }

          that = cloneWithOffset(input, this);

          if (!that.isValid()) {
              return NaN;
          }

          zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

          units = normalizeUnits(units);

          if (units === 'year' || units === 'month' || units === 'quarter') {
              output = monthDiff(this, that);
              if (units === 'quarter') {
                  output = output / 3;
              } else if (units === 'year') {
                  output = output / 12;
              }
          } else {
              delta = this - that;
              output = units === 'second' ? delta / 1e3 : // 1000
                  units === 'minute' ? delta / 6e4 : // 1000 * 60
                  units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                  units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                  units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                  delta;
          }
          return asFloat ? output : absFloor(output);
      }

      function monthDiff (a, b) {
          // difference in months
          var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
              // b is in (anchor - 1 month, anchor + 1 month)
              anchor = a.clone().add(wholeMonthDiff, 'months'),
              anchor2, adjust;

          if (b - anchor < 0) {
              anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
              // linear across the month
              adjust = (b - anchor) / (anchor - anchor2);
          } else {
              anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
              // linear across the month
              adjust = (b - anchor) / (anchor2 - anchor);
          }

          //check for negative zero, return zero if negative zero
          return -(wholeMonthDiff + adjust) || 0;
      }

      utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

      function toString () {
          return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
      }

      function moment_format__toISOString () {
          var m = this.clone().utc();
          if (0 < m.year() && m.year() <= 9999) {
              if (isFunction(Date.prototype.toISOString)) {
                  // native implementation is ~50x faster, use it when we can
                  return this.toDate().toISOString();
              } else {
                  return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
              }
          } else {
              return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
          }
      }

      function format (inputString) {
          if (!inputString) {
              inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;
          }
          var output = formatMoment(this, inputString);
          return this.localeData().postformat(output);
      }

      function from (time, withoutSuffix) {
          if (this.isValid() &&
                  ((isMoment(time) && time.isValid()) ||
                   local__createLocal(time).isValid())) {
              return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
          } else {
              return this.localeData().invalidDate();
          }
      }

      function fromNow (withoutSuffix) {
          return this.from(local__createLocal(), withoutSuffix);
      }

      function to (time, withoutSuffix) {
          if (this.isValid() &&
                  ((isMoment(time) && time.isValid()) ||
                   local__createLocal(time).isValid())) {
              return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
          } else {
              return this.localeData().invalidDate();
          }
      }

      function toNow (withoutSuffix) {
          return this.to(local__createLocal(), withoutSuffix);
      }

      // If passed a locale key, it will set the locale for this
      // instance.  Otherwise, it will return the locale configuration
      // variables for this instance.
      function locale (key) {
          var newLocaleData;

          if (key === undefined) {
              return this._locale._abbr;
          } else {
              newLocaleData = locale_locales__getLocale(key);
              if (newLocaleData != null) {
                  this._locale = newLocaleData;
              }
              return this;
          }
      }

      var lang = deprecate(
          'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
          function (key) {
              if (key === undefined) {
                  return this.localeData();
              } else {
                  return this.locale(key);
              }
          }
      );

      function localeData () {
          return this._locale;
      }

      function startOf (units) {
          units = normalizeUnits(units);
          // the following switch intentionally omits break keywords
          // to utilize falling through the cases.
          switch (units) {
          case 'year':
              this.month(0);
              /* falls through */
          case 'quarter':
          case 'month':
              this.date(1);
              /* falls through */
          case 'week':
          case 'isoWeek':
          case 'day':
          case 'date':
              this.hours(0);
              /* falls through */
          case 'hour':
              this.minutes(0);
              /* falls through */
          case 'minute':
              this.seconds(0);
              /* falls through */
          case 'second':
              this.milliseconds(0);
          }

          // weeks are a special case
          if (units === 'week') {
              this.weekday(0);
          }
          if (units === 'isoWeek') {
              this.isoWeekday(1);
          }

          // quarters are also special
          if (units === 'quarter') {
              this.month(Math.floor(this.month() / 3) * 3);
          }

          return this;
      }

      function endOf (units) {
          units = normalizeUnits(units);
          if (units === undefined || units === 'millisecond') {
              return this;
          }

          // 'date' is an alias for 'day', so it should be considered as such.
          if (units === 'date') {
              units = 'day';
          }

          return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
      }

      function to_type__valueOf () {
          return this._d.valueOf() - ((this._offset || 0) * 60000);
      }

      function unix () {
          return Math.floor(this.valueOf() / 1000);
      }

      function toDate () {
          return this._offset ? new Date(this.valueOf()) : this._d;
      }

      function toArray () {
          var m = this;
          return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
      }

      function toObject () {
          var m = this;
          return {
              years: m.year(),
              months: m.month(),
              date: m.date(),
              hours: m.hours(),
              minutes: m.minutes(),
              seconds: m.seconds(),
              milliseconds: m.milliseconds()
          };
      }

      function toJSON () {
          // new Date(NaN).toJSON() === null
          return this.isValid() ? this.toISOString() : null;
      }

      function moment_valid__isValid () {
          return valid__isValid(this);
      }

      function parsingFlags () {
          return extend({}, getParsingFlags(this));
      }

      function invalidAt () {
          return getParsingFlags(this).overflow;
      }

      function creationData() {
          return {
              input: this._i,
              format: this._f,
              locale: this._locale,
              isUTC: this._isUTC,
              strict: this._strict
          };
      }

      // FORMATTING

      addFormatToken(0, ['gg', 2], 0, function () {
          return this.weekYear() % 100;
      });

      addFormatToken(0, ['GG', 2], 0, function () {
          return this.isoWeekYear() % 100;
      });

      function addWeekYearFormatToken (token, getter) {
          addFormatToken(0, [token, token.length], 0, getter);
      }

      addWeekYearFormatToken('gggg',     'weekYear');
      addWeekYearFormatToken('ggggg',    'weekYear');
      addWeekYearFormatToken('GGGG',  'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear');

      // ALIASES

      addUnitAlias('weekYear', 'gg');
      addUnitAlias('isoWeekYear', 'GG');

      // PARSING

      addRegexToken('G',      matchSigned);
      addRegexToken('g',      matchSigned);
      addRegexToken('GG',     match1to2, match2);
      addRegexToken('gg',     match1to2, match2);
      addRegexToken('GGGG',   match1to4, match4);
      addRegexToken('gggg',   match1to4, match4);
      addRegexToken('GGGGG',  match1to6, match6);
      addRegexToken('ggggg',  match1to6, match6);

      addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
          week[token.substr(0, 2)] = toInt(input);
      });

      addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
          week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
      });

      // MOMENTS

      function getSetWeekYear (input) {
          return getSetWeekYearHelper.call(this,
                  input,
                  this.week(),
                  this.weekday(),
                  this.localeData()._week.dow,
                  this.localeData()._week.doy);
      }

      function getSetISOWeekYear (input) {
          return getSetWeekYearHelper.call(this,
                  input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }

      function getISOWeeksInYear () {
          return weeksInYear(this.year(), 1, 4);
      }

      function getWeeksInYear () {
          var weekInfo = this.localeData()._week;
          return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }

      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
          var weeksTarget;
          if (input == null) {
              return weekOfYear(this, dow, doy).year;
          } else {
              weeksTarget = weeksInYear(input, dow, doy);
              if (week > weeksTarget) {
                  week = weeksTarget;
              }
              return setWeekAll.call(this, input, week, weekday, dow, doy);
          }
      }

      function setWeekAll(weekYear, week, weekday, dow, doy) {
          var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
              date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

          this.year(date.getUTCFullYear());
          this.month(date.getUTCMonth());
          this.date(date.getUTCDate());
          return this;
      }

      // FORMATTING

      addFormatToken('Q', 0, 'Qo', 'quarter');

      // ALIASES

      addUnitAlias('quarter', 'Q');

      // PARSING

      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
          array[MONTH] = (toInt(input) - 1) * 3;
      });

      // MOMENTS

      function getSetQuarter (input) {
          return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }

      // FORMATTING

      addFormatToken('w', ['ww', 2], 'wo', 'week');
      addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

      // ALIASES

      addUnitAlias('week', 'w');
      addUnitAlias('isoWeek', 'W');

      // PARSING

      addRegexToken('w',  match1to2);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W',  match1to2);
      addRegexToken('WW', match1to2, match2);

      addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
          week[token.substr(0, 1)] = toInt(input);
      });

      // HELPERS

      // LOCALES

      function localeWeek (mom) {
          return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }

      var defaultLocaleWeek = {
          dow : 0, // Sunday is the first day of the week.
          doy : 6  // The week that contains Jan 1st is the first week of the year.
      };

      function localeFirstDayOfWeek () {
          return this._week.dow;
      }

      function localeFirstDayOfYear () {
          return this._week.doy;
      }

      // MOMENTS

      function getSetWeek (input) {
          var week = this.localeData().week(this);
          return input == null ? week : this.add((input - week) * 7, 'd');
      }

      function getSetISOWeek (input) {
          var week = weekOfYear(this, 1, 4).week;
          return input == null ? week : this.add((input - week) * 7, 'd');
      }

      // FORMATTING

      addFormatToken('D', ['DD', 2], 'Do', 'date');

      // ALIASES

      addUnitAlias('date', 'D');

      // PARSING

      addRegexToken('D',  match1to2);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale) {
          return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
      });

      addParseToken(['D', 'DD'], DATE);
      addParseToken('Do', function (input, array) {
          array[DATE] = toInt(input.match(match1to2)[0], 10);
      });

      // MOMENTS

      var getSetDayOfMonth = makeGetSet('Date', true);

      // FORMATTING

      addFormatToken('d', 0, 'do', 'day');

      addFormatToken('dd', 0, 0, function (format) {
          return this.localeData().weekdaysMin(this, format);
      });

      addFormatToken('ddd', 0, 0, function (format) {
          return this.localeData().weekdaysShort(this, format);
      });

      addFormatToken('dddd', 0, 0, function (format) {
          return this.localeData().weekdays(this, format);
      });

      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday');

      // ALIASES

      addUnitAlias('day', 'd');
      addUnitAlias('weekday', 'e');
      addUnitAlias('isoWeekday', 'E');

      // PARSING

      addRegexToken('d',    match1to2);
      addRegexToken('e',    match1to2);
      addRegexToken('E',    match1to2);
      addRegexToken('dd',   function (isStrict, locale) {
          return locale.weekdaysMinRegex(isStrict);
      });
      addRegexToken('ddd',   function (isStrict, locale) {
          return locale.weekdaysShortRegex(isStrict);
      });
      addRegexToken('dddd',   function (isStrict, locale) {
          return locale.weekdaysRegex(isStrict);
      });

      addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
          var weekday = config._locale.weekdaysParse(input, token, config._strict);
          // if we didn't get a weekday name, mark the date as invalid
          if (weekday != null) {
              week.d = weekday;
          } else {
              getParsingFlags(config).invalidWeekday = input;
          }
      });

      addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
          week[token] = toInt(input);
      });

      // HELPERS

      function parseWeekday(input, locale) {
          if (typeof input !== 'string') {
              return input;
          }

          if (!isNaN(input)) {
              return parseInt(input, 10);
          }

          input = locale.weekdaysParse(input);
          if (typeof input === 'number') {
              return input;
          }

          return null;
      }

      // LOCALES

      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
      function localeWeekdays (m, format) {
          return isArray(this._weekdays) ? this._weekdays[m.day()] :
              this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
      }

      var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
      function localeWeekdaysShort (m) {
          return this._weekdaysShort[m.day()];
      }

      var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
      function localeWeekdaysMin (m) {
          return this._weekdaysMin[m.day()];
      }

      function day_of_week__handleStrictParse(weekdayName, format, strict) {
          var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
          if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._minWeekdaysParse = [];

              for (i = 0; i < 7; ++i) {
                  mom = create_utc__createUTC([2000, 1]).day(i);
                  this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                  this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                  this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
              }
          }

          if (strict) {
              if (format === 'dddd') {
                  ii = indexOf.call(this._weekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              } else {
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              }
          } else {
              if (format === 'dddd') {
                  ii = indexOf.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              } else {
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              }
          }
      }

      function localeWeekdaysParse (weekdayName, format, strict) {
          var i, mom, regex;

          if (this._weekdaysParseExact) {
              return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);
          }

          if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._minWeekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._fullWeekdaysParse = [];
          }

          for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already

              mom = create_utc__createUTC([2000, 1]).day(i);
              if (strict && !this._fullWeekdaysParse[i]) {
                  this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                  this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                  this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
              }
              if (!this._weekdaysParse[i]) {
                  regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                  this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
              }
              // test the regex
              if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                  return i;
              } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                  return i;
              } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                  return i;
              } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                  return i;
              }
          }
      }

      // MOMENTS

      function getSetDayOfWeek (input) {
          if (!this.isValid()) {
              return input != null ? this : NaN;
          }
          var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
          if (input != null) {
              input = parseWeekday(input, this.localeData());
              return this.add(input - day, 'd');
          } else {
              return day;
          }
      }

      function getSetLocaleDayOfWeek (input) {
          if (!this.isValid()) {
              return input != null ? this : NaN;
          }
          var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
          return input == null ? weekday : this.add(input - weekday, 'd');
      }

      function getSetISODayOfWeek (input) {
          if (!this.isValid()) {
              return input != null ? this : NaN;
          }
          // behaves the same as moment#day except
          // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
          // as a setter, sunday should belong to the previous week.
          return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
      }

      var defaultWeekdaysRegex = matchWord;
      function weekdaysRegex (isStrict) {
          if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                  computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                  return this._weekdaysStrictRegex;
              } else {
                  return this._weekdaysRegex;
              }
          } else {
              return this._weekdaysStrictRegex && isStrict ?
                  this._weekdaysStrictRegex : this._weekdaysRegex;
          }
      }

      var defaultWeekdaysShortRegex = matchWord;
      function weekdaysShortRegex (isStrict) {
          if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                  computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                  return this._weekdaysShortStrictRegex;
              } else {
                  return this._weekdaysShortRegex;
              }
          } else {
              return this._weekdaysShortStrictRegex && isStrict ?
                  this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
          }
      }

      var defaultWeekdaysMinRegex = matchWord;
      function weekdaysMinRegex (isStrict) {
          if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                  computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                  return this._weekdaysMinStrictRegex;
              } else {
                  return this._weekdaysMinRegex;
              }
          } else {
              return this._weekdaysMinStrictRegex && isStrict ?
                  this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
          }
      }


      function computeWeekdaysParse () {
          function cmpLenRev(a, b) {
              return b.length - a.length;
          }

          var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
              i, mom, minp, shortp, longp;
          for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already
              mom = create_utc__createUTC([2000, 1]).day(i);
              minp = this.weekdaysMin(mom, '');
              shortp = this.weekdaysShort(mom, '');
              longp = this.weekdays(mom, '');
              minPieces.push(minp);
              shortPieces.push(shortp);
              longPieces.push(longp);
              mixedPieces.push(minp);
              mixedPieces.push(shortp);
              mixedPieces.push(longp);
          }
          // Sorting makes sure if one weekday (or abbr) is a prefix of another it
          // will match the longer piece.
          minPieces.sort(cmpLenRev);
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);
          for (i = 0; i < 7; i++) {
              shortPieces[i] = regexEscape(shortPieces[i]);
              longPieces[i] = regexEscape(longPieces[i]);
              mixedPieces[i] = regexEscape(mixedPieces[i]);
          }

          this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
          this._weekdaysShortRegex = this._weekdaysRegex;
          this._weekdaysMinRegex = this._weekdaysRegex;

          this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
          this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
          this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
      }

      // FORMATTING

      addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

      // ALIASES

      addUnitAlias('dayOfYear', 'DDD');

      // PARSING

      addRegexToken('DDD',  match1to3);
      addRegexToken('DDDD', match3);
      addParseToken(['DDD', 'DDDD'], function (input, array, config) {
          config._dayOfYear = toInt(input);
      });

      // HELPERS

      // MOMENTS

      function getSetDayOfYear (input) {
          var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
          return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
      }

      // FORMATTING

      function hFormat() {
          return this.hours() % 12 || 12;
      }

      function kFormat() {
          return this.hours() || 24;
      }

      addFormatToken('H', ['HH', 2], 0, 'hour');
      addFormatToken('h', ['hh', 2], 0, hFormat);
      addFormatToken('k', ['kk', 2], 0, kFormat);

      addFormatToken('hmm', 0, 0, function () {
          return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });

      addFormatToken('hmmss', 0, 0, function () {
          return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
              zeroFill(this.seconds(), 2);
      });

      addFormatToken('Hmm', 0, 0, function () {
          return '' + this.hours() + zeroFill(this.minutes(), 2);
      });

      addFormatToken('Hmmss', 0, 0, function () {
          return '' + this.hours() + zeroFill(this.minutes(), 2) +
              zeroFill(this.seconds(), 2);
      });

      function meridiem (token, lowercase) {
          addFormatToken(token, 0, 0, function () {
              return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
          });
      }

      meridiem('a', true);
      meridiem('A', false);

      // ALIASES

      addUnitAlias('hour', 'h');

      // PARSING

      function matchMeridiem (isStrict, locale) {
          return locale._meridiemParse;
      }

      addRegexToken('a',  matchMeridiem);
      addRegexToken('A',  matchMeridiem);
      addRegexToken('H',  match1to2);
      addRegexToken('h',  match1to2);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);

      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);

      addParseToken(['H', 'HH'], HOUR);
      addParseToken(['a', 'A'], function (input, array, config) {
          config._isPm = config._locale.isPM(input);
          config._meridiem = input;
      });
      addParseToken(['h', 'hh'], function (input, array, config) {
          array[HOUR] = toInt(input);
          getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmm', function (input, array, config) {
          var pos = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos));
          array[MINUTE] = toInt(input.substr(pos));
          getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmmss', function (input, array, config) {
          var pos1 = input.length - 4;
          var pos2 = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos1));
          array[MINUTE] = toInt(input.substr(pos1, 2));
          array[SECOND] = toInt(input.substr(pos2));
          getParsingFlags(config).bigHour = true;
      });
      addParseToken('Hmm', function (input, array, config) {
          var pos = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos));
          array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken('Hmmss', function (input, array, config) {
          var pos1 = input.length - 4;
          var pos2 = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos1));
          array[MINUTE] = toInt(input.substr(pos1, 2));
          array[SECOND] = toInt(input.substr(pos2));
      });

      // LOCALES

      function localeIsPM (input) {
          // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
          // Using charAt should be more compatible.
          return ((input + '').toLowerCase().charAt(0) === 'p');
      }

      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
      function localeMeridiem (hours, minutes, isLower) {
          if (hours > 11) {
              return isLower ? 'pm' : 'PM';
          } else {
              return isLower ? 'am' : 'AM';
          }
      }


      // MOMENTS

      // Setting the hour should keep the time, because the user explicitly
      // specified which hour he wants. So trying to maintain the same hour (in
      // a new timezone) makes sense. Adding/subtracting hours does not follow
      // this rule.
      var getSetHour = makeGetSet('Hours', true);

      // FORMATTING

      addFormatToken('m', ['mm', 2], 0, 'minute');

      // ALIASES

      addUnitAlias('minute', 'm');

      // PARSING

      addRegexToken('m',  match1to2);
      addRegexToken('mm', match1to2, match2);
      addParseToken(['m', 'mm'], MINUTE);

      // MOMENTS

      var getSetMinute = makeGetSet('Minutes', false);

      // FORMATTING

      addFormatToken('s', ['ss', 2], 0, 'second');

      // ALIASES

      addUnitAlias('second', 's');

      // PARSING

      addRegexToken('s',  match1to2);
      addRegexToken('ss', match1to2, match2);
      addParseToken(['s', 'ss'], SECOND);

      // MOMENTS

      var getSetSecond = makeGetSet('Seconds', false);

      // FORMATTING

      addFormatToken('S', 0, 0, function () {
          return ~~(this.millisecond() / 100);
      });

      addFormatToken(0, ['SS', 2], 0, function () {
          return ~~(this.millisecond() / 10);
      });

      addFormatToken(0, ['SSS', 3], 0, 'millisecond');
      addFormatToken(0, ['SSSS', 4], 0, function () {
          return this.millisecond() * 10;
      });
      addFormatToken(0, ['SSSSS', 5], 0, function () {
          return this.millisecond() * 100;
      });
      addFormatToken(0, ['SSSSSS', 6], 0, function () {
          return this.millisecond() * 1000;
      });
      addFormatToken(0, ['SSSSSSS', 7], 0, function () {
          return this.millisecond() * 10000;
      });
      addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
          return this.millisecond() * 100000;
      });
      addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
          return this.millisecond() * 1000000;
      });


      // ALIASES

      addUnitAlias('millisecond', 'ms');

      // PARSING

      addRegexToken('S',    match1to3, match1);
      addRegexToken('SS',   match1to3, match2);
      addRegexToken('SSS',  match1to3, match3);

      var token;
      for (token = 'SSSS'; token.length <= 9; token += 'S') {
          addRegexToken(token, matchUnsigned);
      }

      function parseMs(input, array) {
          array[MILLISECOND] = toInt(('0.' + input) * 1000);
      }

      for (token = 'S'; token.length <= 9; token += 'S') {
          addParseToken(token, parseMs);
      }
      // MOMENTS

      var getSetMillisecond = makeGetSet('Milliseconds', false);

      // FORMATTING

      addFormatToken('z',  0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName');

      // MOMENTS

      function getZoneAbbr () {
          return this._isUTC ? 'UTC' : '';
      }

      function getZoneName () {
          return this._isUTC ? 'Coordinated Universal Time' : '';
      }

      var momentPrototype__proto = Moment.prototype;

      momentPrototype__proto.add               = add_subtract__add;
      momentPrototype__proto.calendar          = moment_calendar__calendar;
      momentPrototype__proto.clone             = clone;
      momentPrototype__proto.diff              = diff;
      momentPrototype__proto.endOf             = endOf;
      momentPrototype__proto.format            = format;
      momentPrototype__proto.from              = from;
      momentPrototype__proto.fromNow           = fromNow;
      momentPrototype__proto.to                = to;
      momentPrototype__proto.toNow             = toNow;
      momentPrototype__proto.get               = getSet;
      momentPrototype__proto.invalidAt         = invalidAt;
      momentPrototype__proto.isAfter           = isAfter;
      momentPrototype__proto.isBefore          = isBefore;
      momentPrototype__proto.isBetween         = isBetween;
      momentPrototype__proto.isSame            = isSame;
      momentPrototype__proto.isSameOrAfter     = isSameOrAfter;
      momentPrototype__proto.isSameOrBefore    = isSameOrBefore;
      momentPrototype__proto.isValid           = moment_valid__isValid;
      momentPrototype__proto.lang              = lang;
      momentPrototype__proto.locale            = locale;
      momentPrototype__proto.localeData        = localeData;
      momentPrototype__proto.max               = prototypeMax;
      momentPrototype__proto.min               = prototypeMin;
      momentPrototype__proto.parsingFlags      = parsingFlags;
      momentPrototype__proto.set               = getSet;
      momentPrototype__proto.startOf           = startOf;
      momentPrototype__proto.subtract          = add_subtract__subtract;
      momentPrototype__proto.toArray           = toArray;
      momentPrototype__proto.toObject          = toObject;
      momentPrototype__proto.toDate            = toDate;
      momentPrototype__proto.toISOString       = moment_format__toISOString;
      momentPrototype__proto.toJSON            = toJSON;
      momentPrototype__proto.toString          = toString;
      momentPrototype__proto.unix              = unix;
      momentPrototype__proto.valueOf           = to_type__valueOf;
      momentPrototype__proto.creationData      = creationData;

      // Year
      momentPrototype__proto.year       = getSetYear;
      momentPrototype__proto.isLeapYear = getIsLeapYear;

      // Week Year
      momentPrototype__proto.weekYear    = getSetWeekYear;
      momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

      // Quarter
      momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

      // Month
      momentPrototype__proto.month       = getSetMonth;
      momentPrototype__proto.daysInMonth = getDaysInMonth;

      // Week
      momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
      momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
      momentPrototype__proto.weeksInYear    = getWeeksInYear;
      momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

      // Day
      momentPrototype__proto.date       = getSetDayOfMonth;
      momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
      momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
      momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
      momentPrototype__proto.dayOfYear  = getSetDayOfYear;

      // Hour
      momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

      // Minute
      momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

      // Second
      momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

      // Millisecond
      momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

      // Offset
      momentPrototype__proto.utcOffset            = getSetOffset;
      momentPrototype__proto.utc                  = setOffsetToUTC;
      momentPrototype__proto.local                = setOffsetToLocal;
      momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
      momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
      momentPrototype__proto.isDST                = isDaylightSavingTime;
      momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
      momentPrototype__proto.isLocal              = isLocal;
      momentPrototype__proto.isUtcOffset          = isUtcOffset;
      momentPrototype__proto.isUtc                = isUtc;
      momentPrototype__proto.isUTC                = isUtc;

      // Timezone
      momentPrototype__proto.zoneAbbr = getZoneAbbr;
      momentPrototype__proto.zoneName = getZoneName;

      // Deprecations
      momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
      momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
      momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
      momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

      var momentPrototype = momentPrototype__proto;

      function moment__createUnix (input) {
          return local__createLocal(input * 1000);
      }

      function moment__createInZone () {
          return local__createLocal.apply(null, arguments).parseZone();
      }

      var defaultCalendar = {
          sameDay : '[Today at] LT',
          nextDay : '[Tomorrow at] LT',
          nextWeek : 'dddd [at] LT',
          lastDay : '[Yesterday at] LT',
          lastWeek : '[Last] dddd [at] LT',
          sameElse : 'L'
      };

      function locale_calendar__calendar (key, mom, now) {
          var output = this._calendar[key];
          return isFunction(output) ? output.call(mom, now) : output;
      }

      var defaultLongDateFormat = {
          LTS  : 'h:mm:ss A',
          LT   : 'h:mm A',
          L    : 'MM/DD/YYYY',
          LL   : 'MMMM D, YYYY',
          LLL  : 'MMMM D, YYYY h:mm A',
          LLLL : 'dddd, MMMM D, YYYY h:mm A'
      };

      function longDateFormat (key) {
          var format = this._longDateFormat[key],
              formatUpper = this._longDateFormat[key.toUpperCase()];

          if (format || !formatUpper) {
              return format;
          }

          this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
              return val.slice(1);
          });

          return this._longDateFormat[key];
      }

      var defaultInvalidDate = 'Invalid date';

      function invalidDate () {
          return this._invalidDate;
      }

      var defaultOrdinal = '%d';
      var defaultOrdinalParse = /\d{1,2}/;

      function ordinal (number) {
          return this._ordinal.replace('%d', number);
      }

      function preParsePostFormat (string) {
          return string;
      }

      var defaultRelativeTime = {
          future : 'in %s',
          past   : '%s ago',
          s  : 'a few seconds',
          m  : 'a minute',
          mm : '%d minutes',
          h  : 'an hour',
          hh : '%d hours',
          d  : 'a day',
          dd : '%d days',
          M  : 'a month',
          MM : '%d months',
          y  : 'a year',
          yy : '%d years'
      };

      function relative__relativeTime (number, withoutSuffix, string, isFuture) {
          var output = this._relativeTime[string];
          return (isFunction(output)) ?
              output(number, withoutSuffix, string, isFuture) :
              output.replace(/%d/i, number);
      }

      function pastFuture (diff, output) {
          var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
          return isFunction(format) ? format(output) : format.replace(/%s/i, output);
      }

      var prototype__proto = Locale.prototype;

      prototype__proto._calendar       = defaultCalendar;
      prototype__proto.calendar        = locale_calendar__calendar;
      prototype__proto._longDateFormat = defaultLongDateFormat;
      prototype__proto.longDateFormat  = longDateFormat;
      prototype__proto._invalidDate    = defaultInvalidDate;
      prototype__proto.invalidDate     = invalidDate;
      prototype__proto._ordinal        = defaultOrdinal;
      prototype__proto.ordinal         = ordinal;
      prototype__proto._ordinalParse   = defaultOrdinalParse;
      prototype__proto.preparse        = preParsePostFormat;
      prototype__proto.postformat      = preParsePostFormat;
      prototype__proto._relativeTime   = defaultRelativeTime;
      prototype__proto.relativeTime    = relative__relativeTime;
      prototype__proto.pastFuture      = pastFuture;
      prototype__proto.set             = locale_set__set;

      // Month
      prototype__proto.months            =        localeMonths;
      prototype__proto._months           = defaultLocaleMonths;
      prototype__proto.monthsShort       =        localeMonthsShort;
      prototype__proto._monthsShort      = defaultLocaleMonthsShort;
      prototype__proto.monthsParse       =        localeMonthsParse;
      prototype__proto._monthsRegex      = defaultMonthsRegex;
      prototype__proto.monthsRegex       = monthsRegex;
      prototype__proto._monthsShortRegex = defaultMonthsShortRegex;
      prototype__proto.monthsShortRegex  = monthsShortRegex;

      // Week
      prototype__proto.week = localeWeek;
      prototype__proto._week = defaultLocaleWeek;
      prototype__proto.firstDayOfYear = localeFirstDayOfYear;
      prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

      // Day of Week
      prototype__proto.weekdays       =        localeWeekdays;
      prototype__proto._weekdays      = defaultLocaleWeekdays;
      prototype__proto.weekdaysMin    =        localeWeekdaysMin;
      prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
      prototype__proto.weekdaysShort  =        localeWeekdaysShort;
      prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
      prototype__proto.weekdaysParse  =        localeWeekdaysParse;

      prototype__proto._weekdaysRegex      = defaultWeekdaysRegex;
      prototype__proto.weekdaysRegex       =        weekdaysRegex;
      prototype__proto._weekdaysShortRegex = defaultWeekdaysShortRegex;
      prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;
      prototype__proto._weekdaysMinRegex   = defaultWeekdaysMinRegex;
      prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;

      // Hours
      prototype__proto.isPM = localeIsPM;
      prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
      prototype__proto.meridiem = localeMeridiem;

      function lists__get (format, index, field, setter) {
          var locale = locale_locales__getLocale();
          var utc = create_utc__createUTC().set(setter, index);
          return locale[field](utc, format);
      }

      function listMonthsImpl (format, index, field) {
          if (typeof format === 'number') {
              index = format;
              format = undefined;
          }

          format = format || '';

          if (index != null) {
              return lists__get(format, index, field, 'month');
          }

          var i;
          var out = [];
          for (i = 0; i < 12; i++) {
              out[i] = lists__get(format, i, field, 'month');
          }
          return out;
      }

      // ()
      // (5)
      // (fmt, 5)
      // (fmt)
      // (true)
      // (true, 5)
      // (true, fmt, 5)
      // (true, fmt)
      function listWeekdaysImpl (localeSorted, format, index, field) {
          if (typeof localeSorted === 'boolean') {
              if (typeof format === 'number') {
                  index = format;
                  format = undefined;
              }

              format = format || '';
          } else {
              format = localeSorted;
              index = format;
              localeSorted = false;

              if (typeof format === 'number') {
                  index = format;
                  format = undefined;
              }

              format = format || '';
          }

          var locale = locale_locales__getLocale(),
              shift = localeSorted ? locale._week.dow : 0;

          if (index != null) {
              return lists__get(format, (index + shift) % 7, field, 'day');
          }

          var i;
          var out = [];
          for (i = 0; i < 7; i++) {
              out[i] = lists__get(format, (i + shift) % 7, field, 'day');
          }
          return out;
      }

      function lists__listMonths (format, index) {
          return listMonthsImpl(format, index, 'months');
      }

      function lists__listMonthsShort (format, index) {
          return listMonthsImpl(format, index, 'monthsShort');
      }

      function lists__listWeekdays (localeSorted, format, index) {
          return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
      }

      function lists__listWeekdaysShort (localeSorted, format, index) {
          return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
      }

      function lists__listWeekdaysMin (localeSorted, format, index) {
          return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
      }

      locale_locales__getSetGlobalLocale('en', {
          ordinalParse: /\d{1,2}(th|st|nd|rd)/,
          ordinal : function (number) {
              var b = number % 10,
                  output = (toInt(number % 100 / 10) === 1) ? 'th' :
                  (b === 1) ? 'st' :
                  (b === 2) ? 'nd' :
                  (b === 3) ? 'rd' : 'th';
              return number + output;
          }
      });

      // Side effect imports
      utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
      utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

      var mathAbs = Math.abs;

      function duration_abs__abs () {
          var data           = this._data;

          this._milliseconds = mathAbs(this._milliseconds);
          this._days         = mathAbs(this._days);
          this._months       = mathAbs(this._months);

          data.milliseconds  = mathAbs(data.milliseconds);
          data.seconds       = mathAbs(data.seconds);
          data.minutes       = mathAbs(data.minutes);
          data.hours         = mathAbs(data.hours);
          data.months        = mathAbs(data.months);
          data.years         = mathAbs(data.years);

          return this;
      }

      function duration_add_subtract__addSubtract (duration, input, value, direction) {
          var other = create__createDuration(input, value);

          duration._milliseconds += direction * other._milliseconds;
          duration._days         += direction * other._days;
          duration._months       += direction * other._months;

          return duration._bubble();
      }

      // supports only 2.0-style add(1, 's') or add(duration)
      function duration_add_subtract__add (input, value) {
          return duration_add_subtract__addSubtract(this, input, value, 1);
      }

      // supports only 2.0-style subtract(1, 's') or subtract(duration)
      function duration_add_subtract__subtract (input, value) {
          return duration_add_subtract__addSubtract(this, input, value, -1);
      }

      function absCeil (number) {
          if (number < 0) {
              return Math.floor(number);
          } else {
              return Math.ceil(number);
          }
      }

      function bubble () {
          var milliseconds = this._milliseconds;
          var days         = this._days;
          var months       = this._months;
          var data         = this._data;
          var seconds, minutes, hours, years, monthsFromDays;

          // if we have a mix of positive and negative values, bubble down first
          // check: https://github.com/moment/moment/issues/2166
          if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                  (milliseconds <= 0 && days <= 0 && months <= 0))) {
              milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
              days = 0;
              months = 0;
          }

          // The following code bubbles up values, see the tests for
          // examples of what that means.
          data.milliseconds = milliseconds % 1000;

          seconds           = absFloor(milliseconds / 1000);
          data.seconds      = seconds % 60;

          minutes           = absFloor(seconds / 60);
          data.minutes      = minutes % 60;

          hours             = absFloor(minutes / 60);
          data.hours        = hours % 24;

          days += absFloor(hours / 24);

          // convert days to months
          monthsFromDays = absFloor(daysToMonths(days));
          months += monthsFromDays;
          days -= absCeil(monthsToDays(monthsFromDays));

          // 12 months -> 1 year
          years = absFloor(months / 12);
          months %= 12;

          data.days   = days;
          data.months = months;
          data.years  = years;

          return this;
      }

      function daysToMonths (days) {
          // 400 years have 146097 days (taking into account leap year rules)
          // 400 years have 12 months === 4800
          return days * 4800 / 146097;
      }

      function monthsToDays (months) {
          // the reverse of daysToMonths
          return months * 146097 / 4800;
      }

      function as (units) {
          var days;
          var months;
          var milliseconds = this._milliseconds;

          units = normalizeUnits(units);

          if (units === 'month' || units === 'year') {
              days   = this._days   + milliseconds / 864e5;
              months = this._months + daysToMonths(days);
              return units === 'month' ? months : months / 12;
          } else {
              // handle milliseconds separately because of floating point math errors (issue #1867)
              days = this._days + Math.round(monthsToDays(this._months));
              switch (units) {
                  case 'week'   : return days / 7     + milliseconds / 6048e5;
                  case 'day'    : return days         + milliseconds / 864e5;
                  case 'hour'   : return days * 24    + milliseconds / 36e5;
                  case 'minute' : return days * 1440  + milliseconds / 6e4;
                  case 'second' : return days * 86400 + milliseconds / 1000;
                  // Math.floor prevents floating point math errors here
                  case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                  default: throw new Error('Unknown unit ' + units);
              }
          }
      }

      // TODO: Use this.as('ms')?
      function duration_as__valueOf () {
          return (
              this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6
          );
      }

      function makeAs (alias) {
          return function () {
              return this.as(alias);
          };
      }

      var asMilliseconds = makeAs('ms');
      var asSeconds      = makeAs('s');
      var asMinutes      = makeAs('m');
      var asHours        = makeAs('h');
      var asDays         = makeAs('d');
      var asWeeks        = makeAs('w');
      var asMonths       = makeAs('M');
      var asYears        = makeAs('y');

      function duration_get__get (units) {
          units = normalizeUnits(units);
          return this[units + 's']();
      }

      function makeGetter(name) {
          return function () {
              return this._data[name];
          };
      }

      var milliseconds = makeGetter('milliseconds');
      var seconds      = makeGetter('seconds');
      var minutes      = makeGetter('minutes');
      var hours        = makeGetter('hours');
      var days         = makeGetter('days');
      var months       = makeGetter('months');
      var years        = makeGetter('years');

      function weeks () {
          return absFloor(this.days() / 7);
      }

      var round = Math.round;
      var thresholds = {
          s: 45,  // seconds to minute
          m: 45,  // minutes to hour
          h: 22,  // hours to day
          d: 26,  // days to month
          M: 11   // months to year
      };

      // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
          return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }

      function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
          var duration = create__createDuration(posNegDuration).abs();
          var seconds  = round(duration.as('s'));
          var minutes  = round(duration.as('m'));
          var hours    = round(duration.as('h'));
          var days     = round(duration.as('d'));
          var months   = round(duration.as('M'));
          var years    = round(duration.as('y'));

          var a = seconds < thresholds.s && ['s', seconds]  ||
                  minutes <= 1           && ['m']           ||
                  minutes < thresholds.m && ['mm', minutes] ||
                  hours   <= 1           && ['h']           ||
                  hours   < thresholds.h && ['hh', hours]   ||
                  days    <= 1           && ['d']           ||
                  days    < thresholds.d && ['dd', days]    ||
                  months  <= 1           && ['M']           ||
                  months  < thresholds.M && ['MM', months]  ||
                  years   <= 1           && ['y']           || ['yy', years];

          a[2] = withoutSuffix;
          a[3] = +posNegDuration > 0;
          a[4] = locale;
          return substituteTimeAgo.apply(null, a);
      }

      // This function allows you to set a threshold for relative time strings
      function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
          if (thresholds[threshold] === undefined) {
              return false;
          }
          if (limit === undefined) {
              return thresholds[threshold];
          }
          thresholds[threshold] = limit;
          return true;
      }

      function humanize (withSuffix) {
          var locale = this.localeData();
          var output = duration_humanize__relativeTime(this, !withSuffix, locale);

          if (withSuffix) {
              output = locale.pastFuture(+this, output);
          }

          return locale.postformat(output);
      }

      var iso_string__abs = Math.abs;

      function iso_string__toISOString() {
          // for ISO strings we do not use the normal bubbling rules:
          //  * milliseconds bubble up until they become hours
          //  * days do not bubble at all
          //  * months bubble up until they become years
          // This is because there is no context-free conversion between hours and days
          // (think of clock changes)
          // and also not between days and months (28-31 days per month)
          var seconds = iso_string__abs(this._milliseconds) / 1000;
          var days         = iso_string__abs(this._days);
          var months       = iso_string__abs(this._months);
          var minutes, hours, years;

          // 3600 seconds -> 60 minutes -> 1 hour
          minutes           = absFloor(seconds / 60);
          hours             = absFloor(minutes / 60);
          seconds %= 60;
          minutes %= 60;

          // 12 months -> 1 year
          years  = absFloor(months / 12);
          months %= 12;


          // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
          var Y = years;
          var M = months;
          var D = days;
          var h = hours;
          var m = minutes;
          var s = seconds;
          var total = this.asSeconds();

          if (!total) {
              // this is the same as C#'s (Noda) and python (isodate)...
              // but not other JS (goog.date)
              return 'P0D';
          }

          return (total < 0 ? '-' : '') +
              'P' +
              (Y ? Y + 'Y' : '') +
              (M ? M + 'M' : '') +
              (D ? D + 'D' : '') +
              ((h || m || s) ? 'T' : '') +
              (h ? h + 'H' : '') +
              (m ? m + 'M' : '') +
              (s ? s + 'S' : '');
      }

      var duration_prototype__proto = Duration.prototype;

      duration_prototype__proto.abs            = duration_abs__abs;
      duration_prototype__proto.add            = duration_add_subtract__add;
      duration_prototype__proto.subtract       = duration_add_subtract__subtract;
      duration_prototype__proto.as             = as;
      duration_prototype__proto.asMilliseconds = asMilliseconds;
      duration_prototype__proto.asSeconds      = asSeconds;
      duration_prototype__proto.asMinutes      = asMinutes;
      duration_prototype__proto.asHours        = asHours;
      duration_prototype__proto.asDays         = asDays;
      duration_prototype__proto.asWeeks        = asWeeks;
      duration_prototype__proto.asMonths       = asMonths;
      duration_prototype__proto.asYears        = asYears;
      duration_prototype__proto.valueOf        = duration_as__valueOf;
      duration_prototype__proto._bubble        = bubble;
      duration_prototype__proto.get            = duration_get__get;
      duration_prototype__proto.milliseconds   = milliseconds;
      duration_prototype__proto.seconds        = seconds;
      duration_prototype__proto.minutes        = minutes;
      duration_prototype__proto.hours          = hours;
      duration_prototype__proto.days           = days;
      duration_prototype__proto.weeks          = weeks;
      duration_prototype__proto.months         = months;
      duration_prototype__proto.years          = years;
      duration_prototype__proto.humanize       = humanize;
      duration_prototype__proto.toISOString    = iso_string__toISOString;
      duration_prototype__proto.toString       = iso_string__toISOString;
      duration_prototype__proto.toJSON         = iso_string__toISOString;
      duration_prototype__proto.locale         = locale;
      duration_prototype__proto.localeData     = localeData;

      // Deprecations
      duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
      duration_prototype__proto.lang = lang;

      // Side effect imports

      // FORMATTING

      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf');

      // PARSING

      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
          config._d = new Date(parseFloat(input, 10) * 1000);
      });
      addParseToken('x', function (input, array, config) {
          config._d = new Date(toInt(input));
      });

      // Side effect imports


      utils_hooks__hooks.version = '2.13.0';

      setHookCallback(local__createLocal);

      utils_hooks__hooks.fn                    = momentPrototype;
      utils_hooks__hooks.min                   = min;
      utils_hooks__hooks.max                   = max;
      utils_hooks__hooks.now                   = now;
      utils_hooks__hooks.utc                   = create_utc__createUTC;
      utils_hooks__hooks.unix                  = moment__createUnix;
      utils_hooks__hooks.months                = lists__listMonths;
      utils_hooks__hooks.isDate                = isDate;
      utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
      utils_hooks__hooks.invalid               = valid__createInvalid;
      utils_hooks__hooks.duration              = create__createDuration;
      utils_hooks__hooks.isMoment              = isMoment;
      utils_hooks__hooks.weekdays              = lists__listWeekdays;
      utils_hooks__hooks.parseZone             = moment__createInZone;
      utils_hooks__hooks.localeData            = locale_locales__getLocale;
      utils_hooks__hooks.isDuration            = isDuration;
      utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
      utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
      utils_hooks__hooks.defineLocale          = defineLocale;
      utils_hooks__hooks.updateLocale          = updateLocale;
      utils_hooks__hooks.locales               = locale_locales__listLocales;
      utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
      utils_hooks__hooks.normalizeUnits        = normalizeUnits;
      utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
      utils_hooks__hooks.prototype             = momentPrototype;

      var _moment = utils_hooks__hooks;

      return _moment;

  }));
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(183)(module)))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(130);
  exports.ServiceProtocol$TextMessages$MailEx$SecurityModeNames = {
      "None": "None",
      "StartTLS": "StartTLS",
      "SSL": "SSL",
  };
  exports.ServiceProtocol$ObjectManager$LogicObjectStateNames = {
      "Enabled": "有效",
      "Disabled": "无效",
      "Deleted": "已删除",
  };
  exports.ServiceProtocol$Biz$Feedback$FeedbackStatusNames = {
      "Created": "新反馈",
      "Processed": "已处理",
  };
  exports.ServiceProtocol$DeviceTypeNames = {
      "Unknown": "未知",
      "PC": "PC",
      "Weichat": "微信",
      "App": "APP",
      "Mobile": "移动浏览器",
      "System": "系统",
  };
  exports.ServiceProtocol$Biz$Notifications$NotificationStateNames = {
      "NotStart": "未开始",
      "Available": "发布中",
      "Expired": "已过期",
  };
  exports.ServiceProtocol$Biz$Promotion$ObjectPrizes$DeliverySubmitTypeNames = {
      "NotSubmitted": "未提交发货",
      "Submitted": "提交发货",
  };
  exports.ServiceProtocol$Biz$Promotion$Coupons$CouponRewardStateNames = {
      "Invalid": "无效",
      "Valid": "有效",
      "Expired": "过期",
      "Used": "已使用",
      "NotReady": "未生效",
  };
  exports.ServiceProtocol$Biz$Promotion$Coupons$CouponTypeNames = {
      "DecreaseCoupon": "抵价券",
      "DiscountCoupon": "折扣券",
  };
  exports.ServiceProtocol$Biz$Promotion$BonusPoints$BonusPointAdjustTypeNames = {
      "Inc": "增加",
      "Dec": "减少",
  };
  exports.ServiceProtocol$Biz$Promotion$Activities$ActivityGrantStateNames = {
      "Available": "有效",
      "Used": "已使用",
      "Expired": "过期",
      "Invalid": "活动结束",
  };
  exports.ServiceProtocol$Biz$Promotion$Activities$ActivityStateNames = {
      "BeforeStart": "未开始",
      "Paused": "暂停",
      "Running": "进行中",
      "Completed": "已结束",
  };
  exports.ServiceProtocol$Biz$Promotion$Activities$ActivityResultStatusNames = {
      "NotExecuted": "未参加",
      "UserTimePeriodLimitExpired": "用户时间限制",
      "GlobalTimePeriodLimitExpired": "全局时间限制",
      "ActivityMissing": "活动不存在",
      "Denied": "禁止参加",
      "NoReward": "未获奖",
      "HasReward": "成功获奖",
  };
  exports.ServiceProtocol$Biz$Promotion$Activities$ActivityResultItemStatusNames = {
      "NoRward": "未获奖",
      "RewardItemMissing": "奖项不存在",
      "PrizeProviderMissing": "奖品类型不支持",
      "ZeroRewardCount": "没有奖品",
      "NoMoreReward": "奖品已送完",
      "RewardFailed": "开奖失败",
      "HasReward": "成功获奖",
  };
  exports.ServiceProtocol$Biz$Promotion$Activities$ExecLimitTimePeriodNames = {
      "None": "没有限制",
      "Minute": "分钟",
      "Hour": "小时",
      "Day": "天",
      "Week": "周",
      "Month": "月",
      "Forever": "永久",
  };
  exports.ServiceProtocol$TextMessages$SendStatusNames = {
      "Sending": "发送中",
      "Completed": "发送成功",
      "Failed": "发送失败",
  };
  exports.ServiceProtocol$Biz$Accounting$DepositStateNames = {
      "Processing": "处理中",
      "Completed": "已充值未退款",
      "Failed": "失败",
      "New": "新建",
      "Refunding": "退款中",
      "Refunded": "已退款",
      "AfterProcessing": "已处理",
      "CompletedWithRefund": "已充值含退款",
  };
  exports.ServiceProtocol$Biz$Accounting$RefundStateNames = {
      "Sending": "提交中",
      "Processing": "处理中",
      "Success": "已完成",
      "Error": "错误",
  };
  exports.CrowdMall$Bizness$CrowdFounding$Models$AdjustStateNames = {
      "NotStart": "未开始",
      "Working": "进行中",
      "Paused": "已暂停",
      "Deleted": "已删除",
      "Completed": "已完成",
      "Expired": "已过期",
  };
  exports.CrowdMall$DataModels$CFStateNames = {
      "Opened": "已开奖",
      "Opening": "开奖中",
      "OpenWaiting": "等待开奖",
      "Selling": "夺宝中",
  };
  exports.ServiceProtocol$Auth$SexTypeNames = {
      "Unknown": "未指定",
      "Male": "男",
      "Female": "女",
  };
  exports.ServiceProtocol$Auth$UserTypeNames = {
      "Normal": "普通用户",
      "Admin": "管理员",
      "Simulated": "模拟用户",
      "System": "系统用户",
  };
  exports.ServiceProtocol$Biz$Delivery$DeliveryStateNames = {
      "DeliveryWaiting": "等待发货",
      "CodeWaiting": "待录单号",
      "Delivering": "已发货",
      "Received": "已签收",
  };
  exports.CrowdMall$Bizness$CrowdFounding$DeliverySubmitTypeNames = {
      "NonSubmitted": "未提交发货信息",
      "Submitted": "已提交发货信息",
  };
  exports.ServiceProtocol$Biz$Payments$PaymentRefundStateNames = {
      "Submitting": "提交中",
      "Processing": "处理中",
      "Success": "成功",
      "Failed": "失败",
  };
  exports.ServiceProtocol$Biz$Payments$CollectStateNames = {
      "Init": "新建",
      "Collecting": "收款中",
      "Success": "成功",
      "Failed": "失败",
  };
  exports.ServiceProtocol$Biz$Trades$TradeStateNames = {
      "Invalid": "无效",
      "Created": "新订单",
      "WaitSellerConfirm": "待卖方确认",
      "Established": "待发货",
      "WaitBuyerComplete": "待收货",
      "WaitSettlement": "待双方结算",
      "WaitBuyerSettlement": "待买方结算",
      "WaitSellerSettlement": "待卖方结算",
      "Closed": "已结束",
  };
  exports.ServiceProtocol$Biz$Trades$TradeEndTypeNames = {
      "InProcessing": "未完成",
      "SellerCancelled": "卖方取消",
      "SellerConfirmExpired": "卖方未确认",
      "SellerAborted": "卖方终止",
      "BuyerCancelledBeforeConfirm": "买方放弃",
      "BuyerCancelledAfterConfirm": "买方取消",
      "BuyerConfirmExpired": "买方未支付",
      "BuyerAborted": "买方终止",
      "Completed": "正常完成",
  };
  exports.ServiceProtocol$Biz$Trades$TradeTypeNames = {
      "Normal": "常规交易",
      "Simulated": "模拟交易",
  };
  exports.ServiceProtocol$Biz$UIManager$Friendly$LinkTargetNames = {
      "_default": "默认",
      "_blank": "新窗口",
      "_self": "当前页",
  };
  exports.ServiceProtocol$Auth$Externals$ExtAuthTypeNames = {
      "OAuth2": "OAuth2",
  };
  exports.ServiceProtocol$Biz$NetDrives$ItemTypeNames = {
      "Directory": "文件夹",
      "Image": "图片",
      "Document": "文档",
      "Audio": "音乐",
      "Video": "视频",
      "Package": "压缩包",
      "Other": "其他",
  };
  //第三方回调支持
  //
  exports.PaymentReturn = {
      //
      //
      Collect: function (
          //
          //类型:string
          id, __opts) {
          return api.call('PaymentReturn', 'Collect', {
              id: id
          }, {}, __opts);
      },
  };
  //
  //
  exports.System = {
      //
      //
      JsTime: function (__opts) {
          return api.call('System', 'JsTime', null, null, __opts);
      },
  };
  //微信接口
  //
  exports.WeiXin = {
      //
      //
      GetJsApiSignature: function (
          //
          //类型:string
          url, __opts) {
          return api.call('WeiXin', 'GetJsApiSignature', {
              url: url
          }, null, __opts);
      },
      //
      //
      GetMediaId: function (
          //
          //类型:string
          serverId, __opts) {
          return api.call('WeiXin', 'GetMediaId', {
              serverId: serverId
          }, null, __opts);
      },
  };
  //UI管理器
  //
  exports.UIManager = {
      //
      //
      Config: function (
          //
          //类型:string
          site, __opts) {
          return api.call('UIManager', 'Config', {
              site: site
          }, null, __opts);
      },
  };
  //用户反馈服务
  //
  exports.FeedbackService = {
      //
      //
      Create: function (
          //
          //类型:ServiceProtocol.Biz.Feedback.FeedbackCreateArgument
          Arg, __opts) {
          return api.call('FeedbackService', 'Create', null, Arg, __opts);
      },
  };
  //用户通知前端
  //
  exports.UserNotificationService = {
      //
      //
      QueryBroadcastNotification: function (__opts) {
          return api.call('UserNotificationService', 'QueryBroadcastNotification', null, null, __opts);
      },
      //
      //
      QueryUserNotification: function (__opts) {
          return api.call('UserNotificationService', 'QueryUserNotification', null, null, __opts);
      },
      //
      //
      GetNormalNotification: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('UserNotificationService', 'GetNormalNotification', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      GetBroadcastNotification: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('UserNotificationService', 'GetBroadcastNotification', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      GetNormalNotificationBody: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('UserNotificationService', 'GetNormalNotificationBody', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      GetBroadcastNotificationBody: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('UserNotificationService', 'GetBroadcastNotificationBody', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      DeleteNormalNotification: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('UserNotificationService', 'DeleteNormalNotification', {
              Id: Id
          }, {}, __opts);
      },
      //
      //
      DeleteBroadcastNotification: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('UserNotificationService', 'DeleteBroadcastNotification', {
              Id: Id
          }, {}, __opts);
      },
      //
      //
      GetStatus: function (__opts) {
          return api.call('UserNotificationService', 'GetStatus', null, {}, __opts);
      },
      //
      //
      SetReaded: function (
          //
          //类型:ServiceProtocol.Biz.Notifications.WebApi.SetReadedArguments
          Arg, __opts) {
          return api.call('UserNotificationService', 'SetReaded', null, Arg, __opts);
      },
  };
  //实物奖品
  //
  exports.ObjectPrize = {
      //
      //
      ListSpec: function (
          //
          //类型:int
          ObjectPrizeId, __opts) {
          return api.call('ObjectPrize', 'ListSpec', {
              ObjectPrizeId: ObjectPrizeId
          }, {}, __opts);
      },
  };
  //优惠券前端支持
  //
  exports.Coupon = {
      //
      //
      Get: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('Coupon', 'Get', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      Query: function (
          //
          //类型:ServiceProtocol.Biz.Promotion.Coupons.CouponQueryArgument
          Arg, __opts) {
          return api.call('Coupon', 'Query', null, Arg, __opts);
      },
      //
      //
      QueryRewardRecord: function (
          //
          //类型:ServiceProtocol.Biz.Promotion.Coupons.CouponRewardRecordQueryArgument
          Arg, __opts) {
          return api.call('Coupon', 'QueryRewardRecord', null, Arg, __opts);
      },
      //
      //
      QueryUseRecord: function (
          //
          //类型:ServiceProtocol.Biz.Promotion.Coupons.CouponUseRecordQueryArgument
          Arg, __opts) {
          return api.call('Coupon', 'QueryUseRecord', null, Arg, __opts);
      },
      //
      //
      GetTotalCount: function (__opts) {
          return api.call('Coupon', 'GetTotalCount', null, {}, __opts);
      },
      //
      //
      CalcNewAmount: function (
          //
          //类型:ServiceProtocol.Biz.Promotion.Coupons.CalcNewAmountArgument
          Arg, __opts) {
          return api.call('Coupon', 'CalcNewAmount', null, Arg, __opts);
      },
  };
  //积分前端支持
  //
  exports.BonusPoint = {
      //
      //
      GetStatus: function (__opts) {
          return api.call('BonusPoint', 'GetStatus', null, {}, __opts);
      },
      //
      //
      GetRecord: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('BonusPoint', 'GetRecord', {
              Id: Id
          }, {}, __opts);
      },
      //
      //
      QueryRecord: function (
          //
          //类型:ServiceProtocol.Biz.Promotion.BonusPoints.BonusPointAdjustRecordQueryArgument
          Arg, __opts) {
          return api.call('BonusPoint', 'QueryRecord', null, Arg, __opts);
      },
  };
  //促销授权支持
  //
  exports.ActivityGrant = {
      //
      //
      Get: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('ActivityGrant', 'Get', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      Execute: function (
          //
          //类型:ServiceProtocol.Biz.Promotion.Activities.Web.ExecArgument
          Arg, __opts) {
          return api.call('ActivityGrant', 'Execute', null, Arg, __opts);
      },
      //
      //
      GetStatus: function (
          //
          //类型:int
          Id, 
          //
          //类型:bool
          withActionQuantity, __opts) {
          return api.call('ActivityGrant', 'GetStatus', {
              Id: Id,
              withActionQuantity: withActionQuantity
          }, {}, __opts);
      },
      //
      //
      ExecuteActivity: function (
          //
          //类型:ServiceProtocol.Biz.Promotion.Activities.Web.ExecArgument
          Arg, __opts) {
          return api.call('ActivityGrant', 'ExecuteActivity', null, Arg, __opts);
      },
      //
      //
      Query: function (
          //
          //类型:ServiceProtocol.Biz.Promotion.Activities.ActivityGrantQueryArgument
          Arg, __opts) {
          return api.call('ActivityGrant', 'Query', null, Arg, __opts);
      },
  };
  //开放活动支持
  //
  exports.PublicActivity = {
      //
      //
      GetActionResults: function (
          //
          //类型:ServiceProtocol.Biz.Promotion.Activities.Web.GetActionResultsParameter
          Arg, __opts) {
          return api.call('PublicActivity', 'GetActionResults', null, Arg, __opts);
      },
      //
      //
      Execue: function (
          //
          //类型:ServiceProtocol.Biz.Promotion.Activities.Web.ExecArgument
          Arg, __opts) {
          return api.call('PublicActivity', 'Execue', null, Arg, __opts);
      },
      //
      //
      QueryRecords: function (
          //
          //类型:ServiceProtocol.Biz.Promotion.Activities.ActivityRecordQueryArgument
          Arg, __opts) {
          return api.call('PublicActivity', 'QueryRecords', null, Arg, __opts);
      },
      //
      //
      QueryRewardRecords: function (
          //
          //类型:ServiceProtocol.Biz.Promotion.Activities.ActivityRewardRecordQueryArgument
          Arg, __opts) {
          return api.call('PublicActivity', 'QueryRewardRecords', null, Arg, __opts);
      },
      //
      //
      GetRewardStatus: function (__opts) {
          return api.call('PublicActivity', 'GetRewardStatus', null, null, __opts);
      },
      //
      //
      GetRealTimeRewardStatus: function (
          //
          //类型:int
          ActivityId, 
          //
          //类型:int
          Minutes, __opts) {
          return api.call('PublicActivity', 'GetRealTimeRewardStatus', {
              ActivityId: ActivityId,
              Minutes: Minutes
          }, {}, __opts);
      },
  };
  //账户前端支持
  //
  exports.Account = {
      //
      //
      GetDepositRecord: function (
          //
          //类型:int
          id, __opts) {
          return api.call('Account', 'GetDepositRecord', {
              id: id
          }, null, __opts);
      },
      //
      //
      ListDepositRecord: function (
          //
          //类型:string
          Ident, 
          //
          //类型:datetime
          BeginTime, 
          //
          //类型:datetime
          EndTime, 
          //
          //类型:int
          PaymentPlatform, 
          //
          //类型:ServiceProtocol.Biz.Accounting.DepositState
          State, __opts) {
          return api.call('Account', 'ListDepositRecord', {
              Ident: Ident,
              BeginTime: BeginTime,
              EndTime: EndTime,
              PaymentPlatform: PaymentPlatform,
              State: State
          }, null, __opts);
      },
      //
      //
      Balance: function (__opts) {
          return api.call('Account', 'Balance', null, null, __opts);
      },
      //
      //
      RefreshDepositRecord: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('Account', 'RefreshDepositRecord', {
              Id: Id
          }, {}, __opts);
      },
      //
      //
      Deposit: function (
          //
          //类型:decimal
          Amount, 
          //
          //类型:int
          PaymentPlatform, 
          //
          //类型:string
          Redirect, 
          //
          //类型:string
          ClientType, __opts) {
          return api.call('Account', 'Deposit', {
              Amount: Amount,
              PaymentPlatform: PaymentPlatform,
              Redirect: Redirect,
              ClientType: ClientType
          }, {}, __opts);
      },
  };
  //好友邀请
  //
  exports.UserInvite = {
      //
      //
      QrImage: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('UserInvite', 'QrImage', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      GetInviteMessageContent: function (
          //
          //类型:bool
          DisplayMode, __opts) {
          return api.call('UserInvite', 'GetInviteMessageContent', {
              DisplayMode: DisplayMode
          }, {}, __opts);
      },
      //
      //
      SendInviteMessage: function (
          //
          //类型:CrowdMall.Site.ApiControllers.UserInviteController+SendInviteMessageArgument
          arg, __opts) {
          return api.call('UserInvite', 'SendInviteMessage', null, arg, __opts);
      },
      //
      //
      GetWeiChatInviteSetting: function (__opts) {
          return api.call('UserInvite', 'GetWeiChatInviteSetting', null, null, __opts);
      },
      //
      //
      WeiXinPoster: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('UserInvite', 'WeiXinPoster', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      Frields: function (__opts) {
          return api.call('UserInvite', 'Frields', null, null, __opts);
      },
      //
      //
      FrieldCount: function (__opts) {
          return api.call('UserInvite', 'FrieldCount', null, null, __opts);
      },
  };
  //
  //
  exports.CFWinRecord = {
      //
      //
      List: function (
          //
          //类型:datetime
          BeginTime, 
          //
          //类型:datetime
          EndTime, __opts) {
          return api.call('CFWinRecord', 'List', {
              BeginTime: BeginTime,
              EndTime: EndTime
          }, null, __opts);
      },
      //
      //
      Get: function (
          //
          //类型:int
          ProductId, 
          //
          //类型:int
          Round, __opts) {
          return api.call('CFWinRecord', 'Get', {
              ProductId: ProductId,
              Round: Round
          }, null, __opts);
      },
  };
  //评论管理
  //
  exports.CFWinSharedManager = {
      //
      //
      Query: function (
          //
          //类型:ServiceProtocol.Biz.Comments.CommentQueryArgument
          args, __opts) {
          return api.call('CFWinSharedManager', 'Query', null, args, __opts);
      },
      //
      //
      Create: function (
          //
          //类型:CrowdMall.Bizness.CrowdFounding.Models.CFWinSharedEditable
          Entity, __opts) {
          return api.call('CFWinSharedManager', 'Create', null, Entity, __opts);
      },
      //
      //
      Update: function (
          //
          //类型:CrowdMall.Bizness.CrowdFounding.Models.CFWinSharedEditable
          Entity, __opts) {
          return api.call('CFWinSharedManager', 'Update', null, Entity, __opts);
      },
      //
      //
      Remove: function (
          //
          //类型:int
          EntityId, __opts) {
          return api.call('CFWinSharedManager', 'Remove', {
              EntityId: EntityId
          }, {}, __opts);
      },
      //
      //
      Get: function (
          //
          //类型:int
          EntityId, __opts) {
          return api.call('CFWinSharedManager', 'Get', {
              EntityId: EntityId
          }, null, __opts);
      },
      //
      //
      LoadForEdit: function (
          //
          //类型:int
          EntityId, __opts) {
          return api.call('CFWinSharedManager', 'LoadForEdit', {
              EntityId: EntityId
          }, {}, __opts);
      },
  };
  //
  //
  exports.Config = {
      //
      //
      Default: function (__opts) {
          return api.call('Config', 'Default', null, null, __opts);
      },
  };
  //发货地址前端支持
  //
  exports.DeliveryAddress = {
      //
      //
      GetUserAddress: function (
          //
          //类型:int
          AddressId, __opts) {
          return api.call('DeliveryAddress', 'GetUserAddress', {
              AddressId: AddressId
          }, null, __opts);
      },
      //
      //
      ListUserAddresses: function (__opts) {
          return api.call('DeliveryAddress', 'ListUserAddresses', null, null, __opts);
      },
      //
      //
      LoadForEditAsync: function (
          //
          //类型:int
          AddressId, __opts) {
          return api.call('DeliveryAddress', 'LoadForEditAsync', {
              AddressId: AddressId
          }, null, __opts);
      },
      //
      //
      RemoveAddress: function (
          //
          //类型:int
          AddressId, __opts) {
          return api.call('DeliveryAddress', 'RemoveAddress', {
              AddressId: AddressId
          }, {}, __opts);
      },
      //
      //
      UpdateAddress: function (
          //
          //类型:CrowdMall.Bizness.Delivery.Models.UserDeliveryAddressEditable
          address, __opts) {
          return api.call('DeliveryAddress', 'UpdateAddress', null, address, __opts);
      },
  };
  //发货控制
  //
  exports.DeliveryControl = {
      //
      //
      Received: function (
          //
          //类型:int
          DeliveryId, __opts) {
          return api.call('DeliveryControl', 'Received', {
              DeliveryId: DeliveryId
          }, {}, __opts);
      },
      //
      //
      GetVirtualItemToken: function (
          //
          //类型:int
          DeliveryId, __opts) {
          return api.call('DeliveryControl', 'GetVirtualItemToken', {
              DeliveryId: DeliveryId
          }, {}, __opts);
      },
  };
  //
  //
  exports.DeliveryCreate = {
      //
      //
      Create: function (
          //
          //类型:int
          ProductId, 
          //
          //类型:int
          Round, 
          //
          //类型:int
          AddressId, 
          //
          //类型:int
          SpecId, __opts) {
          return api.call('DeliveryCreate', 'Create', {
              ProductId: ProductId,
              Round: Round,
              AddressId: AddressId,
              SpecId: SpecId
          }, {}, __opts);
      },
      //
      //
      CreateObjectPrizeDelivery: function (
          //
          //类型:int
          RecordId, 
          //
          //类型:int
          AddressId, 
          //
          //类型:int
          SpecId, __opts) {
          return api.call('DeliveryCreate', 'CreateObjectPrizeDelivery', {
              RecordId: RecordId,
              AddressId: AddressId,
              SpecId: SpecId
          }, {}, __opts);
      },
  };
  //发货地区支持
  //
  exports.DeliveryLocation = {
      //
      //
      Get: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('DeliveryLocation', 'Get', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      List: function (
          //
          //类型:int
          ParentId, __opts) {
          return api.call('DeliveryLocation', 'List', {
              ParentId: ParentId
          }, null, __opts);
      },
  };
  //文档前端支持
  //
  exports.Document = {
      //
      //
      GetDocument: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('Document', 'GetDocument', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      GetDocumentByIndex: function (
          //
          //类型:string
          Ident, __opts) {
          return api.call('Document', 'GetDocumentByIndex', {
              Ident: Ident
          }, null, __opts);
      },
      //
      //
      GetCategory: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('Document', 'GetCategory', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      ListScopeDocuments: function (
          //
          //类型:string
          scope, 
          //
          //类型:bool
          WithDocumentInCategory, __opts) {
          return api.call('Document', 'ListScopeDocuments', {
              scope: scope,
              WithDocumentInCategory: WithDocumentInCategory
          }, null, __opts);
      },
      //
      //
      ListCategoryDocuments: function (
          //
          //类型:int
          CategoryId, __opts) {
          return api.call('Document', 'ListCategoryDocuments', {
              CategoryId: CategoryId
          }, null, __opts);
      },
      //
      //
      ListCategories: function (
          //
          //类型:string
          scope, __opts) {
          return api.call('Document', 'ListCategories', {
              scope: scope
          }, null, __opts);
      },
      //
      //
      ListChildCategories: function (
          //
          //类型:int
          CategoryId, __opts) {
          return api.call('Document', 'ListChildCategories', {
              CategoryId: CategoryId
          }, null, __opts);
      },
  };
  //媒体附件支持
  //
  exports.Media = {
      //
      //
      Upload: function (
          //
          //类型:bool
          returnJson, __opts) {
          return api.call('Media', 'Upload', {
              returnJson: returnJson
          }, {}, __opts);
      },
      //
      //
      Clip: function (
          //
          //类型:string
          src, 
          //
          //类型:double
          x, 
          //
          //类型:double
          y, 
          //
          //类型:double
          w, 
          //
          //类型:double
          h, __opts) {
          return api.call('Media', 'Clip', {
              src: src,
              x: x,
              y: y,
              w: w,
              h: h
          }, {}, __opts);
      },
      //
      //
      Get: function (
          //
          //类型:string
          id, 
          //
          //类型:string
          format, __opts) {
          return api.call('Media', 'Get', {
              id: id,
              format: format
          }, null, __opts);
      },
  };
  //评论前端支持
  //
  exports.CFWinShared = {
      //
      //
      ListUnsharedRounds: function (__opts) {
          return api.call('CFWinShared', 'ListUnsharedRounds', null, null, __opts);
      },
      //
      //
      ListSharedRounds: function (
          //
          //类型:int
          UserId, __opts) {
          return api.call('CFWinShared', 'ListSharedRounds', {
              UserId: UserId
          }, null, __opts);
      },
      //
      //
      List: function (__opts) {
          return api.call('CFWinShared', 'List', null, null, __opts);
      },
      //
      //
      Get: function (
          //
          //类型:int
          id, __opts) {
          return api.call('CFWinShared', 'Get', {
              id: id
          }, null, __opts);
      },
      //
      //
      ListByAuthor: function (
          //
          //类型:int
          id, __opts) {
          return api.call('CFWinShared', 'ListByAuthor', {
              id: id
          }, null, __opts);
      },
      //
      //
      ListByTarget: function (
          //
          //类型:int
          id, __opts) {
          return api.call('CFWinShared', 'ListByTarget', {
              id: id
          }, null, __opts);
      },
      //
      //
      LoadForEdit: function (
          //
          //类型:int
          id, __opts) {
          return api.call('CFWinShared', 'LoadForEdit', {
              id: id
          }, null, __opts);
      },
      //
      //
      CreateAsync: function (
          //
          //类型:CrowdMall.Bizness.CrowdFounding.Models.CFWinSharedEditable
          data, __opts) {
          return api.call('CFWinShared', 'CreateAsync', null, data, __opts);
      },
      //
      //
      UpdateAsync: function (
          //
          //类型:CrowdMall.Bizness.CrowdFounding.Models.CFWinSharedEditable
          data, __opts) {
          return api.call('CFWinShared', 'UpdateAsync', null, data, __opts);
      },
      //
      //
      RemoveAsync: function (
          //
          //类型:int
          id, __opts) {
          return api.call('CFWinShared', 'RemoveAsync', {
              id: id
          }, {}, __opts);
      },
  };
  //支付平台管理
  //
  exports.PaymentPlatform = {
      //
      //
      List: function (
          //
          //类型:bool
          All, __opts) {
          return api.call('PaymentPlatform', 'List', {
              All: All
          }, null, __opts);
      },
  };
  //
  //
  exports.Promotion = {
      //
      //
      DailyAttend: function (__opts) {
          return api.call('Promotion', 'DailyAttend', null, {}, __opts);
      },
      //
      //
      IsDailyAttended: function (__opts) {
          return api.call('Promotion', 'IsDailyAttended', null, {}, __opts);
      },
      //
      //
      ListUserObjectPrizeRecord: function (
          //
          //类型:CrowdMall.Site.ApiControllers.ListUserObjectPrizeRecordArg
          Arg, __opts) {
          return api.call('Promotion', 'ListUserObjectPrizeRecord', null, Arg, __opts);
      },
  };
  //前端交易支持
  //
  exports.Trade = {
      //
      //
      Create: function (
          //
          //类型:CrowdMall.Bizness.Trades.Models.DirectTradeCreateArgument
          arg, __opts) {
          return api.call('Trade', 'Create', null, arg, __opts);
      },
      //
      //
      Get: function (
          //
          //类型:int
          Id, 
          //
          //类型:bool
          WithItems, __opts) {
          return api.call('Trade', 'Get', {
              Id: Id,
              WithItems: WithItems
          }, null, __opts);
      },
      //
      //
      List: function (
          //
          //类型:CrowdMall.DataModels.CFState
          State, 
          //
          //类型:datetime
          begin, 
          //
          //类型:datetime
          end, 
          //
          //类型:int
          UserId, __opts) {
          return api.call('Trade', 'List', {
              State: State,
              begin: begin,
              end: end,
              UserId: UserId
          }, null, __opts);
      },
      //
      //
      GetCurRoundBuyCount: function (
          //
          //类型:int
          ProductId, 
          //
          //类型:int
          Round, __opts) {
          return api.call('Trade', 'GetCurRoundBuyCount', {
              ProductId: ProductId,
              Round: Round
          }, {}, __opts);
      },
      //
      //
      AllCodes: function (
          //
          //类型:int
          TradeItemId, __opts) {
          return api.call('Trade', 'AllCodes', {
              TradeItemId: TradeItemId
          }, null, __opts);
      },
      //
      //
      AllCodesInRound: function (
          //
          //类型:int
          ProductId, 
          //
          //类型:int
          Round, 
          //
          //类型:int
          UserId, __opts) {
          return api.call('Trade', 'AllCodesInRound', {
              ProductId: ProductId,
              Round: Round,
              UserId: UserId
          }, null, __opts);
      },
  };
  //购物车支持
  //
  exports.ShoppingCart = {
      //
      //
      Update: function (
          //
          //类型:int
          quantity, 
          //
          //类型:int[]
          items, __opts) {
          return api.call('ShoppingCart', 'Update', {
              quantity: quantity
          }, items, __opts);
      },
      //
      //
      Add: function (
          //
          //类型:int
          quantity, 
          //
          //类型:int[]
          items, __opts) {
          return api.call('ShoppingCart', 'Add', {
              quantity: quantity
          }, items, __opts);
      },
      //
      //
      Remove: function (
          //
          //类型:int[]
          items, __opts) {
          return api.call('ShoppingCart', 'Remove', null, items, __opts);
      },
      //
      //
      Sync: function (
          //
          //类型:ServiceProtocol.Biz.ShoppingCarts.ItemStatus[]
          items, __opts) {
          return api.call('ShoppingCart', 'Sync', null, items, __opts);
      },
      //
      //
      Clear: function (__opts) {
          return api.call('ShoppingCart', 'Clear', null, {}, __opts);
      },
      //
      //
      Count: function (__opts) {
          return api.call('ShoppingCart', 'Count', null, null, __opts);
      },
      //
      //
      Items: function (__opts) {
          return api.call('ShoppingCart', 'Items', null, null, __opts);
      },
  };
  //
  //
  exports.Round = {
      //
      //
      GetRoundCalcTradeItems: function (
          //
          //类型:int
          ProductId, 
          //
          //类型:int
          Round, 
          //
          //类型:int
          Count, __opts) {
          return api.call('Round', 'GetRoundCalcTradeItems', {
              ProductId: ProductId,
              Round: Round,
              Count: Count
          }, null, __opts);
      },
      //
      //
      GetRoundTradeItems: function (
          //
          //类型:int
          ProductId, 
          //
          //类型:int
          Round, __opts) {
          return api.call('Round', 'GetRoundTradeItems', {
              ProductId: ProductId,
              Round: Round
          }, null, __opts);
      },
      //
      //
      List: function (
          //
          //类型:CrowdMall.DataModels.CFState
          State, __opts) {
          return api.call('Round', 'List', {
              State: State
          }, null, __opts);
      },
      //
      //
      ListWinnerRounds: function (
          //
          //类型:int
          UserId, __opts) {
          return api.call('Round', 'ListWinnerRounds', {
              UserId: UserId
          }, null, __opts);
      },
      //
      //
      ListProductRounds: function (
          //
          //类型:int
          ProductId, __opts) {
          return api.call('Round', 'ListProductRounds', {
              ProductId: ProductId
          }, null, __opts);
      },
      //
      //
      Get: function (
          //
          //类型:int
          ProductId, 
          //
          //类型:int
          Round, __opts) {
          return api.call('Round', 'Get', {
              ProductId: ProductId,
              Round: Round
          }, null, __opts);
      },
      //
      //
      BatchGet: function (
          //
          //类型:CrowdMall.Site.ApiControllers.RoundController+RoundIdent[]
          ids, __opts) {
          return api.call('Round', 'BatchGet', null, ids, __opts);
      },
  };
  //产品信息
  //
  exports.Product = {
      //
      //
      Item: function (
          //
          //类型:int
          id, __opts) {
          return api.call('Product', 'Item', {
              id: id
          }, null, __opts);
      },
      //
      //
      Detail: function (
          //
          //类型:int
          id, __opts) {
          return api.call('Product', 'Detail', {
              id: id
          }, null, __opts);
      },
      //
      //
      Product: function (
          //
          //类型:int
          id, __opts) {
          return api.call('Product', 'Product', {
              id: id
          }, null, __opts);
      },
      //
      //
      List: function (
          //
          //类型:int
          id, 
          //
          //类型:string
          key, __opts) {
          return api.call('Product', 'List', {
              id: id,
              key: key
          }, null, __opts);
      },
      //
      //
      Category: function (
          //
          //类型:int
          id, __opts) {
          return api.call('Product', 'Category', {
              id: id
          }, null, __opts);
      },
      //
      //
      ChildCategories: function (
          //
          //类型:int
          id, __opts) {
          return api.call('Product', 'ChildCategories', {
              id: id
          }, null, __opts);
      },
      //
      //
      ListSpec: function (
          //
          //类型:int
          ProductId, __opts) {
          return api.call('Product', 'ListSpec', {
              ProductId: ProductId
          }, {}, __opts);
      },
  };
  //外部认证支持
  //
  exports.ExternalAuthorization = {
      //
      //
      GetAuthState: function (
          //
          //类型:string
          callback, 
          //
          //类型:string
          source, 
          //
          //类型:string
          inviter, __opts) {
          return api.call('ExternalAuthorization', 'GetAuthState', {
              callback: callback,
              source: source,
              inviter: inviter
          }, null, __opts);
      },
      //
      //
      Start: function (
          //
          //类型:string
          provider, 
          //
          //类型:string
          clientType, 
          //
          //类型:string
          callback, 
          //
          //类型:string
          source, 
          //
          //类型:string
          inviter, __opts) {
          return api.call('ExternalAuthorization', 'Start', {
              provider: provider,
              clientType: clientType,
              callback: callback,
              source: source,
              inviter: inviter
          }, null, __opts);
      },
      //
      //
      Callback: function (
          //
          //类型:string
          id, __opts) {
          return api.call('ExternalAuthorization', 'Callback', {
              id: id
          }, null, __opts);
      },
  };
  //认证
  //
  exports.User = {
      //
      //
      Get: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('User', 'Get', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      Signup: function (
          //
          //类型:CrowdMall.Site.ApiControllers.Models.SignupModel
          user, __opts) {
          return api.call('User', 'Signup', null, user, __opts);
      },
      //
      //
      Current: function (__opts) {
          return api.call('User', 'Current', null, null, __opts);
      },
      //
      //
      GetById: function (
          //
          //类型:int
          id, __opts) {
          return api.call('User', 'GetById', {
              id: id
          }, null, __opts);
      },
      //
      //
      SignupSendTokenMessage: function (
          //
          //类型:string
          phoneNumber, __opts) {
          return api.call('User', 'SignupSendTokenMessage', {
              phoneNumber: phoneNumber
          }, {}, __opts);
      },
      //
      //
      SignupVerifyCode: function (
          //
          //类型:string
          phoneNumber, 
          //
          //类型:string
          token, __opts) {
          return api.call('User', 'SignupVerifyCode', {
              phoneNumber: phoneNumber,
              token: token
          }, {}, __opts);
      },
      //
      //
      ResetPasswordSendTokenMessage: function (
          //
          //类型:string
          phoneNumber, __opts) {
          return api.call('User', 'ResetPasswordSendTokenMessage', {
              phoneNumber: phoneNumber
          }, {}, __opts);
      },
      //
      //
      ResetPassword: function (
          //
          //类型:ServiceProtocol.Web.Auth.Models.ResetPasswordModel
          model, __opts) {
          return api.call('User', 'ResetPassword', null, model, __opts);
      },
      //
      //
      ChangePhoneNumberSendTokenMessage: function (
          //
          //类型:string
          phoneNumber, 
          //
          //类型:string
          captcha, __opts) {
          return api.call('User', 'ChangePhoneNumberSendTokenMessage', {
              phoneNumber: phoneNumber,
              captcha: captcha
          }, {}, __opts);
      },
      //
      //
      ChangePhoneNumber: function (
          //
          //类型:string
          phoneNumber, 
          //
          //类型:string
          token, __opts) {
          return api.call('User', 'ChangePhoneNumber', {
              phoneNumber: phoneNumber,
              token: token
          }, {}, __opts);
      },
      //
      //
      BindPhoneNumberSendTokenMessage: function (
          //
          //类型:string
          phoneNumber, 
          //
          //类型:string
          captcha, __opts) {
          return api.call('User', 'BindPhoneNumberSendTokenMessage', {
              phoneNumber: phoneNumber,
              captcha: captcha
          }, {}, __opts);
      },
      //
      //
      BindPhoneNumber: function (
          //
          //类型:string
          phoneNumber, 
          //
          //类型:string
          token, __opts) {
          return api.call('User', 'BindPhoneNumber', {
              phoneNumber: phoneNumber,
              token: token
          }, {}, __opts);
      },
      //
      //
      CanUnbindIdent: function (
          //
          //类型:int
          IdentType, __opts) {
          return api.call('User', 'CanUnbindIdent', {
              IdentType: IdentType
          }, {}, __opts);
      },
      //
      //
      UnbindIdent: function (
          //
          //类型:int
          IdentType, __opts) {
          return api.call('User', 'UnbindIdent', {
              IdentType: IdentType
          }, {}, __opts);
      },
      //
      //
      Update: function (
          //
          //类型:CrowdMall.Site.ApiControllers.Models.SignupModel
          model, __opts) {
          return api.call('User', 'Update', null, model, __opts);
      },
      //
      //
      SigninBySession: function (
          //
          //类型:string
          session, 
          //
          //类型:string
          jump, __opts) {
          return api.call('User', 'SigninBySession', {
              session: session,
              jump: jump
          }, null, __opts);
      },
      //
      //
      Signin: function (
          //
          //类型:ServiceProtocol.Web.Auth.Models.SigninModel
          model, __opts) {
          return api.call('User', 'Signin', null, model, __opts);
      },
      //
      //
      Signout: function (__opts) {
          return api.call('User', 'Signout', null, {}, __opts);
      },
      //
      //
      SetPassword: function (
          //
          //类型:ServiceProtocol.Web.Auth.Models.SetPasswordModel
          Model, __opts) {
          return api.call('User', 'SetPassword', null, Model, __opts);
      },
      //获取人工输入验证图片
      //返回人工输入验证图片
      Captcha: function (
          //图片宽度
          //类型:int
          width, 
          //图片宽度
          //类型:int
          height, 
          //文字颜色
          //类型:string
          color, 
          //验证目标Api名称
          //类型:string
          target, __opts) {
          return api.call('User', 'Captcha', {
              width: width,
              height: height,
              color: color,
              target: target
          }, null, __opts);
      },
      //
      //
      GetPermissions: function (__opts) {
          return api.call('User', 'GetPermissions', null, null, __opts);
      },
      //
      //
      Frields: function (__opts) {
          return api.call('User', 'Frields', null, null, __opts);
      },
      //
      //
      FrieldCount: function (__opts) {
          return api.call('User', 'FrieldCount', null, null, __opts);
      },
      //
      //
      ExistsWeiXinUser: function (
          //
          //类型:string
          PhoneNumber, __opts) {
          return api.call('User', 'ExistsWeiXinUser', {
              PhoneNumber: PhoneNumber
          }, {}, __opts);
      },
  };
  //云盘服务
  //
  exports.NetDriveService = {
      //
      //
      GetStatus: function (__opts) {
          return api.call('NetDriveService', 'GetStatus', null, null, __opts);
      },
      //
      //
      Get: function (
          //
          //类型:int
          Id, __opts) {
          return api.call('NetDriveService', 'Get', {
              Id: Id
          }, null, __opts);
      },
      //
      //
      CreateDirectory: function (
          //
          //类型:string
          Name, 
          //
          //类型:int
          DirectoryId, __opts) {
          return api.call('NetDriveService', 'CreateDirectory', {
              Name: Name,
              DirectoryId: DirectoryId
          }, null, __opts);
      },
      //
      //
      Upload: function (
          //
          //类型:int
          DirectoryId, __opts) {
          return api.call('NetDriveService', 'Upload', {
              DirectoryId: DirectoryId
          }, {}, __opts);
      },
      //
      //
      Download: function (
          //
          //类型:int
          id, __opts) {
          return api.call('NetDriveService', 'Download', {
              id: id
          }, null, __opts);
      },
      //
      //
      ListByType: function (
          //
          //类型:ServiceProtocol.Biz.NetDrives.ItemType
          Type, __opts) {
          return api.call('NetDriveService', 'ListByType', {
              Type: Type
          }, null, __opts);
      },
      //
      //
      ListChildren: function (
          //
          //类型:int
          DirectoryId, __opts) {
          return api.call('NetDriveService', 'ListChildren', {
              DirectoryId: DirectoryId
          }, null, __opts);
      },
      //
      //
      Find: function (
          //
          //类型:string
          Text, __opts) {
          return api.call('NetDriveService', 'Find', {
              Text: Text
          }, null, __opts);
      },
      //
      //
      Delete: function (
          //
          //类型:int[]
          Ids, __opts) {
          return api.call('NetDriveService', 'Delete', null, Ids, __opts);
      },
      //
      //
      Rename: function (
          //
          //类型:int
          Id, 
          //
          //类型:string
          Name, __opts) {
          return api.call('NetDriveService', 'Rename', {
              Id: Id,
              Name: Name
          }, {}, __opts);
      },
      //
      //
      Move: function (
          //
          //类型:int[]
          Ids, 
          //
          //类型:int
          DstDirectoryId, __opts) {
          return api.call('NetDriveService', 'Move', {
              DstDirectoryId: DstDirectoryId
          }, Ids, __opts);
      },
  };


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global) {/*!
   * Vue.js v1.0.26
   * (c) 2016 Evan You
   * Released under the MIT License.
   */
  'use strict';

  function set(obj, key, val) {
    if (hasOwn(obj, key)) {
      obj[key] = val;
      return;
    }
    if (obj._isVue) {
      set(obj._data, key, val);
      return;
    }
    var ob = obj.__ob__;
    if (!ob) {
      obj[key] = val;
      return;
    }
    ob.convert(key, val);
    ob.dep.notify();
    if (ob.vms) {
      var i = ob.vms.length;
      while (i--) {
        var vm = ob.vms[i];
        vm._proxy(key);
        vm._digest();
      }
    }
    return val;
  }

  /**
   * Delete a property and trigger change if necessary.
   *
   * @param {Object} obj
   * @param {String} key
   */

  function del(obj, key) {
    if (!hasOwn(obj, key)) {
      return;
    }
    delete obj[key];
    var ob = obj.__ob__;
    if (!ob) {
      if (obj._isVue) {
        delete obj._data[key];
        obj._digest();
      }
      return;
    }
    ob.dep.notify();
    if (ob.vms) {
      var i = ob.vms.length;
      while (i--) {
        var vm = ob.vms[i];
        vm._unproxy(key);
        vm._digest();
      }
    }
  }

  var hasOwnProperty = Object.prototype.hasOwnProperty;
  /**
   * Check whether the object has the property.
   *
   * @param {Object} obj
   * @param {String} key
   * @return {Boolean}
   */

  function hasOwn(obj, key) {
    return hasOwnProperty.call(obj, key);
  }

  /**
   * Check if an expression is a literal value.
   *
   * @param {String} exp
   * @return {Boolean}
   */

  var literalValueRE = /^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/;

  function isLiteral(exp) {
    return literalValueRE.test(exp);
  }

  /**
   * Check if a string starts with $ or _
   *
   * @param {String} str
   * @return {Boolean}
   */

  function isReserved(str) {
    var c = (str + '').charCodeAt(0);
    return c === 0x24 || c === 0x5F;
  }

  /**
   * Guard text output, make sure undefined outputs
   * empty string
   *
   * @param {*} value
   * @return {String}
   */

  function _toString(value) {
    return value == null ? '' : value.toString();
  }

  /**
   * Check and convert possible numeric strings to numbers
   * before setting back to data
   *
   * @param {*} value
   * @return {*|Number}
   */

  function toNumber(value) {
    if (typeof value !== 'string') {
      return value;
    } else {
      var parsed = Number(value);
      return isNaN(parsed) ? value : parsed;
    }
  }

  /**
   * Convert string boolean literals into real booleans.
   *
   * @param {*} value
   * @return {*|Boolean}
   */

  function toBoolean(value) {
    return value === 'true' ? true : value === 'false' ? false : value;
  }

  /**
   * Strip quotes from a string
   *
   * @param {String} str
   * @return {String | false}
   */

  function stripQuotes(str) {
    var a = str.charCodeAt(0);
    var b = str.charCodeAt(str.length - 1);
    return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;
  }

  /**
   * Camelize a hyphen-delmited string.
   *
   * @param {String} str
   * @return {String}
   */

  var camelizeRE = /-(\w)/g;

  function camelize(str) {
    return str.replace(camelizeRE, toUpper);
  }

  function toUpper(_, c) {
    return c ? c.toUpperCase() : '';
  }

  /**
   * Hyphenate a camelCase string.
   *
   * @param {String} str
   * @return {String}
   */

  var hyphenateRE = /([a-z\d])([A-Z])/g;

  function hyphenate(str) {
    return str.replace(hyphenateRE, '$1-$2').toLowerCase();
  }

  /**
   * Converts hyphen/underscore/slash delimitered names into
   * camelized classNames.
   *
   * e.g. my-component => MyComponent
   *      some_else    => SomeElse
   *      some/comp    => SomeComp
   *
   * @param {String} str
   * @return {String}
   */

  var classifyRE = /(?:^|[-_\/])(\w)/g;

  function classify(str) {
    return str.replace(classifyRE, toUpper);
  }

  /**
   * Simple bind, faster than native
   *
   * @param {Function} fn
   * @param {Object} ctx
   * @return {Function}
   */

  function bind(fn, ctx) {
    return function (a) {
      var l = arguments.length;
      return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
    };
  }

  /**
   * Convert an Array-like object to a real Array.
   *
   * @param {Array-like} list
   * @param {Number} [start] - start index
   * @return {Array}
   */

  function toArray(list, start) {
    start = start || 0;
    var i = list.length - start;
    var ret = new Array(i);
    while (i--) {
      ret[i] = list[i + start];
    }
    return ret;
  }

  /**
   * Mix properties into target object.
   *
   * @param {Object} to
   * @param {Object} from
   */

  function extend(to, from) {
    var keys = Object.keys(from);
    var i = keys.length;
    while (i--) {
      to[keys[i]] = from[keys[i]];
    }
    return to;
  }

  /**
   * Quick object check - this is primarily used to tell
   * Objects from primitive values when we know the value
   * is a JSON-compliant type.
   *
   * @param {*} obj
   * @return {Boolean}
   */

  function isObject(obj) {
    return obj !== null && typeof obj === 'object';
  }

  /**
   * Strict object type check. Only returns true
   * for plain JavaScript objects.
   *
   * @param {*} obj
   * @return {Boolean}
   */

  var toString = Object.prototype.toString;
  var OBJECT_STRING = '[object Object]';

  function isPlainObject(obj) {
    return toString.call(obj) === OBJECT_STRING;
  }

  /**
   * Array type check.
   *
   * @param {*} obj
   * @return {Boolean}
   */

  var isArray = Array.isArray;

  /**
   * Define a property.
   *
   * @param {Object} obj
   * @param {String} key
   * @param {*} val
   * @param {Boolean} [enumerable]
   */

  function def(obj, key, val, enumerable) {
    Object.defineProperty(obj, key, {
      value: val,
      enumerable: !!enumerable,
      writable: true,
      configurable: true
    });
  }

  /**
   * Debounce a function so it only gets called after the
   * input stops arriving after the given wait period.
   *
   * @param {Function} func
   * @param {Number} wait
   * @return {Function} - the debounced function
   */

  function _debounce(func, wait) {
    var timeout, args, context, timestamp, result;
    var later = function later() {
      var last = Date.now() - timestamp;
      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      }
    };
    return function () {
      context = this;
      args = arguments;
      timestamp = Date.now();
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      return result;
    };
  }

  /**
   * Manual indexOf because it's slightly faster than
   * native.
   *
   * @param {Array} arr
   * @param {*} obj
   */

  function indexOf(arr, obj) {
    var i = arr.length;
    while (i--) {
      if (arr[i] === obj) return i;
    }
    return -1;
  }

  /**
   * Make a cancellable version of an async callback.
   *
   * @param {Function} fn
   * @return {Function}
   */

  function cancellable(fn) {
    var cb = function cb() {
      if (!cb.cancelled) {
        return fn.apply(this, arguments);
      }
    };
    cb.cancel = function () {
      cb.cancelled = true;
    };
    return cb;
  }

  /**
   * Check if two values are loosely equal - that is,
   * if they are plain objects, do they have the same shape?
   *
   * @param {*} a
   * @param {*} b
   * @return {Boolean}
   */

  function looseEqual(a, b) {
    /* eslint-disable eqeqeq */
    return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);
    /* eslint-enable eqeqeq */
  }

  var hasProto = ('__proto__' in {});

  // Browser environment sniffing
  var inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';

  // detect devtools
  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

  // UA sniffing for working around browser-specific quirks
  var UA = inBrowser && window.navigator.userAgent.toLowerCase();
  var isIE = UA && UA.indexOf('trident') > 0;
  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
  var isAndroid = UA && UA.indexOf('android') > 0;
  var isIos = UA && /(iphone|ipad|ipod|ios)/i.test(UA);
  var iosVersionMatch = isIos && UA.match(/os ([\d_]+)/);
  var iosVersion = iosVersionMatch && iosVersionMatch[1].split('_');

  // detecting iOS UIWebView by indexedDB
  var hasMutationObserverBug = iosVersion && Number(iosVersion[0]) >= 9 && Number(iosVersion[1]) >= 3 && !window.indexedDB;

  var transitionProp = undefined;
  var transitionEndEvent = undefined;
  var animationProp = undefined;
  var animationEndEvent = undefined;

  // Transition property/event sniffing
  if (inBrowser && !isIE9) {
    var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;
    var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;
    transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';
    transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';
    animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';
    animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';
  }

  /**
   * Defer a task to execute it asynchronously. Ideally this
   * should be executed as a microtask, so we leverage
   * MutationObserver if it's available, and fallback to
   * setTimeout(0).
   *
   * @param {Function} cb
   * @param {Object} ctx
   */

  var nextTick = (function () {
    var callbacks = [];
    var pending = false;
    var timerFunc;
    function nextTickHandler() {
      pending = false;
      var copies = callbacks.slice(0);
      callbacks = [];
      for (var i = 0; i < copies.length; i++) {
        copies[i]();
      }
    }

    /* istanbul ignore if */
    if (typeof MutationObserver !== 'undefined' && !hasMutationObserverBug) {
      var counter = 1;
      var observer = new MutationObserver(nextTickHandler);
      var textNode = document.createTextNode(counter);
      observer.observe(textNode, {
        characterData: true
      });
      timerFunc = function () {
        counter = (counter + 1) % 2;
        textNode.data = counter;
      };
    } else {
      // webpack attempts to inject a shim for setImmediate
      // if it is used as a global, so we have to work around that to
      // avoid bundling unnecessary code.
      var context = inBrowser ? window : typeof global !== 'undefined' ? global : {};
      timerFunc = context.setImmediate || setTimeout;
    }
    return function (cb, ctx) {
      var func = ctx ? function () {
        cb.call(ctx);
      } : cb;
      callbacks.push(func);
      if (pending) return;
      pending = true;
      timerFunc(nextTickHandler, 0);
    };
  })();

  var _Set = undefined;
  /* istanbul ignore if */
  if (typeof Set !== 'undefined' && Set.toString().match(/native code/)) {
    // use native Set when available.
    _Set = Set;
  } else {
    // a non-standard Set polyfill that only works with primitive keys.
    _Set = function () {
      this.set = Object.create(null);
    };
    _Set.prototype.has = function (key) {
      return this.set[key] !== undefined;
    };
    _Set.prototype.add = function (key) {
      this.set[key] = 1;
    };
    _Set.prototype.clear = function () {
      this.set = Object.create(null);
    };
  }

  function Cache(limit) {
    this.size = 0;
    this.limit = limit;
    this.head = this.tail = undefined;
    this._keymap = Object.create(null);
  }

  var p = Cache.prototype;

  /**
   * Put <value> into the cache associated with <key>.
   * Returns the entry which was removed to make room for
   * the new entry. Otherwise undefined is returned.
   * (i.e. if there was enough room already).
   *
   * @param {String} key
   * @param {*} value
   * @return {Entry|undefined}
   */

  p.put = function (key, value) {
    var removed;

    var entry = this.get(key, true);
    if (!entry) {
      if (this.size === this.limit) {
        removed = this.shift();
      }
      entry = {
        key: key
      };
      this._keymap[key] = entry;
      if (this.tail) {
        this.tail.newer = entry;
        entry.older = this.tail;
      } else {
        this.head = entry;
      }
      this.tail = entry;
      this.size++;
    }
    entry.value = value;

    return removed;
  };

  /**
   * Purge the least recently used (oldest) entry from the
   * cache. Returns the removed entry or undefined if the
   * cache was empty.
   */

  p.shift = function () {
    var entry = this.head;
    if (entry) {
      this.head = this.head.newer;
      this.head.older = undefined;
      entry.newer = entry.older = undefined;
      this._keymap[entry.key] = undefined;
      this.size--;
    }
    return entry;
  };

  /**
   * Get and register recent use of <key>. Returns the value
   * associated with <key> or undefined if not in cache.
   *
   * @param {String} key
   * @param {Boolean} returnEntry
   * @return {Entry|*}
   */

  p.get = function (key, returnEntry) {
    var entry = this._keymap[key];
    if (entry === undefined) return;
    if (entry === this.tail) {
      return returnEntry ? entry : entry.value;
    }
    // HEAD--------------TAIL
    //   <.older   .newer>
    //  <--- add direction --
    //   A  B  C  <D>  E
    if (entry.newer) {
      if (entry === this.head) {
        this.head = entry.newer;
      }
      entry.newer.older = entry.older; // C <-- E.
    }
    if (entry.older) {
      entry.older.newer = entry.newer; // C. --> E
    }
    entry.newer = undefined; // D --x
    entry.older = this.tail; // D. --> E
    if (this.tail) {
      this.tail.newer = entry; // E. <-- D
    }
    this.tail = entry;
    return returnEntry ? entry : entry.value;
  };

  var cache$1 = new Cache(1000);
  var filterTokenRE = /[^\s'"]+|'[^']*'|"[^"]*"/g;
  var reservedArgRE = /^in$|^-?\d+/;

  /**
   * Parser state
   */

  var str;
  var dir;
  var c;
  var prev;
  var i;
  var l;
  var lastFilterIndex;
  var inSingle;
  var inDouble;
  var curly;
  var square;
  var paren;
  /**
   * Push a filter to the current directive object
   */

  function pushFilter() {
    var exp = str.slice(lastFilterIndex, i).trim();
    var filter;
    if (exp) {
      filter = {};
      var tokens = exp.match(filterTokenRE);
      filter.name = tokens[0];
      if (tokens.length > 1) {
        filter.args = tokens.slice(1).map(processFilterArg);
      }
    }
    if (filter) {
      (dir.filters = dir.filters || []).push(filter);
    }
    lastFilterIndex = i + 1;
  }

  /**
   * Check if an argument is dynamic and strip quotes.
   *
   * @param {String} arg
   * @return {Object}
   */

  function processFilterArg(arg) {
    if (reservedArgRE.test(arg)) {
      return {
        value: toNumber(arg),
        dynamic: false
      };
    } else {
      var stripped = stripQuotes(arg);
      var dynamic = stripped === arg;
      return {
        value: dynamic ? arg : stripped,
        dynamic: dynamic
      };
    }
  }

  /**
   * Parse a directive value and extract the expression
   * and its filters into a descriptor.
   *
   * Example:
   *
   * "a + 1 | uppercase" will yield:
   * {
   *   expression: 'a + 1',
   *   filters: [
   *     { name: 'uppercase', args: null }
   *   ]
   * }
   *
   * @param {String} s
   * @return {Object}
   */

  function parseDirective(s) {
    var hit = cache$1.get(s);
    if (hit) {
      return hit;
    }

    // reset parser state
    str = s;
    inSingle = inDouble = false;
    curly = square = paren = 0;
    lastFilterIndex = 0;
    dir = {};

    for (i = 0, l = str.length; i < l; i++) {
      prev = c;
      c = str.charCodeAt(i);
      if (inSingle) {
        // check single quote
        if (c === 0x27 && prev !== 0x5C) inSingle = !inSingle;
      } else if (inDouble) {
        // check double quote
        if (c === 0x22 && prev !== 0x5C) inDouble = !inDouble;
      } else if (c === 0x7C && // pipe
      str.charCodeAt(i + 1) !== 0x7C && str.charCodeAt(i - 1) !== 0x7C) {
        if (dir.expression == null) {
          // first filter, end of expression
          lastFilterIndex = i + 1;
          dir.expression = str.slice(0, i).trim();
        } else {
          // already has filter
          pushFilter();
        }
      } else {
        switch (c) {
          case 0x22:
            inDouble = true;break; // "
          case 0x27:
            inSingle = true;break; // '
          case 0x28:
            paren++;break; // (
          case 0x29:
            paren--;break; // )
          case 0x5B:
            square++;break; // [
          case 0x5D:
            square--;break; // ]
          case 0x7B:
            curly++;break; // {
          case 0x7D:
            curly--;break; // }
        }
      }
    }

    if (dir.expression == null) {
      dir.expression = str.slice(0, i).trim();
    } else if (lastFilterIndex !== 0) {
      pushFilter();
    }

    cache$1.put(s, dir);
    return dir;
  }

  var directive = Object.freeze({
    parseDirective: parseDirective
  });

  var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
  var cache = undefined;
  var tagRE = undefined;
  var htmlRE = undefined;
  /**
   * Escape a string so it can be used in a RegExp
   * constructor.
   *
   * @param {String} str
   */

  function escapeRegex(str) {
    return str.replace(regexEscapeRE, '\\$&');
  }

  function compileRegex() {
    var open = escapeRegex(config.delimiters[0]);
    var close = escapeRegex(config.delimiters[1]);
    var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);
    var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);
    tagRE = new RegExp(unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\n)+?)' + close, 'g');
    htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '$');
    // reset cache
    cache = new Cache(1000);
  }

  /**
   * Parse a template text string into an array of tokens.
   *
   * @param {String} text
   * @return {Array<Object> | null}
   *               - {String} type
   *               - {String} value
   *               - {Boolean} [html]
   *               - {Boolean} [oneTime]
   */

  function parseText(text) {
    if (!cache) {
      compileRegex();
    }
    var hit = cache.get(text);
    if (hit) {
      return hit;
    }
    if (!tagRE.test(text)) {
      return null;
    }
    var tokens = [];
    var lastIndex = tagRE.lastIndex = 0;
    var match, index, html, value, first, oneTime;
    /* eslint-disable no-cond-assign */
    while (match = tagRE.exec(text)) {
      /* eslint-enable no-cond-assign */
      index = match.index;
      // push text token
      if (index > lastIndex) {
        tokens.push({
          value: text.slice(lastIndex, index)
        });
      }
      // tag token
      html = htmlRE.test(match[0]);
      value = html ? match[1] : match[2];
      first = value.charCodeAt(0);
      oneTime = first === 42; // *
      value = oneTime ? value.slice(1) : value;
      tokens.push({
        tag: true,
        value: value.trim(),
        html: html,
        oneTime: oneTime
      });
      lastIndex = index + match[0].length;
    }
    if (lastIndex < text.length) {
      tokens.push({
        value: text.slice(lastIndex)
      });
    }
    cache.put(text, tokens);
    return tokens;
  }

  /**
   * Format a list of tokens into an expression.
   * e.g. tokens parsed from 'a {{b}} c' can be serialized
   * into one single expression as '"a " + b + " c"'.
   *
   * @param {Array} tokens
   * @param {Vue} [vm]
   * @return {String}
   */

  function tokensToExp(tokens, vm) {
    if (tokens.length > 1) {
      return tokens.map(function (token) {
        return formatToken(token, vm);
      }).join('+');
    } else {
      return formatToken(tokens[0], vm, true);
    }
  }

  /**
   * Format a single token.
   *
   * @param {Object} token
   * @param {Vue} [vm]
   * @param {Boolean} [single]
   * @return {String}
   */

  function formatToken(token, vm, single) {
    return token.tag ? token.oneTime && vm ? '"' + vm.$eval(token.value) + '"' : inlineFilters(token.value, single) : '"' + token.value + '"';
  }

  /**
   * For an attribute with multiple interpolation tags,
   * e.g. attr="some-{{thing | filter}}", in order to combine
   * the whole thing into a single watchable expression, we
   * have to inline those filters. This function does exactly
   * that. This is a bit hacky but it avoids heavy changes
   * to directive parser and watcher mechanism.
   *
   * @param {String} exp
   * @param {Boolean} single
   * @return {String}
   */

  var filterRE = /[^|]\|[^|]/;
  function inlineFilters(exp, single) {
    if (!filterRE.test(exp)) {
      return single ? exp : '(' + exp + ')';
    } else {
      var dir = parseDirective(exp);
      if (!dir.filters) {
        return '(' + exp + ')';
      } else {
        return 'this._applyFilters(' + dir.expression + // value
        ',null,' + // oldValue (null for read)
        JSON.stringify(dir.filters) + // filter descriptors
        ',false)'; // write?
      }
    }
  }

  var text = Object.freeze({
    compileRegex: compileRegex,
    parseText: parseText,
    tokensToExp: tokensToExp
  });

  var delimiters = ['{{', '}}'];
  var unsafeDelimiters = ['{{{', '}}}'];

  var config = Object.defineProperties({

    /**
     * Whether to print debug messages.
     * Also enables stack trace for warnings.
     *
     * @type {Boolean}
     */

    debug: false,

    /**
     * Whether to suppress warnings.
     *
     * @type {Boolean}
     */

    silent: false,

    /**
     * Whether to use async rendering.
     */

    async: true,

    /**
     * Whether to warn against errors caught when evaluating
     * expressions.
     */

    warnExpressionErrors: true,

    /**
     * Whether to allow devtools inspection.
     * Disabled by default in production builds.
     */

    devtools: ("development") !== 'production',

    /**
     * Internal flag to indicate the delimiters have been
     * changed.
     *
     * @type {Boolean}
     */

    _delimitersChanged: true,

    /**
     * List of asset types that a component can own.
     *
     * @type {Array}
     */

    _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],

    /**
     * prop binding modes
     */

    _propBindingModes: {
      ONE_WAY: 0,
      TWO_WAY: 1,
      ONE_TIME: 2
    },

    /**
     * Max circular updates allowed in a batcher flush cycle.
     */

    _maxUpdateCount: 100

  }, {
    delimiters: { /**
                   * Interpolation delimiters. Changing these would trigger
                   * the text parser to re-compile the regular expressions.
                   *
                   * @type {Array<String>}
                   */

      get: function get() {
        return delimiters;
      },
      set: function set(val) {
        delimiters = val;
        compileRegex();
      },
      configurable: true,
      enumerable: true
    },
    unsafeDelimiters: {
      get: function get() {
        return unsafeDelimiters;
      },
      set: function set(val) {
        unsafeDelimiters = val;
        compileRegex();
      },
      configurable: true,
      enumerable: true
    }
  });

  var warn = undefined;
  var formatComponentName = undefined;

  if (true) {
    (function () {
      var hasConsole = typeof console !== 'undefined';

      warn = function (msg, vm) {
        if (hasConsole && !config.silent) {
          console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));
        }
      };

      formatComponentName = function (vm) {
        var name = vm._isVue ? vm.$options.name : vm.name;
        return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';
      };
    })();
  }

  /**
   * Append with transition.
   *
   * @param {Element} el
   * @param {Element} target
   * @param {Vue} vm
   * @param {Function} [cb]
   */

  function appendWithTransition(el, target, vm, cb) {
    applyTransition(el, 1, function () {
      target.appendChild(el);
    }, vm, cb);
  }

  /**
   * InsertBefore with transition.
   *
   * @param {Element} el
   * @param {Element} target
   * @param {Vue} vm
   * @param {Function} [cb]
   */

  function beforeWithTransition(el, target, vm, cb) {
    applyTransition(el, 1, function () {
      before(el, target);
    }, vm, cb);
  }

  /**
   * Remove with transition.
   *
   * @param {Element} el
   * @param {Vue} vm
   * @param {Function} [cb]
   */

  function removeWithTransition(el, vm, cb) {
    applyTransition(el, -1, function () {
      remove(el);
    }, vm, cb);
  }

  /**
   * Apply transitions with an operation callback.
   *
   * @param {Element} el
   * @param {Number} direction
   *                  1: enter
   *                 -1: leave
   * @param {Function} op - the actual DOM operation
   * @param {Vue} vm
   * @param {Function} [cb]
   */

  function applyTransition(el, direction, op, vm, cb) {
    var transition = el.__v_trans;
    if (!transition ||
    // skip if there are no js hooks and CSS transition is
    // not supported
    !transition.hooks && !transitionEndEvent ||
    // skip transitions for initial compile
    !vm._isCompiled ||
    // if the vm is being manipulated by a parent directive
    // during the parent's compilation phase, skip the
    // animation.
    vm.$parent && !vm.$parent._isCompiled) {
      op();
      if (cb) cb();
      return;
    }
    var action = direction > 0 ? 'enter' : 'leave';
    transition[action](op, cb);
  }

  var transition = Object.freeze({
    appendWithTransition: appendWithTransition,
    beforeWithTransition: beforeWithTransition,
    removeWithTransition: removeWithTransition,
    applyTransition: applyTransition
  });

  /**
   * Query an element selector if it's not an element already.
   *
   * @param {String|Element} el
   * @return {Element}
   */

  function query(el) {
    if (typeof el === 'string') {
      var selector = el;
      el = document.querySelector(el);
      if (!el) {
        ("development") !== 'production' && warn('Cannot find element: ' + selector);
      }
    }
    return el;
  }

  /**
   * Check if a node is in the document.
   * Note: document.documentElement.contains should work here
   * but always returns false for comment nodes in phantomjs,
   * making unit tests difficult. This is fixed by doing the
   * contains() check on the node's parentNode instead of
   * the node itself.
   *
   * @param {Node} node
   * @return {Boolean}
   */

  function inDoc(node) {
    if (!node) return false;
    var doc = node.ownerDocument.documentElement;
    var parent = node.parentNode;
    return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));
  }

  /**
   * Get and remove an attribute from a node.
   *
   * @param {Node} node
   * @param {String} _attr
   */

  function getAttr(node, _attr) {
    var val = node.getAttribute(_attr);
    if (val !== null) {
      node.removeAttribute(_attr);
    }
    return val;
  }

  /**
   * Get an attribute with colon or v-bind: prefix.
   *
   * @param {Node} node
   * @param {String} name
   * @return {String|null}
   */

  function getBindAttr(node, name) {
    var val = getAttr(node, ':' + name);
    if (val === null) {
      val = getAttr(node, 'v-bind:' + name);
    }
    return val;
  }

  /**
   * Check the presence of a bind attribute.
   *
   * @param {Node} node
   * @param {String} name
   * @return {Boolean}
   */

  function hasBindAttr(node, name) {
    return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);
  }

  /**
   * Insert el before target
   *
   * @param {Element} el
   * @param {Element} target
   */

  function before(el, target) {
    target.parentNode.insertBefore(el, target);
  }

  /**
   * Insert el after target
   *
   * @param {Element} el
   * @param {Element} target
   */

  function after(el, target) {
    if (target.nextSibling) {
      before(el, target.nextSibling);
    } else {
      target.parentNode.appendChild(el);
    }
  }

  /**
   * Remove el from DOM
   *
   * @param {Element} el
   */

  function remove(el) {
    el.parentNode.removeChild(el);
  }

  /**
   * Prepend el to target
   *
   * @param {Element} el
   * @param {Element} target
   */

  function prepend(el, target) {
    if (target.firstChild) {
      before(el, target.firstChild);
    } else {
      target.appendChild(el);
    }
  }

  /**
   * Replace target with el
   *
   * @param {Element} target
   * @param {Element} el
   */

  function replace(target, el) {
    var parent = target.parentNode;
    if (parent) {
      parent.replaceChild(el, target);
    }
  }

  /**
   * Add event listener shorthand.
   *
   * @param {Element} el
   * @param {String} event
   * @param {Function} cb
   * @param {Boolean} [useCapture]
   */

  function on(el, event, cb, useCapture) {
    el.addEventListener(event, cb, useCapture);
  }

  /**
   * Remove event listener shorthand.
   *
   * @param {Element} el
   * @param {String} event
   * @param {Function} cb
   */

  function off(el, event, cb) {
    el.removeEventListener(event, cb);
  }

  /**
   * For IE9 compat: when both class and :class are present
   * getAttribute('class') returns wrong value...
   *
   * @param {Element} el
   * @return {String}
   */

  function getClass(el) {
    var classname = el.className;
    if (typeof classname === 'object') {
      classname = classname.baseVal || '';
    }
    return classname;
  }

  /**
   * In IE9, setAttribute('class') will result in empty class
   * if the element also has the :class attribute; However in
   * PhantomJS, setting `className` does not work on SVG elements...
   * So we have to do a conditional check here.
   *
   * @param {Element} el
   * @param {String} cls
   */

  function setClass(el, cls) {
    /* istanbul ignore if */
    if (isIE9 && !/svg$/.test(el.namespaceURI)) {
      el.className = cls;
    } else {
      el.setAttribute('class', cls);
    }
  }

  /**
   * Add class with compatibility for IE & SVG
   *
   * @param {Element} el
   * @param {String} cls
   */

  function addClass(el, cls) {
    if (el.classList) {
      el.classList.add(cls);
    } else {
      var cur = ' ' + getClass(el) + ' ';
      if (cur.indexOf(' ' + cls + ' ') < 0) {
        setClass(el, (cur + cls).trim());
      }
    }
  }

  /**
   * Remove class with compatibility for IE & SVG
   *
   * @param {Element} el
   * @param {String} cls
   */

  function removeClass(el, cls) {
    if (el.classList) {
      el.classList.remove(cls);
    } else {
      var cur = ' ' + getClass(el) + ' ';
      var tar = ' ' + cls + ' ';
      while (cur.indexOf(tar) >= 0) {
        cur = cur.replace(tar, ' ');
      }
      setClass(el, cur.trim());
    }
    if (!el.className) {
      el.removeAttribute('class');
    }
  }

  /**
   * Extract raw content inside an element into a temporary
   * container div
   *
   * @param {Element} el
   * @param {Boolean} asFragment
   * @return {Element|DocumentFragment}
   */

  function extractContent(el, asFragment) {
    var child;
    var rawContent;
    /* istanbul ignore if */
    if (isTemplate(el) && isFragment(el.content)) {
      el = el.content;
    }
    if (el.hasChildNodes()) {
      trimNode(el);
      rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');
      /* eslint-disable no-cond-assign */
      while (child = el.firstChild) {
        /* eslint-enable no-cond-assign */
        rawContent.appendChild(child);
      }
    }
    return rawContent;
  }

  /**
   * Trim possible empty head/tail text and comment
   * nodes inside a parent.
   *
   * @param {Node} node
   */

  function trimNode(node) {
    var child;
    /* eslint-disable no-sequences */
    while ((child = node.firstChild, isTrimmable(child))) {
      node.removeChild(child);
    }
    while ((child = node.lastChild, isTrimmable(child))) {
      node.removeChild(child);
    }
    /* eslint-enable no-sequences */
  }

  function isTrimmable(node) {
    return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);
  }

  /**
   * Check if an element is a template tag.
   * Note if the template appears inside an SVG its tagName
   * will be in lowercase.
   *
   * @param {Element} el
   */

  function isTemplate(el) {
    return el.tagName && el.tagName.toLowerCase() === 'template';
  }

  /**
   * Create an "anchor" for performing dom insertion/removals.
   * This is used in a number of scenarios:
   * - fragment instance
   * - v-html
   * - v-if
   * - v-for
   * - component
   *
   * @param {String} content
   * @param {Boolean} persist - IE trashes empty textNodes on
   *                            cloneNode(true), so in certain
   *                            cases the anchor needs to be
   *                            non-empty to be persisted in
   *                            templates.
   * @return {Comment|Text}
   */

  function createAnchor(content, persist) {
    var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');
    anchor.__v_anchor = true;
    return anchor;
  }

  /**
   * Find a component ref attribute that starts with $.
   *
   * @param {Element} node
   * @return {String|undefined}
   */

  var refRE = /^v-ref:/;

  function findRef(node) {
    if (node.hasAttributes()) {
      var attrs = node.attributes;
      for (var i = 0, l = attrs.length; i < l; i++) {
        var name = attrs[i].name;
        if (refRE.test(name)) {
          return camelize(name.replace(refRE, ''));
        }
      }
    }
  }

  /**
   * Map a function to a range of nodes .
   *
   * @param {Node} node
   * @param {Node} end
   * @param {Function} op
   */

  function mapNodeRange(node, end, op) {
    var next;
    while (node !== end) {
      next = node.nextSibling;
      op(node);
      node = next;
    }
    op(end);
  }

  /**
   * Remove a range of nodes with transition, store
   * the nodes in a fragment with correct ordering,
   * and call callback when done.
   *
   * @param {Node} start
   * @param {Node} end
   * @param {Vue} vm
   * @param {DocumentFragment} frag
   * @param {Function} cb
   */

  function removeNodeRange(start, end, vm, frag, cb) {
    var done = false;
    var removed = 0;
    var nodes = [];
    mapNodeRange(start, end, function (node) {
      if (node === end) done = true;
      nodes.push(node);
      removeWithTransition(node, vm, onRemoved);
    });
    function onRemoved() {
      removed++;
      if (done && removed >= nodes.length) {
        for (var i = 0; i < nodes.length; i++) {
          frag.appendChild(nodes[i]);
        }
        cb && cb();
      }
    }
  }

  /**
   * Check if a node is a DocumentFragment.
   *
   * @param {Node} node
   * @return {Boolean}
   */

  function isFragment(node) {
    return node && node.nodeType === 11;
  }

  /**
   * Get outerHTML of elements, taking care
   * of SVG elements in IE as well.
   *
   * @param {Element} el
   * @return {String}
   */

  function getOuterHTML(el) {
    if (el.outerHTML) {
      return el.outerHTML;
    } else {
      var container = document.createElement('div');
      container.appendChild(el.cloneNode(true));
      return container.innerHTML;
    }
  }

  var commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;
  var reservedTagRE = /^(slot|partial|component)$/i;

  var isUnknownElement = undefined;
  if (true) {
    isUnknownElement = function (el, tag) {
      if (tag.indexOf('-') > -1) {
        // http://stackoverflow.com/a/28210364/1070244
        return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
      } else {
        return (/HTMLUnknownElement/.test(el.toString()) &&
          // Chrome returns unknown for several HTML5 elements.
          // https://code.google.com/p/chromium/issues/detail?id=540526
          // Firefox returns unknown for some "Interactive elements."
          !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)
        );
      }
    };
  }

  /**
   * Check if an element is a component, if yes return its
   * component id.
   *
   * @param {Element} el
   * @param {Object} options
   * @return {Object|undefined}
   */

  function checkComponentAttr(el, options) {
    var tag = el.tagName.toLowerCase();
    var hasAttrs = el.hasAttributes();
    if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {
      if (resolveAsset(options, 'components', tag)) {
        return { id: tag };
      } else {
        var is = hasAttrs && getIsBinding(el, options);
        if (is) {
          return is;
        } else if (true) {
          var expectedTag = options._componentNameMap && options._componentNameMap[tag];
          if (expectedTag) {
            warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');
          } else if (isUnknownElement(el, tag)) {
            warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.');
          }
        }
      }
    } else if (hasAttrs) {
      return getIsBinding(el, options);
    }
  }

  /**
   * Get "is" binding from an element.
   *
   * @param {Element} el
   * @param {Object} options
   * @return {Object|undefined}
   */

  function getIsBinding(el, options) {
    // dynamic syntax
    var exp = el.getAttribute('is');
    if (exp != null) {
      if (resolveAsset(options, 'components', exp)) {
        el.removeAttribute('is');
        return { id: exp };
      }
    } else {
      exp = getBindAttr(el, 'is');
      if (exp != null) {
        return { id: exp, dynamic: true };
      }
    }
  }

  /**
   * Option overwriting strategies are functions that handle
   * how to merge a parent option value and a child option
   * value into the final value.
   *
   * All strategy functions follow the same signature:
   *
   * @param {*} parentVal
   * @param {*} childVal
   * @param {Vue} [vm]
   */

  var strats = config.optionMergeStrategies = Object.create(null);

  /**
   * Helper that recursively merges two data objects together.
   */

  function mergeData(to, from) {
    var key, toVal, fromVal;
    for (key in from) {
      toVal = to[key];
      fromVal = from[key];
      if (!hasOwn(to, key)) {
        set(to, key, fromVal);
      } else if (isObject(toVal) && isObject(fromVal)) {
        mergeData(toVal, fromVal);
      }
    }
    return to;
  }

  /**
   * Data
   */

  strats.data = function (parentVal, childVal, vm) {
    if (!vm) {
      // in a Vue.extend merge, both should be functions
      if (!childVal) {
        return parentVal;
      }
      if (typeof childVal !== 'function') {
        ("development") !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
        return parentVal;
      }
      if (!parentVal) {
        return childVal;
      }
      // when parentVal & childVal are both present,
      // we need to return a function that returns the
      // merged result of both functions... no need to
      // check if parentVal is a function here because
      // it has to be a function to pass previous merges.
      return function mergedDataFn() {
        return mergeData(childVal.call(this), parentVal.call(this));
      };
    } else if (parentVal || childVal) {
      return function mergedInstanceDataFn() {
        // instance merge
        var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;
        var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;
        if (instanceData) {
          return mergeData(instanceData, defaultData);
        } else {
          return defaultData;
        }
      };
    }
  };

  /**
   * El
   */

  strats.el = function (parentVal, childVal, vm) {
    if (!vm && childVal && typeof childVal !== 'function') {
      ("development") !== 'production' && warn('The "el" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return;
    }
    var ret = childVal || parentVal;
    // invoke the element factory if this is instance merge
    return vm && typeof ret === 'function' ? ret.call(vm) : ret;
  };

  /**
   * Hooks and param attributes are merged as arrays.
   */

  strats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {
    return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;
  };

  /**
   * Assets
   *
   * When a vm is present (instance creation), we need to do
   * a three-way merge between constructor options, instance
   * options and parent options.
   */

  function mergeAssets(parentVal, childVal) {
    var res = Object.create(parentVal || null);
    return childVal ? extend(res, guardArrayAssets(childVal)) : res;
  }

  config._assetTypes.forEach(function (type) {
    strats[type + 's'] = mergeAssets;
  });

  /**
   * Events & Watchers.
   *
   * Events & watchers hashes should not overwrite one
   * another, so we merge them as arrays.
   */

  strats.watch = strats.events = function (parentVal, childVal) {
    if (!childVal) return parentVal;
    if (!parentVal) return childVal;
    var ret = {};
    extend(ret, parentVal);
    for (var key in childVal) {
      var parent = ret[key];
      var child = childVal[key];
      if (parent && !isArray(parent)) {
        parent = [parent];
      }
      ret[key] = parent ? parent.concat(child) : [child];
    }
    return ret;
  };

  /**
   * Other object hashes.
   */

  strats.props = strats.methods = strats.computed = function (parentVal, childVal) {
    if (!childVal) return parentVal;
    if (!parentVal) return childVal;
    var ret = Object.create(null);
    extend(ret, parentVal);
    extend(ret, childVal);
    return ret;
  };

  /**
   * Default strategy.
   */

  var defaultStrat = function defaultStrat(parentVal, childVal) {
    return childVal === undefined ? parentVal : childVal;
  };

  /**
   * Make sure component options get converted to actual
   * constructors.
   *
   * @param {Object} options
   */

  function guardComponents(options) {
    if (options.components) {
      var components = options.components = guardArrayAssets(options.components);
      var ids = Object.keys(components);
      var def;
      if (true) {
        var map = options._componentNameMap = {};
      }
      for (var i = 0, l = ids.length; i < l; i++) {
        var key = ids[i];
        if (commonTagRE.test(key) || reservedTagRE.test(key)) {
          ("development") !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);
          continue;
        }
        // record a all lowercase <-> kebab-case mapping for
        // possible custom element case error warning
        if (true) {
          map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);
        }
        def = components[key];
        if (isPlainObject(def)) {
          components[key] = Vue.extend(def);
        }
      }
    }
  }

  /**
   * Ensure all props option syntax are normalized into the
   * Object-based format.
   *
   * @param {Object} options
   */

  function guardProps(options) {
    var props = options.props;
    var i, val;
    if (isArray(props)) {
      options.props = {};
      i = props.length;
      while (i--) {
        val = props[i];
        if (typeof val === 'string') {
          options.props[val] = null;
        } else if (val.name) {
          options.props[val.name] = val;
        }
      }
    } else if (isPlainObject(props)) {
      var keys = Object.keys(props);
      i = keys.length;
      while (i--) {
        val = props[keys[i]];
        if (typeof val === 'function') {
          props[keys[i]] = { type: val };
        }
      }
    }
  }

  /**
   * Guard an Array-format assets option and converted it
   * into the key-value Object format.
   *
   * @param {Object|Array} assets
   * @return {Object}
   */

  function guardArrayAssets(assets) {
    if (isArray(assets)) {
      var res = {};
      var i = assets.length;
      var asset;
      while (i--) {
        asset = assets[i];
        var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;
        if (!id) {
          ("development") !== 'production' && warn('Array-syntax assets must provide a "name" or "id" field.');
        } else {
          res[id] = asset;
        }
      }
      return res;
    }
    return assets;
  }

  /**
   * Merge two option objects into a new one.
   * Core utility used in both instantiation and inheritance.
   *
   * @param {Object} parent
   * @param {Object} child
   * @param {Vue} [vm] - if vm is present, indicates this is
   *                     an instantiation merge.
   */

  function mergeOptions(parent, child, vm) {
    guardComponents(child);
    guardProps(child);
    if (true) {
      if (child.propsData && !vm) {
        warn('propsData can only be used as an instantiation option.');
      }
    }
    var options = {};
    var key;
    if (child['extends']) {
      parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        var mixin = child.mixins[i];
        var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;
        parent = mergeOptions(parent, mixinOptions, vm);
      }
    }
    for (key in parent) {
      mergeField(key);
    }
    for (key in child) {
      if (!hasOwn(parent, key)) {
        mergeField(key);
      }
    }
    function mergeField(key) {
      var strat = strats[key] || defaultStrat;
      options[key] = strat(parent[key], child[key], vm, key);
    }
    return options;
  }

  /**
   * Resolve an asset.
   * This function is used because child instances need access
   * to assets defined in its ancestor chain.
   *
   * @param {Object} options
   * @param {String} type
   * @param {String} id
   * @param {Boolean} warnMissing
   * @return {Object|Function}
   */

  function resolveAsset(options, type, id, warnMissing) {
    /* istanbul ignore if */
    if (typeof id !== 'string') {
      return;
    }
    var assets = options[type];
    var camelizedId;
    var res = assets[id] ||
    // camelCase ID
    assets[camelizedId = camelize(id)] ||
    // Pascal Case ID
    assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];
    if (("development") !== 'production' && warnMissing && !res) {
      warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
    }
    return res;
  }

  var uid$1 = 0;

  /**
   * A dep is an observable that can have multiple
   * directives subscribing to it.
   *
   * @constructor
   */
  function Dep() {
    this.id = uid$1++;
    this.subs = [];
  }

  // the current target watcher being evaluated.
  // this is globally unique because there could be only one
  // watcher being evaluated at any time.
  Dep.target = null;

  /**
   * Add a directive subscriber.
   *
   * @param {Directive} sub
   */

  Dep.prototype.addSub = function (sub) {
    this.subs.push(sub);
  };

  /**
   * Remove a directive subscriber.
   *
   * @param {Directive} sub
   */

  Dep.prototype.removeSub = function (sub) {
    this.subs.$remove(sub);
  };

  /**
   * Add self as a dependency to the target watcher.
   */

  Dep.prototype.depend = function () {
    Dep.target.addDep(this);
  };

  /**
   * Notify all subscribers of a new value.
   */

  Dep.prototype.notify = function () {
    // stablize the subscriber list first
    var subs = toArray(this.subs);
    for (var i = 0, l = subs.length; i < l; i++) {
      subs[i].update();
    }
  };

  var arrayProto = Array.prototype;
  var arrayMethods = Object.create(arrayProto)

  /**
   * Intercept mutating methods and emit events
   */

  ;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {
    // cache original method
    var original = arrayProto[method];
    def(arrayMethods, method, function mutator() {
      // avoid leaking arguments:
      // http://jsperf.com/closure-with-arguments
      var i = arguments.length;
      var args = new Array(i);
      while (i--) {
        args[i] = arguments[i];
      }
      var result = original.apply(this, args);
      var ob = this.__ob__;
      var inserted;
      switch (method) {
        case 'push':
          inserted = args;
          break;
        case 'unshift':
          inserted = args;
          break;
        case 'splice':
          inserted = args.slice(2);
          break;
      }
      if (inserted) ob.observeArray(inserted);
      // notify change
      ob.dep.notify();
      return result;
    });
  });

  /**
   * Swap the element at the given index with a new value
   * and emits corresponding event.
   *
   * @param {Number} index
   * @param {*} val
   * @return {*} - replaced element
   */

  def(arrayProto, '$set', function $set(index, val) {
    if (index >= this.length) {
      this.length = Number(index) + 1;
    }
    return this.splice(index, 1, val)[0];
  });

  /**
   * Convenience method to remove the element at given index or target element reference.
   *
   * @param {*} item
   */

  def(arrayProto, '$remove', function $remove(item) {
    /* istanbul ignore if */
    if (!this.length) return;
    var index = indexOf(this, item);
    if (index > -1) {
      return this.splice(index, 1);
    }
  });

  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

  /**
   * By default, when a reactive property is set, the new value is
   * also converted to become reactive. However in certain cases, e.g.
   * v-for scope alias and props, we don't want to force conversion
   * because the value may be a nested value under a frozen data structure.
   *
   * So whenever we want to set a reactive property without forcing
   * conversion on the new value, we wrap that call inside this function.
   */

  var shouldConvert = true;

  function withoutConversion(fn) {
    shouldConvert = false;
    fn();
    shouldConvert = true;
  }

  /**
   * Observer class that are attached to each observed
   * object. Once attached, the observer converts target
   * object's property keys into getter/setters that
   * collect dependencies and dispatches updates.
   *
   * @param {Array|Object} value
   * @constructor
   */

  function Observer(value) {
    this.value = value;
    this.dep = new Dep();
    def(value, '__ob__', this);
    if (isArray(value)) {
      var augment = hasProto ? protoAugment : copyAugment;
      augment(value, arrayMethods, arrayKeys);
      this.observeArray(value);
    } else {
      this.walk(value);
    }
  }

  // Instance methods

  /**
   * Walk through each property and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   *
   * @param {Object} obj
   */

  Observer.prototype.walk = function (obj) {
    var keys = Object.keys(obj);
    for (var i = 0, l = keys.length; i < l; i++) {
      this.convert(keys[i], obj[keys[i]]);
    }
  };

  /**
   * Observe a list of Array items.
   *
   * @param {Array} items
   */

  Observer.prototype.observeArray = function (items) {
    for (var i = 0, l = items.length; i < l; i++) {
      observe(items[i]);
    }
  };

  /**
   * Convert a property into getter/setter so we can emit
   * the events when the property is accessed/changed.
   *
   * @param {String} key
   * @param {*} val
   */

  Observer.prototype.convert = function (key, val) {
    defineReactive(this.value, key, val);
  };

  /**
   * Add an owner vm, so that when $set/$delete mutations
   * happen we can notify owner vms to proxy the keys and
   * digest the watchers. This is only called when the object
   * is observed as an instance's root $data.
   *
   * @param {Vue} vm
   */

  Observer.prototype.addVm = function (vm) {
    (this.vms || (this.vms = [])).push(vm);
  };

  /**
   * Remove an owner vm. This is called when the object is
   * swapped out as an instance's $data object.
   *
   * @param {Vue} vm
   */

  Observer.prototype.removeVm = function (vm) {
    this.vms.$remove(vm);
  };

  // helpers

  /**
   * Augment an target Object or Array by intercepting
   * the prototype chain using __proto__
   *
   * @param {Object|Array} target
   * @param {Object} src
   */

  function protoAugment(target, src) {
    /* eslint-disable no-proto */
    target.__proto__ = src;
    /* eslint-enable no-proto */
  }

  /**
   * Augment an target Object or Array by defining
   * hidden properties.
   *
   * @param {Object|Array} target
   * @param {Object} proto
   */

  function copyAugment(target, src, keys) {
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      def(target, key, src[key]);
    }
  }

  /**
   * Attempt to create an observer instance for a value,
   * returns the new observer if successfully observed,
   * or the existing observer if the value already has one.
   *
   * @param {*} value
   * @param {Vue} [vm]
   * @return {Observer|undefined}
   * @static
   */

  function observe(value, vm) {
    if (!value || typeof value !== 'object') {
      return;
    }
    var ob;
    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
      ob = value.__ob__;
    } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
      ob = new Observer(value);
    }
    if (ob && vm) {
      ob.addVm(vm);
    }
    return ob;
  }

  /**
   * Define a reactive property on an Object.
   *
   * @param {Object} obj
   * @param {String} key
   * @param {*} val
   */

  function defineReactive(obj, key, val) {
    var dep = new Dep();

    var property = Object.getOwnPropertyDescriptor(obj, key);
    if (property && property.configurable === false) {
      return;
    }

    // cater for pre-defined getter/setters
    var getter = property && property.get;
    var setter = property && property.set;

    var childOb = observe(val);
    Object.defineProperty(obj, key, {
      enumerable: true,
      configurable: true,
      get: function reactiveGetter() {
        var value = getter ? getter.call(obj) : val;
        if (Dep.target) {
          dep.depend();
          if (childOb) {
            childOb.dep.depend();
          }
          if (isArray(value)) {
            for (var e, i = 0, l = value.length; i < l; i++) {
              e = value[i];
              e && e.__ob__ && e.__ob__.dep.depend();
            }
          }
        }
        return value;
      },
      set: function reactiveSetter(newVal) {
        var value = getter ? getter.call(obj) : val;
        if (newVal === value) {
          return;
        }
        if (setter) {
          setter.call(obj, newVal);
        } else {
          val = newVal;
        }
        childOb = observe(newVal);
        dep.notify();
      }
    });
  }



  var util = Object.freeze({
  	defineReactive: defineReactive,
  	set: set,
  	del: del,
  	hasOwn: hasOwn,
  	isLiteral: isLiteral,
  	isReserved: isReserved,
  	_toString: _toString,
  	toNumber: toNumber,
  	toBoolean: toBoolean,
  	stripQuotes: stripQuotes,
  	camelize: camelize,
  	hyphenate: hyphenate,
  	classify: classify,
  	bind: bind,
  	toArray: toArray,
  	extend: extend,
  	isObject: isObject,
  	isPlainObject: isPlainObject,
  	def: def,
  	debounce: _debounce,
  	indexOf: indexOf,
  	cancellable: cancellable,
  	looseEqual: looseEqual,
  	isArray: isArray,
  	hasProto: hasProto,
  	inBrowser: inBrowser,
  	devtools: devtools,
  	isIE: isIE,
  	isIE9: isIE9,
  	isAndroid: isAndroid,
  	isIos: isIos,
  	iosVersionMatch: iosVersionMatch,
  	iosVersion: iosVersion,
  	hasMutationObserverBug: hasMutationObserverBug,
  	get transitionProp () { return transitionProp; },
  	get transitionEndEvent () { return transitionEndEvent; },
  	get animationProp () { return animationProp; },
  	get animationEndEvent () { return animationEndEvent; },
  	nextTick: nextTick,
  	get _Set () { return _Set; },
  	query: query,
  	inDoc: inDoc,
  	getAttr: getAttr,
  	getBindAttr: getBindAttr,
  	hasBindAttr: hasBindAttr,
  	before: before,
  	after: after,
  	remove: remove,
  	prepend: prepend,
  	replace: replace,
  	on: on,
  	off: off,
  	setClass: setClass,
  	addClass: addClass,
  	removeClass: removeClass,
  	extractContent: extractContent,
  	trimNode: trimNode,
  	isTemplate: isTemplate,
  	createAnchor: createAnchor,
  	findRef: findRef,
  	mapNodeRange: mapNodeRange,
  	removeNodeRange: removeNodeRange,
  	isFragment: isFragment,
  	getOuterHTML: getOuterHTML,
  	mergeOptions: mergeOptions,
  	resolveAsset: resolveAsset,
  	checkComponentAttr: checkComponentAttr,
  	commonTagRE: commonTagRE,
  	reservedTagRE: reservedTagRE,
  	get warn () { return warn; }
  });

  var uid = 0;

  function initMixin (Vue) {
    /**
     * The main init sequence. This is called for every
     * instance, including ones that are created from extended
     * constructors.
     *
     * @param {Object} options - this options object should be
     *                           the result of merging class
     *                           options and the options passed
     *                           in to the constructor.
     */

    Vue.prototype._init = function (options) {
      options = options || {};

      this.$el = null;
      this.$parent = options.parent;
      this.$root = this.$parent ? this.$parent.$root : this;
      this.$children = [];
      this.$refs = {}; // child vm references
      this.$els = {}; // element references
      this._watchers = []; // all watchers as an array
      this._directives = []; // all directives

      // a uid
      this._uid = uid++;

      // a flag to avoid this being observed
      this._isVue = true;

      // events bookkeeping
      this._events = {}; // registered callbacks
      this._eventsCount = {}; // for $broadcast optimization

      // fragment instance properties
      this._isFragment = false;
      this._fragment = // @type {DocumentFragment}
      this._fragmentStart = // @type {Text|Comment}
      this._fragmentEnd = null; // @type {Text|Comment}

      // lifecycle state
      this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;
      this._unlinkFn = null;

      // context:
      // if this is a transcluded component, context
      // will be the common parent vm of this instance
      // and its host.
      this._context = options._context || this.$parent;

      // scope:
      // if this is inside an inline v-for, the scope
      // will be the intermediate scope created for this
      // repeat fragment. this is used for linking props
      // and container directives.
      this._scope = options._scope;

      // fragment:
      // if this instance is compiled inside a Fragment, it
      // needs to reigster itself as a child of that fragment
      // for attach/detach to work properly.
      this._frag = options._frag;
      if (this._frag) {
        this._frag.children.push(this);
      }

      // push self into parent / transclusion host
      if (this.$parent) {
        this.$parent.$children.push(this);
      }

      // merge options.
      options = this.$options = mergeOptions(this.constructor.options, options, this);

      // set ref
      this._updateRef();

      // initialize data as empty object.
      // it will be filled up in _initData().
      this._data = {};

      // call init hook
      this._callHook('init');

      // initialize data observation and scope inheritance.
      this._initState();

      // setup event system and option events.
      this._initEvents();

      // call created hook
      this._callHook('created');

      // if `el` option is passed, start compilation.
      if (options.el) {
        this.$mount(options.el);
      }
    };
  }

  var pathCache = new Cache(1000);

  // actions
  var APPEND = 0;
  var PUSH = 1;
  var INC_SUB_PATH_DEPTH = 2;
  var PUSH_SUB_PATH = 3;

  // states
  var BEFORE_PATH = 0;
  var IN_PATH = 1;
  var BEFORE_IDENT = 2;
  var IN_IDENT = 3;
  var IN_SUB_PATH = 4;
  var IN_SINGLE_QUOTE = 5;
  var IN_DOUBLE_QUOTE = 6;
  var AFTER_PATH = 7;
  var ERROR = 8;

  var pathStateMachine = [];

  pathStateMachine[BEFORE_PATH] = {
    'ws': [BEFORE_PATH],
    'ident': [IN_IDENT, APPEND],
    '[': [IN_SUB_PATH],
    'eof': [AFTER_PATH]
  };

  pathStateMachine[IN_PATH] = {
    'ws': [IN_PATH],
    '.': [BEFORE_IDENT],
    '[': [IN_SUB_PATH],
    'eof': [AFTER_PATH]
  };

  pathStateMachine[BEFORE_IDENT] = {
    'ws': [BEFORE_IDENT],
    'ident': [IN_IDENT, APPEND]
  };

  pathStateMachine[IN_IDENT] = {
    'ident': [IN_IDENT, APPEND],
    '0': [IN_IDENT, APPEND],
    'number': [IN_IDENT, APPEND],
    'ws': [IN_PATH, PUSH],
    '.': [BEFORE_IDENT, PUSH],
    '[': [IN_SUB_PATH, PUSH],
    'eof': [AFTER_PATH, PUSH]
  };

  pathStateMachine[IN_SUB_PATH] = {
    "'": [IN_SINGLE_QUOTE, APPEND],
    '"': [IN_DOUBLE_QUOTE, APPEND],
    '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
    ']': [IN_PATH, PUSH_SUB_PATH],
    'eof': ERROR,
    'else': [IN_SUB_PATH, APPEND]
  };

  pathStateMachine[IN_SINGLE_QUOTE] = {
    "'": [IN_SUB_PATH, APPEND],
    'eof': ERROR,
    'else': [IN_SINGLE_QUOTE, APPEND]
  };

  pathStateMachine[IN_DOUBLE_QUOTE] = {
    '"': [IN_SUB_PATH, APPEND],
    'eof': ERROR,
    'else': [IN_DOUBLE_QUOTE, APPEND]
  };

  /**
   * Determine the type of a character in a keypath.
   *
   * @param {Char} ch
   * @return {String} type
   */

  function getPathCharType(ch) {
    if (ch === undefined) {
      return 'eof';
    }

    var code = ch.charCodeAt(0);

    switch (code) {
      case 0x5B: // [
      case 0x5D: // ]
      case 0x2E: // .
      case 0x22: // "
      case 0x27: // '
      case 0x30:
        // 0
        return ch;

      case 0x5F: // _
      case 0x24:
        // $
        return 'ident';

      case 0x20: // Space
      case 0x09: // Tab
      case 0x0A: // Newline
      case 0x0D: // Return
      case 0xA0: // No-break space
      case 0xFEFF: // Byte Order Mark
      case 0x2028: // Line Separator
      case 0x2029:
        // Paragraph Separator
        return 'ws';
    }

    // a-z, A-Z
    if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {
      return 'ident';
    }

    // 1-9
    if (code >= 0x31 && code <= 0x39) {
      return 'number';
    }

    return 'else';
  }

  /**
   * Format a subPath, return its plain form if it is
   * a literal string or number. Otherwise prepend the
   * dynamic indicator (*).
   *
   * @param {String} path
   * @return {String}
   */

  function formatSubPath(path) {
    var trimmed = path.trim();
    // invalid leading 0
    if (path.charAt(0) === '0' && isNaN(path)) {
      return false;
    }
    return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;
  }

  /**
   * Parse a string path into an array of segments
   *
   * @param {String} path
   * @return {Array|undefined}
   */

  function parse(path) {
    var keys = [];
    var index = -1;
    var mode = BEFORE_PATH;
    var subPathDepth = 0;
    var c, newChar, key, type, transition, action, typeMap;

    var actions = [];

    actions[PUSH] = function () {
      if (key !== undefined) {
        keys.push(key);
        key = undefined;
      }
    };

    actions[APPEND] = function () {
      if (key === undefined) {
        key = newChar;
      } else {
        key += newChar;
      }
    };

    actions[INC_SUB_PATH_DEPTH] = function () {
      actions[APPEND]();
      subPathDepth++;
    };

    actions[PUSH_SUB_PATH] = function () {
      if (subPathDepth > 0) {
        subPathDepth--;
        mode = IN_SUB_PATH;
        actions[APPEND]();
      } else {
        subPathDepth = 0;
        key = formatSubPath(key);
        if (key === false) {
          return false;
        } else {
          actions[PUSH]();
        }
      }
    };

    function maybeUnescapeQuote() {
      var nextChar = path[index + 1];
      if (mode === IN_SINGLE_QUOTE && nextChar === "'" || mode === IN_DOUBLE_QUOTE && nextChar === '"') {
        index++;
        newChar = '\\' + nextChar;
        actions[APPEND]();
        return true;
      }
    }

    while (mode != null) {
      index++;
      c = path[index];

      if (c === '\\' && maybeUnescapeQuote()) {
        continue;
      }

      type = getPathCharType(c);
      typeMap = pathStateMachine[mode];
      transition = typeMap[type] || typeMap['else'] || ERROR;

      if (transition === ERROR) {
        return; // parse error
      }

      mode = transition[0];
      action = actions[transition[1]];
      if (action) {
        newChar = transition[2];
        newChar = newChar === undefined ? c : newChar;
        if (action() === false) {
          return;
        }
      }

      if (mode === AFTER_PATH) {
        keys.raw = path;
        return keys;
      }
    }
  }

  /**
   * External parse that check for a cache hit first
   *
   * @param {String} path
   * @return {Array|undefined}
   */

  function parsePath(path) {
    var hit = pathCache.get(path);
    if (!hit) {
      hit = parse(path);
      if (hit) {
        pathCache.put(path, hit);
      }
    }
    return hit;
  }

  /**
   * Get from an object from a path string
   *
   * @param {Object} obj
   * @param {String} path
   */

  function getPath(obj, path) {
    return parseExpression(path).get(obj);
  }

  /**
   * Warn against setting non-existent root path on a vm.
   */

  var warnNonExistent;
  if (true) {
    warnNonExistent = function (path, vm) {
      warn('You are setting a non-existent path "' + path.raw + '" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the "data" option for more reliable reactivity ' + 'and better performance.', vm);
    };
  }

  /**
   * Set on an object from a path
   *
   * @param {Object} obj
   * @param {String | Array} path
   * @param {*} val
   */

  function setPath(obj, path, val) {
    var original = obj;
    if (typeof path === 'string') {
      path = parse(path);
    }
    if (!path || !isObject(obj)) {
      return false;
    }
    var last, key;
    for (var i = 0, l = path.length; i < l; i++) {
      last = obj;
      key = path[i];
      if (key.charAt(0) === '*') {
        key = parseExpression(key.slice(1)).get.call(original, original);
      }
      if (i < l - 1) {
        obj = obj[key];
        if (!isObject(obj)) {
          obj = {};
          if (("development") !== 'production' && last._isVue) {
            warnNonExistent(path, last);
          }
          set(last, key, obj);
        }
      } else {
        if (isArray(obj)) {
          obj.$set(key, val);
        } else if (key in obj) {
          obj[key] = val;
        } else {
          if (("development") !== 'production' && obj._isVue) {
            warnNonExistent(path, obj);
          }
          set(obj, key, val);
        }
      }
    }
    return true;
  }

  var path = Object.freeze({
    parsePath: parsePath,
    getPath: getPath,
    setPath: setPath
  });

  var expressionCache = new Cache(1000);

  var allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';
  var allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\b|') + '\\b)');

  // keywords that don't make sense inside expressions
  var improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';
  var improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\b|') + '\\b)');

  var wsRE = /\s/g;
  var newlineRE = /\n/g;
  var saveRE = /[\{,]\s*[\w\$_]+\s*:|('(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`)|new |typeof |void /g;
  var restoreRE = /"(\d+)"/g;
  var pathTestRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/;
  var identRE = /[^\w$\.](?:[A-Za-z_$][\w$]*)/g;
  var literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;

  function noop() {}

  /**
   * Save / Rewrite / Restore
   *
   * When rewriting paths found in an expression, it is
   * possible for the same letter sequences to be found in
   * strings and Object literal property keys. Therefore we
   * remove and store these parts in a temporary array, and
   * restore them after the path rewrite.
   */

  var saved = [];

  /**
   * Save replacer
   *
   * The save regex can match two possible cases:
   * 1. An opening object literal
   * 2. A string
   * If matched as a plain string, we need to escape its
   * newlines, since the string needs to be preserved when
   * generating the function body.
   *
   * @param {String} str
   * @param {String} isString - str if matched as a string
   * @return {String} - placeholder with index
   */

  function save(str, isString) {
    var i = saved.length;
    saved[i] = isString ? str.replace(newlineRE, '\\n') : str;
    return '"' + i + '"';
  }

  /**
   * Path rewrite replacer
   *
   * @param {String} raw
   * @return {String}
   */

  function rewrite(raw) {
    var c = raw.charAt(0);
    var path = raw.slice(1);
    if (allowedKeywordsRE.test(path)) {
      return raw;
    } else {
      path = path.indexOf('"') > -1 ? path.replace(restoreRE, restore) : path;
      return c + 'scope.' + path;
    }
  }

  /**
   * Restore replacer
   *
   * @param {String} str
   * @param {String} i - matched save index
   * @return {String}
   */

  function restore(str, i) {
    return saved[i];
  }

  /**
   * Rewrite an expression, prefixing all path accessors with
   * `scope.` and generate getter/setter functions.
   *
   * @param {String} exp
   * @return {Function}
   */

  function compileGetter(exp) {
    if (improperKeywordsRE.test(exp)) {
      ("development") !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);
    }
    // reset state
    saved.length = 0;
    // save strings and object literal keys
    var body = exp.replace(saveRE, save).replace(wsRE, '');
    // rewrite all paths
    // pad 1 space here because the regex matches 1 extra char
    body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);
    return makeGetterFn(body);
  }

  /**
   * Build a getter function. Requires eval.
   *
   * We isolate the try/catch so it doesn't affect the
   * optimization of the parse function when it is not called.
   *
   * @param {String} body
   * @return {Function|undefined}
   */

  function makeGetterFn(body) {
    try {
      /* eslint-disable no-new-func */
      return new Function('scope', 'return ' + body + ';');
      /* eslint-enable no-new-func */
    } catch (e) {
      if (true) {
        /* istanbul ignore if */
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');
        } else {
          warn('Invalid expression. ' + 'Generated function body: ' + body);
        }
      }
      return noop;
    }
  }

  /**
   * Compile a setter function for the expression.
   *
   * @param {String} exp
   * @return {Function|undefined}
   */

  function compileSetter(exp) {
    var path = parsePath(exp);
    if (path) {
      return function (scope, val) {
        setPath(scope, path, val);
      };
    } else {
      ("development") !== 'production' && warn('Invalid setter expression: ' + exp);
    }
  }

  /**
   * Parse an expression into re-written getter/setters.
   *
   * @param {String} exp
   * @param {Boolean} needSet
   * @return {Function}
   */

  function parseExpression(exp, needSet) {
    exp = exp.trim();
    // try cache
    var hit = expressionCache.get(exp);
    if (hit) {
      if (needSet && !hit.set) {
        hit.set = compileSetter(hit.exp);
      }
      return hit;
    }
    var res = { exp: exp };
    res.get = isSimplePath(exp) && exp.indexOf('[') < 0
    // optimized super simple getter
    ? makeGetterFn('scope.' + exp)
    // dynamic getter
    : compileGetter(exp);
    if (needSet) {
      res.set = compileSetter(exp);
    }
    expressionCache.put(exp, res);
    return res;
  }

  /**
   * Check if an expression is a simple path.
   *
   * @param {String} exp
   * @return {Boolean}
   */

  function isSimplePath(exp) {
    return pathTestRE.test(exp) &&
    // don't treat literal values as paths
    !literalValueRE$1.test(exp) &&
    // Math constants e.g. Math.PI, Math.E etc.
    exp.slice(0, 5) !== 'Math.';
  }

  var expression = Object.freeze({
    parseExpression: parseExpression,
    isSimplePath: isSimplePath
  });

  // we have two separate queues: one for directive updates
  // and one for user watcher registered via $watch().
  // we want to guarantee directive updates to be called
  // before user watchers so that when user watchers are
  // triggered, the DOM would have already been in updated
  // state.

  var queue = [];
  var userQueue = [];
  var has = {};
  var circular = {};
  var waiting = false;

  /**
   * Reset the batcher's state.
   */

  function resetBatcherState() {
    queue.length = 0;
    userQueue.length = 0;
    has = {};
    circular = {};
    waiting = false;
  }

  /**
   * Flush both queues and run the watchers.
   */

  function flushBatcherQueue() {
    var _again = true;

    _function: while (_again) {
      _again = false;

      runBatcherQueue(queue);
      runBatcherQueue(userQueue);
      // user watchers triggered more watchers,
      // keep flushing until it depletes
      if (queue.length) {
        _again = true;
        continue _function;
      }
      // dev tool hook
      /* istanbul ignore if */
      if (devtools && config.devtools) {
        devtools.emit('flush');
      }
      resetBatcherState();
    }
  }

  /**
   * Run the watchers in a single queue.
   *
   * @param {Array} queue
   */

  function runBatcherQueue(queue) {
    // do not cache length because more watchers might be pushed
    // as we run existing watchers
    for (var i = 0; i < queue.length; i++) {
      var watcher = queue[i];
      var id = watcher.id;
      has[id] = null;
      watcher.run();
      // in dev build, check and stop circular updates.
      if (("development") !== 'production' && has[id] != null) {
        circular[id] = (circular[id] || 0) + 1;
        if (circular[id] > config._maxUpdateCount) {
          warn('You may have an infinite update loop for watcher ' + 'with expression "' + watcher.expression + '"', watcher.vm);
          break;
        }
      }
    }
    queue.length = 0;
  }

  /**
   * Push a watcher into the watcher queue.
   * Jobs with duplicate IDs will be skipped unless it's
   * pushed when the queue is being flushed.
   *
   * @param {Watcher} watcher
   *   properties:
   *   - {Number} id
   *   - {Function} run
   */

  function pushWatcher(watcher) {
    var id = watcher.id;
    if (has[id] == null) {
      // push watcher into appropriate queue
      var q = watcher.user ? userQueue : queue;
      has[id] = q.length;
      q.push(watcher);
      // queue the flush
      if (!waiting) {
        waiting = true;
        nextTick(flushBatcherQueue);
      }
    }
  }

  var uid$2 = 0;

  /**
   * A watcher parses an expression, collects dependencies,
   * and fires callback when the expression value changes.
   * This is used for both the $watch() api and directives.
   *
   * @param {Vue} vm
   * @param {String|Function} expOrFn
   * @param {Function} cb
   * @param {Object} options
   *                 - {Array} filters
   *                 - {Boolean} twoWay
   *                 - {Boolean} deep
   *                 - {Boolean} user
   *                 - {Boolean} sync
   *                 - {Boolean} lazy
   *                 - {Function} [preProcess]
   *                 - {Function} [postProcess]
   * @constructor
   */
  function Watcher(vm, expOrFn, cb, options) {
    // mix in options
    if (options) {
      extend(this, options);
    }
    var isFn = typeof expOrFn === 'function';
    this.vm = vm;
    vm._watchers.push(this);
    this.expression = expOrFn;
    this.cb = cb;
    this.id = ++uid$2; // uid for batching
    this.active = true;
    this.dirty = this.lazy; // for lazy watchers
    this.deps = [];
    this.newDeps = [];
    this.depIds = new _Set();
    this.newDepIds = new _Set();
    this.prevError = null; // for async error stacks
    // parse expression for getter/setter
    if (isFn) {
      this.getter = expOrFn;
      this.setter = undefined;
    } else {
      var res = parseExpression(expOrFn, this.twoWay);
      this.getter = res.get;
      this.setter = res.set;
    }
    this.value = this.lazy ? undefined : this.get();
    // state for avoiding false triggers for deep and Array
    // watchers during vm._digest()
    this.queued = this.shallow = false;
  }

  /**
   * Evaluate the getter, and re-collect dependencies.
   */

  Watcher.prototype.get = function () {
    this.beforeGet();
    var scope = this.scope || this.vm;
    var value;
    try {
      value = this.getter.call(scope, scope);
    } catch (e) {
      if (("development") !== 'production' && config.warnExpressionErrors) {
        warn('Error when evaluating expression ' + '"' + this.expression + '": ' + e.toString(), this.vm);
      }
    }
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    if (this.preProcess) {
      value = this.preProcess(value);
    }
    if (this.filters) {
      value = scope._applyFilters(value, null, this.filters, false);
    }
    if (this.postProcess) {
      value = this.postProcess(value);
    }
    this.afterGet();
    return value;
  };

  /**
   * Set the corresponding value with the setter.
   *
   * @param {*} value
   */

  Watcher.prototype.set = function (value) {
    var scope = this.scope || this.vm;
    if (this.filters) {
      value = scope._applyFilters(value, this.value, this.filters, true);
    }
    try {
      this.setter.call(scope, scope, value);
    } catch (e) {
      if (("development") !== 'production' && config.warnExpressionErrors) {
        warn('Error when evaluating setter ' + '"' + this.expression + '": ' + e.toString(), this.vm);
      }
    }
    // two-way sync for v-for alias
    var forContext = scope.$forContext;
    if (forContext && forContext.alias === this.expression) {
      if (forContext.filters) {
        ("development") !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);
        return;
      }
      forContext._withLock(function () {
        if (scope.$key) {
          // original is an object
          forContext.rawValue[scope.$key] = value;
        } else {
          forContext.rawValue.$set(scope.$index, value);
        }
      });
    }
  };

  /**
   * Prepare for dependency collection.
   */

  Watcher.prototype.beforeGet = function () {
    Dep.target = this;
  };

  /**
   * Add a dependency to this directive.
   *
   * @param {Dep} dep
   */

  Watcher.prototype.addDep = function (dep) {
    var id = dep.id;
    if (!this.newDepIds.has(id)) {
      this.newDepIds.add(id);
      this.newDeps.push(dep);
      if (!this.depIds.has(id)) {
        dep.addSub(this);
      }
    }
  };

  /**
   * Clean up for dependency collection.
   */

  Watcher.prototype.afterGet = function () {
    Dep.target = null;
    var i = this.deps.length;
    while (i--) {
      var dep = this.deps[i];
      if (!this.newDepIds.has(dep.id)) {
        dep.removeSub(this);
      }
    }
    var tmp = this.depIds;
    this.depIds = this.newDepIds;
    this.newDepIds = tmp;
    this.newDepIds.clear();
    tmp = this.deps;
    this.deps = this.newDeps;
    this.newDeps = tmp;
    this.newDeps.length = 0;
  };

  /**
   * Subscriber interface.
   * Will be called when a dependency changes.
   *
   * @param {Boolean} shallow
   */

  Watcher.prototype.update = function (shallow) {
    if (this.lazy) {
      this.dirty = true;
    } else if (this.sync || !config.async) {
      this.run();
    } else {
      // if queued, only overwrite shallow with non-shallow,
      // but not the other way around.
      this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;
      this.queued = true;
      // record before-push error stack in debug mode
      /* istanbul ignore if */
      if (("development") !== 'production' && config.debug) {
        this.prevError = new Error('[vue] async stack trace');
      }
      pushWatcher(this);
    }
  };

  /**
   * Batcher job interface.
   * Will be called by the batcher.
   */

  Watcher.prototype.run = function () {
    if (this.active) {
      var value = this.get();
      if (value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated; but only do so if this is a
      // non-shallow update (caused by a vm digest).
      (isObject(value) || this.deep) && !this.shallow) {
        // set new value
        var oldValue = this.value;
        this.value = value;
        // in debug + async mode, when a watcher callbacks
        // throws, we also throw the saved before-push error
        // so the full cross-tick stack trace is available.
        var prevError = this.prevError;
        /* istanbul ignore if */
        if (("development") !== 'production' && config.debug && prevError) {
          this.prevError = null;
          try {
            this.cb.call(this.vm, value, oldValue);
          } catch (e) {
            nextTick(function () {
              throw prevError;
            }, 0);
            throw e;
          }
        } else {
          this.cb.call(this.vm, value, oldValue);
        }
      }
      this.queued = this.shallow = false;
    }
  };

  /**
   * Evaluate the value of the watcher.
   * This only gets called for lazy watchers.
   */

  Watcher.prototype.evaluate = function () {
    // avoid overwriting another watcher that is being
    // collected.
    var current = Dep.target;
    this.value = this.get();
    this.dirty = false;
    Dep.target = current;
  };

  /**
   * Depend on all deps collected by this watcher.
   */

  Watcher.prototype.depend = function () {
    var i = this.deps.length;
    while (i--) {
      this.deps[i].depend();
    }
  };

  /**
   * Remove self from all dependencies' subcriber list.
   */

  Watcher.prototype.teardown = function () {
    if (this.active) {
      // remove self from vm's watcher list
      // this is a somewhat expensive operation so we skip it
      // if the vm is being destroyed or is performing a v-for
      // re-render (the watcher list is then filtered by v-for).
      if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {
        this.vm._watchers.$remove(this);
      }
      var i = this.deps.length;
      while (i--) {
        this.deps[i].removeSub(this);
      }
      this.active = false;
      this.vm = this.cb = this.value = null;
    }
  };

  /**
   * Recrusively traverse an object to evoke all converted
   * getters, so that every nested property inside the object
   * is collected as a "deep" dependency.
   *
   * @param {*} val
   */

  var seenObjects = new _Set();
  function traverse(val, seen) {
    var i = undefined,
        keys = undefined;
    if (!seen) {
      seen = seenObjects;
      seen.clear();
    }
    var isA = isArray(val);
    var isO = isObject(val);
    if ((isA || isO) && Object.isExtensible(val)) {
      if (val.__ob__) {
        var depId = val.__ob__.dep.id;
        if (seen.has(depId)) {
          return;
        } else {
          seen.add(depId);
        }
      }
      if (isA) {
        i = val.length;
        while (i--) traverse(val[i], seen);
      } else if (isO) {
        keys = Object.keys(val);
        i = keys.length;
        while (i--) traverse(val[keys[i]], seen);
      }
    }
  }

  var text$1 = {

    bind: function bind() {
      this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';
    },

    update: function update(value) {
      this.el[this.attr] = _toString(value);
    }
  };

  var templateCache = new Cache(1000);
  var idSelectorCache = new Cache(1000);

  var map = {
    efault: [0, '', ''],
    legend: [1, '<fieldset>', '</fieldset>'],
    tr: [2, '<table><tbody>', '</tbody></table>'],
    col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']
  };

  map.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

  map.option = map.optgroup = [1, '<select multiple="multiple">', '</select>'];

  map.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];

  map.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns="http://www.w3.org/2000/svg" ' + 'xmlns:xlink="http://www.w3.org/1999/xlink" ' + 'xmlns:ev="http://www.w3.org/2001/xml-events"' + 'version="1.1">', '</svg>'];

  /**
   * Check if a node is a supported template node with a
   * DocumentFragment content.
   *
   * @param {Node} node
   * @return {Boolean}
   */

  function isRealTemplate(node) {
    return isTemplate(node) && isFragment(node.content);
  }

  var tagRE$1 = /<([\w:-]+)/;
  var entityRE = /&#?\w+?;/;
  var commentRE = /<!--/;

  /**
   * Convert a string template to a DocumentFragment.
   * Determines correct wrapping by tag types. Wrapping
   * strategy found in jQuery & component/domify.
   *
   * @param {String} templateString
   * @param {Boolean} raw
   * @return {DocumentFragment}
   */

  function stringToFragment(templateString, raw) {
    // try a cache hit first
    var cacheKey = raw ? templateString : templateString.trim();
    var hit = templateCache.get(cacheKey);
    if (hit) {
      return hit;
    }

    var frag = document.createDocumentFragment();
    var tagMatch = templateString.match(tagRE$1);
    var entityMatch = entityRE.test(templateString);
    var commentMatch = commentRE.test(templateString);

    if (!tagMatch && !entityMatch && !commentMatch) {
      // text only, return a single text node.
      frag.appendChild(document.createTextNode(templateString));
    } else {
      var tag = tagMatch && tagMatch[1];
      var wrap = map[tag] || map.efault;
      var depth = wrap[0];
      var prefix = wrap[1];
      var suffix = wrap[2];
      var node = document.createElement('div');

      node.innerHTML = prefix + templateString + suffix;
      while (depth--) {
        node = node.lastChild;
      }

      var child;
      /* eslint-disable no-cond-assign */
      while (child = node.firstChild) {
        /* eslint-enable no-cond-assign */
        frag.appendChild(child);
      }
    }
    if (!raw) {
      trimNode(frag);
    }
    templateCache.put(cacheKey, frag);
    return frag;
  }

  /**
   * Convert a template node to a DocumentFragment.
   *
   * @param {Node} node
   * @return {DocumentFragment}
   */

  function nodeToFragment(node) {
    // if its a template tag and the browser supports it,
    // its content is already a document fragment. However, iOS Safari has
    // bug when using directly cloned template content with touch
    // events and can cause crashes when the nodes are removed from DOM, so we
    // have to treat template elements as string templates. (#2805)
    /* istanbul ignore if */
    if (isRealTemplate(node)) {
      return stringToFragment(node.innerHTML);
    }
    // script template
    if (node.tagName === 'SCRIPT') {
      return stringToFragment(node.textContent);
    }
    // normal node, clone it to avoid mutating the original
    var clonedNode = cloneNode(node);
    var frag = document.createDocumentFragment();
    var child;
    /* eslint-disable no-cond-assign */
    while (child = clonedNode.firstChild) {
      /* eslint-enable no-cond-assign */
      frag.appendChild(child);
    }
    trimNode(frag);
    return frag;
  }

  // Test for the presence of the Safari template cloning bug
  // https://bugs.webkit.org/showug.cgi?id=137755
  var hasBrokenTemplate = (function () {
    /* istanbul ignore else */
    if (inBrowser) {
      var a = document.createElement('div');
      a.innerHTML = '<template>1</template>';
      return !a.cloneNode(true).firstChild.innerHTML;
    } else {
      return false;
    }
  })();

  // Test for IE10/11 textarea placeholder clone bug
  var hasTextareaCloneBug = (function () {
    /* istanbul ignore else */
    if (inBrowser) {
      var t = document.createElement('textarea');
      t.placeholder = 't';
      return t.cloneNode(true).value === 't';
    } else {
      return false;
    }
  })();

  /**
   * 1. Deal with Safari cloning nested <template> bug by
   *    manually cloning all template instances.
   * 2. Deal with IE10/11 textarea placeholder bug by setting
   *    the correct value after cloning.
   *
   * @param {Element|DocumentFragment} node
   * @return {Element|DocumentFragment}
   */

  function cloneNode(node) {
    /* istanbul ignore if */
    if (!node.querySelectorAll) {
      return node.cloneNode();
    }
    var res = node.cloneNode(true);
    var i, original, cloned;
    /* istanbul ignore if */
    if (hasBrokenTemplate) {
      var tempClone = res;
      if (isRealTemplate(node)) {
        node = node.content;
        tempClone = res.content;
      }
      original = node.querySelectorAll('template');
      if (original.length) {
        cloned = tempClone.querySelectorAll('template');
        i = cloned.length;
        while (i--) {
          cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);
        }
      }
    }
    /* istanbul ignore if */
    if (hasTextareaCloneBug) {
      if (node.tagName === 'TEXTAREA') {
        res.value = node.value;
      } else {
        original = node.querySelectorAll('textarea');
        if (original.length) {
          cloned = res.querySelectorAll('textarea');
          i = cloned.length;
          while (i--) {
            cloned[i].value = original[i].value;
          }
        }
      }
    }
    return res;
  }

  /**
   * Process the template option and normalizes it into a
   * a DocumentFragment that can be used as a partial or a
   * instance template.
   *
   * @param {*} template
   *        Possible values include:
   *        - DocumentFragment object
   *        - Node object of type Template
   *        - id selector: '#some-template-id'
   *        - template string: '<div><span>{{msg}}</span></div>'
   * @param {Boolean} shouldClone
   * @param {Boolean} raw
   *        inline HTML interpolation. Do not check for id
   *        selector and keep whitespace in the string.
   * @return {DocumentFragment|undefined}
   */

  function parseTemplate(template, shouldClone, raw) {
    var node, frag;

    // if the template is already a document fragment,
    // do nothing
    if (isFragment(template)) {
      trimNode(template);
      return shouldClone ? cloneNode(template) : template;
    }

    if (typeof template === 'string') {
      // id selector
      if (!raw && template.charAt(0) === '#') {
        // id selector can be cached too
        frag = idSelectorCache.get(template);
        if (!frag) {
          node = document.getElementById(template.slice(1));
          if (node) {
            frag = nodeToFragment(node);
            // save selector to cache
            idSelectorCache.put(template, frag);
          }
        }
      } else {
        // normal string template
        frag = stringToFragment(template, raw);
      }
    } else if (template.nodeType) {
      // a direct node
      frag = nodeToFragment(template);
    }

    return frag && shouldClone ? cloneNode(frag) : frag;
  }

  var template = Object.freeze({
    cloneNode: cloneNode,
    parseTemplate: parseTemplate
  });

  var html = {

    bind: function bind() {
      // a comment node means this is a binding for
      // {{{ inline unescaped html }}}
      if (this.el.nodeType === 8) {
        // hold nodes
        this.nodes = [];
        // replace the placeholder with proper anchor
        this.anchor = createAnchor('v-html');
        replace(this.el, this.anchor);
      }
    },

    update: function update(value) {
      value = _toString(value);
      if (this.nodes) {
        this.swap(value);
      } else {
        this.el.innerHTML = value;
      }
    },

    swap: function swap(value) {
      // remove old nodes
      var i = this.nodes.length;
      while (i--) {
        remove(this.nodes[i]);
      }
      // convert new value to a fragment
      // do not attempt to retrieve from id selector
      var frag = parseTemplate(value, true, true);
      // save a reference to these nodes so we can remove later
      this.nodes = toArray(frag.childNodes);
      before(frag, this.anchor);
    }
  };

  /**
   * Abstraction for a partially-compiled fragment.
   * Can optionally compile content with a child scope.
   *
   * @param {Function} linker
   * @param {Vue} vm
   * @param {DocumentFragment} frag
   * @param {Vue} [host]
   * @param {Object} [scope]
   * @param {Fragment} [parentFrag]
   */
  function Fragment(linker, vm, frag, host, scope, parentFrag) {
    this.children = [];
    this.childFrags = [];
    this.vm = vm;
    this.scope = scope;
    this.inserted = false;
    this.parentFrag = parentFrag;
    if (parentFrag) {
      parentFrag.childFrags.push(this);
    }
    this.unlink = linker(vm, frag, host, scope, this);
    var single = this.single = frag.childNodes.length === 1 &&
    // do not go single mode if the only node is an anchor
    !frag.childNodes[0].__v_anchor;
    if (single) {
      this.node = frag.childNodes[0];
      this.before = singleBefore;
      this.remove = singleRemove;
    } else {
      this.node = createAnchor('fragment-start');
      this.end = createAnchor('fragment-end');
      this.frag = frag;
      prepend(this.node, frag);
      frag.appendChild(this.end);
      this.before = multiBefore;
      this.remove = multiRemove;
    }
    this.node.__v_frag = this;
  }

  /**
   * Call attach/detach for all components contained within
   * this fragment. Also do so recursively for all child
   * fragments.
   *
   * @param {Function} hook
   */

  Fragment.prototype.callHook = function (hook) {
    var i, l;
    for (i = 0, l = this.childFrags.length; i < l; i++) {
      this.childFrags[i].callHook(hook);
    }
    for (i = 0, l = this.children.length; i < l; i++) {
      hook(this.children[i]);
    }
  };

  /**
   * Insert fragment before target, single node version
   *
   * @param {Node} target
   * @param {Boolean} withTransition
   */

  function singleBefore(target, withTransition) {
    this.inserted = true;
    var method = withTransition !== false ? beforeWithTransition : before;
    method(this.node, target, this.vm);
    if (inDoc(this.node)) {
      this.callHook(attach);
    }
  }

  /**
   * Remove fragment, single node version
   */

  function singleRemove() {
    this.inserted = false;
    var shouldCallRemove = inDoc(this.node);
    var self = this;
    this.beforeRemove();
    removeWithTransition(this.node, this.vm, function () {
      if (shouldCallRemove) {
        self.callHook(detach);
      }
      self.destroy();
    });
  }

  /**
   * Insert fragment before target, multi-nodes version
   *
   * @param {Node} target
   * @param {Boolean} withTransition
   */

  function multiBefore(target, withTransition) {
    this.inserted = true;
    var vm = this.vm;
    var method = withTransition !== false ? beforeWithTransition : before;
    mapNodeRange(this.node, this.end, function (node) {
      method(node, target, vm);
    });
    if (inDoc(this.node)) {
      this.callHook(attach);
    }
  }

  /**
   * Remove fragment, multi-nodes version
   */

  function multiRemove() {
    this.inserted = false;
    var self = this;
    var shouldCallRemove = inDoc(this.node);
    this.beforeRemove();
    removeNodeRange(this.node, this.end, this.vm, this.frag, function () {
      if (shouldCallRemove) {
        self.callHook(detach);
      }
      self.destroy();
    });
  }

  /**
   * Prepare the fragment for removal.
   */

  Fragment.prototype.beforeRemove = function () {
    var i, l;
    for (i = 0, l = this.childFrags.length; i < l; i++) {
      // call the same method recursively on child
      // fragments, depth-first
      this.childFrags[i].beforeRemove(false);
    }
    for (i = 0, l = this.children.length; i < l; i++) {
      // Call destroy for all contained instances,
      // with remove:false and defer:true.
      // Defer is necessary because we need to
      // keep the children to call detach hooks
      // on them.
      this.children[i].$destroy(false, true);
    }
    var dirs = this.unlink.dirs;
    for (i = 0, l = dirs.length; i < l; i++) {
      // disable the watchers on all the directives
      // so that the rendered content stays the same
      // during removal.
      dirs[i]._watcher && dirs[i]._watcher.teardown();
    }
  };

  /**
   * Destroy the fragment.
   */

  Fragment.prototype.destroy = function () {
    if (this.parentFrag) {
      this.parentFrag.childFrags.$remove(this);
    }
    this.node.__v_frag = null;
    this.unlink();
  };

  /**
   * Call attach hook for a Vue instance.
   *
   * @param {Vue} child
   */

  function attach(child) {
    if (!child._isAttached && inDoc(child.$el)) {
      child._callHook('attached');
    }
  }

  /**
   * Call detach hook for a Vue instance.
   *
   * @param {Vue} child
   */

  function detach(child) {
    if (child._isAttached && !inDoc(child.$el)) {
      child._callHook('detached');
    }
  }

  var linkerCache = new Cache(5000);

  /**
   * A factory that can be used to create instances of a
   * fragment. Caches the compiled linker if possible.
   *
   * @param {Vue} vm
   * @param {Element|String} el
   */
  function FragmentFactory(vm, el) {
    this.vm = vm;
    var template;
    var isString = typeof el === 'string';
    if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {
      template = parseTemplate(el, true);
    } else {
      template = document.createDocumentFragment();
      template.appendChild(el);
    }
    this.template = template;
    // linker can be cached, but only for components
    var linker;
    var cid = vm.constructor.cid;
    if (cid > 0) {
      var cacheId = cid + (isString ? el : getOuterHTML(el));
      linker = linkerCache.get(cacheId);
      if (!linker) {
        linker = compile(template, vm.$options, true);
        linkerCache.put(cacheId, linker);
      }
    } else {
      linker = compile(template, vm.$options, true);
    }
    this.linker = linker;
  }

  /**
   * Create a fragment instance with given host and scope.
   *
   * @param {Vue} host
   * @param {Object} scope
   * @param {Fragment} parentFrag
   */

  FragmentFactory.prototype.create = function (host, scope, parentFrag) {
    var frag = cloneNode(this.template);
    return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);
  };

  var ON = 700;
  var MODEL = 800;
  var BIND = 850;
  var TRANSITION = 1100;
  var EL = 1500;
  var COMPONENT = 1500;
  var PARTIAL = 1750;
  var IF = 2100;
  var FOR = 2200;
  var SLOT = 2300;

  var uid$3 = 0;

  var vFor = {

    priority: FOR,
    terminal: true,

    params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],

    bind: function bind() {
      // support "item in/of items" syntax
      var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);
      if (inMatch) {
        var itMatch = inMatch[1].match(/\((.*),(.*)\)/);
        if (itMatch) {
          this.iterator = itMatch[1].trim();
          this.alias = itMatch[2].trim();
        } else {
          this.alias = inMatch[1].trim();
        }
        this.expression = inMatch[2];
      }

      if (!this.alias) {
        ("development") !== 'production' && warn('Invalid v-for expression "' + this.descriptor.raw + '": ' + 'alias is required.', this.vm);
        return;
      }

      // uid as a cache identifier
      this.id = '__v-for__' + ++uid$3;

      // check if this is an option list,
      // so that we know if we need to update the <select>'s
      // v-model when the option list has changed.
      // because v-model has a lower priority than v-for,
      // the v-model is not bound here yet, so we have to
      // retrive it in the actual updateModel() function.
      var tag = this.el.tagName;
      this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';

      // setup anchor nodes
      this.start = createAnchor('v-for-start');
      this.end = createAnchor('v-for-end');
      replace(this.el, this.end);
      before(this.start, this.end);

      // cache
      this.cache = Object.create(null);

      // fragment factory
      this.factory = new FragmentFactory(this.vm, this.el);
    },

    update: function update(data) {
      this.diff(data);
      this.updateRef();
      this.updateModel();
    },

    /**
     * Diff, based on new data and old data, determine the
     * minimum amount of DOM manipulations needed to make the
     * DOM reflect the new data Array.
     *
     * The algorithm diffs the new data Array by storing a
     * hidden reference to an owner vm instance on previously
     * seen data. This allows us to achieve O(n) which is
     * better than a levenshtein distance based algorithm,
     * which is O(m * n).
     *
     * @param {Array} data
     */

    diff: function diff(data) {
      // check if the Array was converted from an Object
      var item = data[0];
      var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');

      var trackByKey = this.params.trackBy;
      var oldFrags = this.frags;
      var frags = this.frags = new Array(data.length);
      var alias = this.alias;
      var iterator = this.iterator;
      var start = this.start;
      var end = this.end;
      var inDocument = inDoc(start);
      var init = !oldFrags;
      var i, l, frag, key, value, primitive;

      // First pass, go through the new Array and fill up
      // the new frags array. If a piece of data has a cached
      // instance for it, we reuse it. Otherwise build a new
      // instance.
      for (i = 0, l = data.length; i < l; i++) {
        item = data[i];
        key = convertedFromObject ? item.$key : null;
        value = convertedFromObject ? item.$value : item;
        primitive = !isObject(value);
        frag = !init && this.getCachedFrag(value, i, key);
        if (frag) {
          // reusable fragment
          frag.reused = true;
          // update $index
          frag.scope.$index = i;
          // update $key
          if (key) {
            frag.scope.$key = key;
          }
          // update iterator
          if (iterator) {
            frag.scope[iterator] = key !== null ? key : i;
          }
          // update data for track-by, object repeat &
          // primitive values.
          if (trackByKey || convertedFromObject || primitive) {
            withoutConversion(function () {
              frag.scope[alias] = value;
            });
          }
        } else {
          // new isntance
          frag = this.create(value, alias, i, key);
          frag.fresh = !init;
        }
        frags[i] = frag;
        if (init) {
          frag.before(end);
        }
      }

      // we're done for the initial render.
      if (init) {
        return;
      }

      // Second pass, go through the old fragments and
      // destroy those who are not reused (and remove them
      // from cache)
      var removalIndex = 0;
      var totalRemoved = oldFrags.length - frags.length;
      // when removing a large number of fragments, watcher removal
      // turns out to be a perf bottleneck, so we batch the watcher
      // removals into a single filter call!
      this.vm._vForRemoving = true;
      for (i = 0, l = oldFrags.length; i < l; i++) {
        frag = oldFrags[i];
        if (!frag.reused) {
          this.deleteCachedFrag(frag);
          this.remove(frag, removalIndex++, totalRemoved, inDocument);
        }
      }
      this.vm._vForRemoving = false;
      if (removalIndex) {
        this.vm._watchers = this.vm._watchers.filter(function (w) {
          return w.active;
        });
      }

      // Final pass, move/insert new fragments into the
      // right place.
      var targetPrev, prevEl, currentPrev;
      var insertionIndex = 0;
      for (i = 0, l = frags.length; i < l; i++) {
        frag = frags[i];
        // this is the frag that we should be after
        targetPrev = frags[i - 1];
        prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;
        if (frag.reused && !frag.staggerCb) {
          currentPrev = findPrevFrag(frag, start, this.id);
          if (currentPrev !== targetPrev && (!currentPrev ||
          // optimization for moving a single item.
          // thanks to suggestions by @livoras in #1807
          findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {
            this.move(frag, prevEl);
          }
        } else {
          // new instance, or still in stagger.
          // insert with updated stagger index.
          this.insert(frag, insertionIndex++, prevEl, inDocument);
        }
        frag.reused = frag.fresh = false;
      }
    },

    /**
     * Create a new fragment instance.
     *
     * @param {*} value
     * @param {String} alias
     * @param {Number} index
     * @param {String} [key]
     * @return {Fragment}
     */

    create: function create(value, alias, index, key) {
      var host = this._host;
      // create iteration scope
      var parentScope = this._scope || this.vm;
      var scope = Object.create(parentScope);
      // ref holder for the scope
      scope.$refs = Object.create(parentScope.$refs);
      scope.$els = Object.create(parentScope.$els);
      // make sure point $parent to parent scope
      scope.$parent = parentScope;
      // for two-way binding on alias
      scope.$forContext = this;
      // define scope properties
      // important: define the scope alias without forced conversion
      // so that frozen data structures remain non-reactive.
      withoutConversion(function () {
        defineReactive(scope, alias, value);
      });
      defineReactive(scope, '$index', index);
      if (key) {
        defineReactive(scope, '$key', key);
      } else if (scope.$key) {
        // avoid accidental fallback
        def(scope, '$key', null);
      }
      if (this.iterator) {
        defineReactive(scope, this.iterator, key !== null ? key : index);
      }
      var frag = this.factory.create(host, scope, this._frag);
      frag.forId = this.id;
      this.cacheFrag(value, frag, index, key);
      return frag;
    },

    /**
     * Update the v-ref on owner vm.
     */

    updateRef: function updateRef() {
      var ref = this.descriptor.ref;
      if (!ref) return;
      var hash = (this._scope || this.vm).$refs;
      var refs;
      if (!this.fromObject) {
        refs = this.frags.map(findVmFromFrag);
      } else {
        refs = {};
        this.frags.forEach(function (frag) {
          refs[frag.scope.$key] = findVmFromFrag(frag);
        });
      }
      hash[ref] = refs;
    },

    /**
     * For option lists, update the containing v-model on
     * parent <select>.
     */

    updateModel: function updateModel() {
      if (this.isOption) {
        var parent = this.start.parentNode;
        var model = parent && parent.__v_model;
        if (model) {
          model.forceUpdate();
        }
      }
    },

    /**
     * Insert a fragment. Handles staggering.
     *
     * @param {Fragment} frag
     * @param {Number} index
     * @param {Node} prevEl
     * @param {Boolean} inDocument
     */

    insert: function insert(frag, index, prevEl, inDocument) {
      if (frag.staggerCb) {
        frag.staggerCb.cancel();
        frag.staggerCb = null;
      }
      var staggerAmount = this.getStagger(frag, index, null, 'enter');
      if (inDocument && staggerAmount) {
        // create an anchor and insert it synchronously,
        // so that we can resolve the correct order without
        // worrying about some elements not inserted yet
        var anchor = frag.staggerAnchor;
        if (!anchor) {
          anchor = frag.staggerAnchor = createAnchor('stagger-anchor');
          anchor.__v_frag = frag;
        }
        after(anchor, prevEl);
        var op = frag.staggerCb = cancellable(function () {
          frag.staggerCb = null;
          frag.before(anchor);
          remove(anchor);
        });
        setTimeout(op, staggerAmount);
      } else {
        var target = prevEl.nextSibling;
        /* istanbul ignore if */
        if (!target) {
          // reset end anchor position in case the position was messed up
          // by an external drag-n-drop library.
          after(this.end, prevEl);
          target = this.end;
        }
        frag.before(target);
      }
    },

    /**
     * Remove a fragment. Handles staggering.
     *
     * @param {Fragment} frag
     * @param {Number} index
     * @param {Number} total
     * @param {Boolean} inDocument
     */

    remove: function remove(frag, index, total, inDocument) {
      if (frag.staggerCb) {
        frag.staggerCb.cancel();
        frag.staggerCb = null;
        // it's not possible for the same frag to be removed
        // twice, so if we have a pending stagger callback,
        // it means this frag is queued for enter but removed
        // before its transition started. Since it is already
        // destroyed, we can just leave it in detached state.
        return;
      }
      var staggerAmount = this.getStagger(frag, index, total, 'leave');
      if (inDocument && staggerAmount) {
        var op = frag.staggerCb = cancellable(function () {
          frag.staggerCb = null;
          frag.remove();
        });
        setTimeout(op, staggerAmount);
      } else {
        frag.remove();
      }
    },

    /**
     * Move a fragment to a new position.
     * Force no transition.
     *
     * @param {Fragment} frag
     * @param {Node} prevEl
     */

    move: function move(frag, prevEl) {
      // fix a common issue with Sortable:
      // if prevEl doesn't have nextSibling, this means it's
      // been dragged after the end anchor. Just re-position
      // the end anchor to the end of the container.
      /* istanbul ignore if */
      if (!prevEl.nextSibling) {
        this.end.parentNode.appendChild(this.end);
      }
      frag.before(prevEl.nextSibling, false);
    },

    /**
     * Cache a fragment using track-by or the object key.
     *
     * @param {*} value
     * @param {Fragment} frag
     * @param {Number} index
     * @param {String} [key]
     */

    cacheFrag: function cacheFrag(value, frag, index, key) {
      var trackByKey = this.params.trackBy;
      var cache = this.cache;
      var primitive = !isObject(value);
      var id;
      if (key || trackByKey || primitive) {
        id = getTrackByKey(index, key, value, trackByKey);
        if (!cache[id]) {
          cache[id] = frag;
        } else if (trackByKey !== '$index') {
          ("development") !== 'production' && this.warnDuplicate(value);
        }
      } else {
        id = this.id;
        if (hasOwn(value, id)) {
          if (value[id] === null) {
            value[id] = frag;
          } else {
            ("development") !== 'production' && this.warnDuplicate(value);
          }
        } else if (Object.isExtensible(value)) {
          def(value, id, frag);
        } else if (true) {
          warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');
        }
      }
      frag.raw = value;
    },

    /**
     * Get a cached fragment from the value/index/key
     *
     * @param {*} value
     * @param {Number} index
     * @param {String} key
     * @return {Fragment}
     */

    getCachedFrag: function getCachedFrag(value, index, key) {
      var trackByKey = this.params.trackBy;
      var primitive = !isObject(value);
      var frag;
      if (key || trackByKey || primitive) {
        var id = getTrackByKey(index, key, value, trackByKey);
        frag = this.cache[id];
      } else {
        frag = value[this.id];
      }
      if (frag && (frag.reused || frag.fresh)) {
        ("development") !== 'production' && this.warnDuplicate(value);
      }
      return frag;
    },

    /**
     * Delete a fragment from cache.
     *
     * @param {Fragment} frag
     */

    deleteCachedFrag: function deleteCachedFrag(frag) {
      var value = frag.raw;
      var trackByKey = this.params.trackBy;
      var scope = frag.scope;
      var index = scope.$index;
      // fix #948: avoid accidentally fall through to
      // a parent repeater which happens to have $key.
      var key = hasOwn(scope, '$key') && scope.$key;
      var primitive = !isObject(value);
      if (trackByKey || key || primitive) {
        var id = getTrackByKey(index, key, value, trackByKey);
        this.cache[id] = null;
      } else {
        value[this.id] = null;
        frag.raw = null;
      }
    },

    /**
     * Get the stagger amount for an insertion/removal.
     *
     * @param {Fragment} frag
     * @param {Number} index
     * @param {Number} total
     * @param {String} type
     */

    getStagger: function getStagger(frag, index, total, type) {
      type = type + 'Stagger';
      var trans = frag.node.__v_trans;
      var hooks = trans && trans.hooks;
      var hook = hooks && (hooks[type] || hooks.stagger);
      return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);
    },

    /**
     * Pre-process the value before piping it through the
     * filters. This is passed to and called by the watcher.
     */

    _preProcess: function _preProcess(value) {
      // regardless of type, store the un-filtered raw value.
      this.rawValue = value;
      return value;
    },

    /**
     * Post-process the value after it has been piped through
     * the filters. This is passed to and called by the watcher.
     *
     * It is necessary for this to be called during the
     * watcher's dependency collection phase because we want
     * the v-for to update when the source Object is mutated.
     */

    _postProcess: function _postProcess(value) {
      if (isArray(value)) {
        return value;
      } else if (isPlainObject(value)) {
        // convert plain object to array.
        var keys = Object.keys(value);
        var i = keys.length;
        var res = new Array(i);
        var key;
        while (i--) {
          key = keys[i];
          res[i] = {
            $key: key,
            $value: value[key]
          };
        }
        return res;
      } else {
        if (typeof value === 'number' && !isNaN(value)) {
          value = range(value);
        }
        return value || [];
      }
    },

    unbind: function unbind() {
      if (this.descriptor.ref) {
        (this._scope || this.vm).$refs[this.descriptor.ref] = null;
      }
      if (this.frags) {
        var i = this.frags.length;
        var frag;
        while (i--) {
          frag = this.frags[i];
          this.deleteCachedFrag(frag);
          frag.destroy();
        }
      }
    }
  };

  /**
   * Helper to find the previous element that is a fragment
   * anchor. This is necessary because a destroyed frag's
   * element could still be lingering in the DOM before its
   * leaving transition finishes, but its inserted flag
   * should have been set to false so we can skip them.
   *
   * If this is a block repeat, we want to make sure we only
   * return frag that is bound to this v-for. (see #929)
   *
   * @param {Fragment} frag
   * @param {Comment|Text} anchor
   * @param {String} id
   * @return {Fragment}
   */

  function findPrevFrag(frag, anchor, id) {
    var el = frag.node.previousSibling;
    /* istanbul ignore if */
    if (!el) return;
    frag = el.__v_frag;
    while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {
      el = el.previousSibling;
      /* istanbul ignore if */
      if (!el) return;
      frag = el.__v_frag;
    }
    return frag;
  }

  /**
   * Find a vm from a fragment.
   *
   * @param {Fragment} frag
   * @return {Vue|undefined}
   */

  function findVmFromFrag(frag) {
    var node = frag.node;
    // handle multi-node frag
    if (frag.end) {
      while (!node.__vue__ && node !== frag.end && node.nextSibling) {
        node = node.nextSibling;
      }
    }
    return node.__vue__;
  }

  /**
   * Create a range array from given number.
   *
   * @param {Number} n
   * @return {Array}
   */

  function range(n) {
    var i = -1;
    var ret = new Array(Math.floor(n));
    while (++i < n) {
      ret[i] = i;
    }
    return ret;
  }

  /**
   * Get the track by key for an item.
   *
   * @param {Number} index
   * @param {String} key
   * @param {*} value
   * @param {String} [trackByKey]
   */

  function getTrackByKey(index, key, value, trackByKey) {
    return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;
  }

  if (true) {
    vFor.warnDuplicate = function (value) {
      warn('Duplicate value found in v-for="' + this.descriptor.raw + '": ' + JSON.stringify(value) + '. Use track-by="$index" if ' + 'you are expecting duplicate values.', this.vm);
    };
  }

  var vIf = {

    priority: IF,
    terminal: true,

    bind: function bind() {
      var el = this.el;
      if (!el.__vue__) {
        // check else block
        var next = el.nextElementSibling;
        if (next && getAttr(next, 'v-else') !== null) {
          remove(next);
          this.elseEl = next;
        }
        // check main block
        this.anchor = createAnchor('v-if');
        replace(el, this.anchor);
      } else {
        ("development") !== 'production' && warn('v-if="' + this.expression + '" cannot be ' + 'used on an instance root element.', this.vm);
        this.invalid = true;
      }
    },

    update: function update(value) {
      if (this.invalid) return;
      if (value) {
        if (!this.frag) {
          this.insert();
        }
      } else {
        this.remove();
      }
    },

    insert: function insert() {
      if (this.elseFrag) {
        this.elseFrag.remove();
        this.elseFrag = null;
      }
      // lazy init factory
      if (!this.factory) {
        this.factory = new FragmentFactory(this.vm, this.el);
      }
      this.frag = this.factory.create(this._host, this._scope, this._frag);
      this.frag.before(this.anchor);
    },

    remove: function remove() {
      if (this.frag) {
        this.frag.remove();
        this.frag = null;
      }
      if (this.elseEl && !this.elseFrag) {
        if (!this.elseFactory) {
          this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);
        }
        this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);
        this.elseFrag.before(this.anchor);
      }
    },

    unbind: function unbind() {
      if (this.frag) {
        this.frag.destroy();
      }
      if (this.elseFrag) {
        this.elseFrag.destroy();
      }
    }
  };

  var show = {

    bind: function bind() {
      // check else block
      var next = this.el.nextElementSibling;
      if (next && getAttr(next, 'v-else') !== null) {
        this.elseEl = next;
      }
    },

    update: function update(value) {
      this.apply(this.el, value);
      if (this.elseEl) {
        this.apply(this.elseEl, !value);
      }
    },

    apply: function apply(el, value) {
      if (inDoc(el)) {
        applyTransition(el, value ? 1 : -1, toggle, this.vm);
      } else {
        toggle();
      }
      function toggle() {
        el.style.display = value ? '' : 'none';
      }
    }
  };

  var text$2 = {

    bind: function bind() {
      var self = this;
      var el = this.el;
      var isRange = el.type === 'range';
      var lazy = this.params.lazy;
      var number = this.params.number;
      var debounce = this.params.debounce;

      // handle composition events.
      //   http://blog.evanyou.me/2014/01/03/composition-event/
      // skip this for Android because it handles composition
      // events quite differently. Android doesn't trigger
      // composition events for language input methods e.g.
      // Chinese, but instead triggers them for spelling
      // suggestions... (see Discussion/#162)
      var composing = false;
      if (!isAndroid && !isRange) {
        this.on('compositionstart', function () {
          composing = true;
        });
        this.on('compositionend', function () {
          composing = false;
          // in IE11 the "compositionend" event fires AFTER
          // the "input" event, so the input handler is blocked
          // at the end... have to call it here.
          //
          // #1327: in lazy mode this is unecessary.
          if (!lazy) {
            self.listener();
          }
        });
      }

      // prevent messing with the input when user is typing,
      // and force update on blur.
      this.focused = false;
      if (!isRange && !lazy) {
        this.on('focus', function () {
          self.focused = true;
        });
        this.on('blur', function () {
          self.focused = false;
          // do not sync value after fragment removal (#2017)
          if (!self._frag || self._frag.inserted) {
            self.rawListener();
          }
        });
      }

      // Now attach the main listener
      this.listener = this.rawListener = function () {
        if (composing || !self._bound) {
          return;
        }
        var val = number || isRange ? toNumber(el.value) : el.value;
        self.set(val);
        // force update on next tick to avoid lock & same value
        // also only update when user is not typing
        nextTick(function () {
          if (self._bound && !self.focused) {
            self.update(self._watcher.value);
          }
        });
      };

      // apply debounce
      if (debounce) {
        this.listener = _debounce(this.listener, debounce);
      }

      // Support jQuery events, since jQuery.trigger() doesn't
      // trigger native events in some cases and some plugins
      // rely on $.trigger()
      //
      // We want to make sure if a listener is attached using
      // jQuery, it is also removed with jQuery, that's why
      // we do the check for each directive instance and
      // store that check result on itself. This also allows
      // easier test coverage control by unsetting the global
      // jQuery variable in tests.
      this.hasjQuery = typeof jQuery === 'function';
      if (this.hasjQuery) {
        var method = jQuery.fn.on ? 'on' : 'bind';
        jQuery(el)[method]('change', this.rawListener);
        if (!lazy) {
          jQuery(el)[method]('input', this.listener);
        }
      } else {
        this.on('change', this.rawListener);
        if (!lazy) {
          this.on('input', this.listener);
        }
      }

      // IE9 doesn't fire input event on backspace/del/cut
      if (!lazy && isIE9) {
        this.on('cut', function () {
          nextTick(self.listener);
        });
        this.on('keyup', function (e) {
          if (e.keyCode === 46 || e.keyCode === 8) {
            self.listener();
          }
        });
      }

      // set initial value if present
      if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {
        this.afterBind = this.listener;
      }
    },

    update: function update(value) {
      // #3029 only update when the value changes. This prevent
      // browsers from overwriting values like selectionStart
      value = _toString(value);
      if (value !== this.el.value) this.el.value = value;
    },

    unbind: function unbind() {
      var el = this.el;
      if (this.hasjQuery) {
        var method = jQuery.fn.off ? 'off' : 'unbind';
        jQuery(el)[method]('change', this.listener);
        jQuery(el)[method]('input', this.listener);
      }
    }
  };

  var radio = {

    bind: function bind() {
      var self = this;
      var el = this.el;

      this.getValue = function () {
        // value overwrite via v-bind:value
        if (el.hasOwnProperty('_value')) {
          return el._value;
        }
        var val = el.value;
        if (self.params.number) {
          val = toNumber(val);
        }
        return val;
      };

      this.listener = function () {
        self.set(self.getValue());
      };
      this.on('change', this.listener);

      if (el.hasAttribute('checked')) {
        this.afterBind = this.listener;
      }
    },

    update: function update(value) {
      this.el.checked = looseEqual(value, this.getValue());
    }
  };

  var select = {

    bind: function bind() {
      var _this = this;

      var self = this;
      var el = this.el;

      // method to force update DOM using latest value.
      this.forceUpdate = function () {
        if (self._watcher) {
          self.update(self._watcher.get());
        }
      };

      // check if this is a multiple select
      var multiple = this.multiple = el.hasAttribute('multiple');

      // attach listener
      this.listener = function () {
        var value = getValue(el, multiple);
        value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;
        self.set(value);
      };
      this.on('change', this.listener);

      // if has initial value, set afterBind
      var initValue = getValue(el, multiple, true);
      if (multiple && initValue.length || !multiple && initValue !== null) {
        this.afterBind = this.listener;
      }

      // All major browsers except Firefox resets
      // selectedIndex with value -1 to 0 when the element
      // is appended to a new parent, therefore we have to
      // force a DOM update whenever that happens...
      this.vm.$on('hook:attached', function () {
        nextTick(_this.forceUpdate);
      });
      if (!inDoc(el)) {
        nextTick(this.forceUpdate);
      }
    },

    update: function update(value) {
      var el = this.el;
      el.selectedIndex = -1;
      var multi = this.multiple && isArray(value);
      var options = el.options;
      var i = options.length;
      var op, val;
      while (i--) {
        op = options[i];
        val = op.hasOwnProperty('_value') ? op._value : op.value;
        /* eslint-disable eqeqeq */
        op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);
        /* eslint-enable eqeqeq */
      }
    },

    unbind: function unbind() {
      /* istanbul ignore next */
      this.vm.$off('hook:attached', this.forceUpdate);
    }
  };

  /**
   * Get select value
   *
   * @param {SelectElement} el
   * @param {Boolean} multi
   * @param {Boolean} init
   * @return {Array|*}
   */

  function getValue(el, multi, init) {
    var res = multi ? [] : null;
    var op, val, selected;
    for (var i = 0, l = el.options.length; i < l; i++) {
      op = el.options[i];
      selected = init ? op.hasAttribute('selected') : op.selected;
      if (selected) {
        val = op.hasOwnProperty('_value') ? op._value : op.value;
        if (multi) {
          res.push(val);
        } else {
          return val;
        }
      }
    }
    return res;
  }

  /**
   * Native Array.indexOf uses strict equal, but in this
   * case we need to match string/numbers with custom equal.
   *
   * @param {Array} arr
   * @param {*} val
   */

  function indexOf$1(arr, val) {
    var i = arr.length;
    while (i--) {
      if (looseEqual(arr[i], val)) {
        return i;
      }
    }
    return -1;
  }

  var checkbox = {

    bind: function bind() {
      var self = this;
      var el = this.el;

      this.getValue = function () {
        return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;
      };

      function getBooleanValue() {
        var val = el.checked;
        if (val && el.hasOwnProperty('_trueValue')) {
          return el._trueValue;
        }
        if (!val && el.hasOwnProperty('_falseValue')) {
          return el._falseValue;
        }
        return val;
      }

      this.listener = function () {
        var model = self._watcher.value;
        if (isArray(model)) {
          var val = self.getValue();
          if (el.checked) {
            if (indexOf(model, val) < 0) {
              model.push(val);
            }
          } else {
            model.$remove(val);
          }
        } else {
          self.set(getBooleanValue());
        }
      };

      this.on('change', this.listener);
      if (el.hasAttribute('checked')) {
        this.afterBind = this.listener;
      }
    },

    update: function update(value) {
      var el = this.el;
      if (isArray(value)) {
        el.checked = indexOf(value, this.getValue()) > -1;
      } else {
        if (el.hasOwnProperty('_trueValue')) {
          el.checked = looseEqual(value, el._trueValue);
        } else {
          el.checked = !!value;
        }
      }
    }
  };

  var handlers = {
    text: text$2,
    radio: radio,
    select: select,
    checkbox: checkbox
  };

  var model = {

    priority: MODEL,
    twoWay: true,
    handlers: handlers,
    params: ['lazy', 'number', 'debounce'],

    /**
     * Possible elements:
     *   <select>
     *   <textarea>
     *   <input type="*">
     *     - text
     *     - checkbox
     *     - radio
     *     - number
     */

    bind: function bind() {
      // friendly warning...
      this.checkFilters();
      if (this.hasRead && !this.hasWrite) {
        ("development") !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model="' + this.descriptor.raw + '". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);
      }
      var el = this.el;
      var tag = el.tagName;
      var handler;
      if (tag === 'INPUT') {
        handler = handlers[el.type] || handlers.text;
      } else if (tag === 'SELECT') {
        handler = handlers.select;
      } else if (tag === 'TEXTAREA') {
        handler = handlers.text;
      } else {
        ("development") !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);
        return;
      }
      el.__v_model = this;
      handler.bind.call(this);
      this.update = handler.update;
      this._unbind = handler.unbind;
    },

    /**
     * Check read/write filter stats.
     */

    checkFilters: function checkFilters() {
      var filters = this.filters;
      if (!filters) return;
      var i = filters.length;
      while (i--) {
        var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);
        if (typeof filter === 'function' || filter.read) {
          this.hasRead = true;
        }
        if (filter.write) {
          this.hasWrite = true;
        }
      }
    },

    unbind: function unbind() {
      this.el.__v_model = null;
      this._unbind && this._unbind();
    }
  };

  // keyCode aliases
  var keyCodes = {
    esc: 27,
    tab: 9,
    enter: 13,
    space: 32,
    'delete': [8, 46],
    up: 38,
    left: 37,
    right: 39,
    down: 40
  };

  function keyFilter(handler, keys) {
    var codes = keys.map(function (key) {
      var charCode = key.charCodeAt(0);
      if (charCode > 47 && charCode < 58) {
        return parseInt(key, 10);
      }
      if (key.length === 1) {
        charCode = key.toUpperCase().charCodeAt(0);
        if (charCode > 64 && charCode < 91) {
          return charCode;
        }
      }
      return keyCodes[key];
    });
    codes = [].concat.apply([], codes);
    return function keyHandler(e) {
      if (codes.indexOf(e.keyCode) > -1) {
        return handler.call(this, e);
      }
    };
  }

  function stopFilter(handler) {
    return function stopHandler(e) {
      e.stopPropagation();
      return handler.call(this, e);
    };
  }

  function preventFilter(handler) {
    return function preventHandler(e) {
      e.preventDefault();
      return handler.call(this, e);
    };
  }

  function selfFilter(handler) {
    return function selfHandler(e) {
      if (e.target === e.currentTarget) {
        return handler.call(this, e);
      }
    };
  }

  var on$1 = {

    priority: ON,
    acceptStatement: true,
    keyCodes: keyCodes,

    bind: function bind() {
      // deal with iframes
      if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {
        var self = this;
        this.iframeBind = function () {
          on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);
        };
        this.on('load', this.iframeBind);
      }
    },

    update: function update(handler) {
      // stub a noop for v-on with no value,
      // e.g. @mousedown.prevent
      if (!this.descriptor.raw) {
        handler = function () {};
      }

      if (typeof handler !== 'function') {
        ("development") !== 'production' && warn('v-on:' + this.arg + '="' + this.expression + '" expects a function value, ' + 'got ' + handler, this.vm);
        return;
      }

      // apply modifiers
      if (this.modifiers.stop) {
        handler = stopFilter(handler);
      }
      if (this.modifiers.prevent) {
        handler = preventFilter(handler);
      }
      if (this.modifiers.self) {
        handler = selfFilter(handler);
      }
      // key filter
      var keys = Object.keys(this.modifiers).filter(function (key) {
        return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';
      });
      if (keys.length) {
        handler = keyFilter(handler, keys);
      }

      this.reset();
      this.handler = handler;

      if (this.iframeBind) {
        this.iframeBind();
      } else {
        on(this.el, this.arg, this.handler, this.modifiers.capture);
      }
    },

    reset: function reset() {
      var el = this.iframeBind ? this.el.contentWindow : this.el;
      if (this.handler) {
        off(el, this.arg, this.handler);
      }
    },

    unbind: function unbind() {
      this.reset();
    }
  };

  var prefixes = ['-webkit-', '-moz-', '-ms-'];
  var camelPrefixes = ['Webkit', 'Moz', 'ms'];
  var importantRE = /!important;?$/;
  var propCache = Object.create(null);

  var testEl = null;

  var style = {

    deep: true,

    update: function update(value) {
      if (typeof value === 'string') {
        this.el.style.cssText = value;
      } else if (isArray(value)) {
        this.handleObject(value.reduce(extend, {}));
      } else {
        this.handleObject(value || {});
      }
    },

    handleObject: function handleObject(value) {
      // cache object styles so that only changed props
      // are actually updated.
      var cache = this.cache || (this.cache = {});
      var name, val;
      for (name in cache) {
        if (!(name in value)) {
          this.handleSingle(name, null);
          delete cache[name];
        }
      }
      for (name in value) {
        val = value[name];
        if (val !== cache[name]) {
          cache[name] = val;
          this.handleSingle(name, val);
        }
      }
    },

    handleSingle: function handleSingle(prop, value) {
      prop = normalize(prop);
      if (!prop) return; // unsupported prop
      // cast possible numbers/booleans into strings
      if (value != null) value += '';
      if (value) {
        var isImportant = importantRE.test(value) ? 'important' : '';
        if (isImportant) {
          /* istanbul ignore if */
          if (true) {
            warn('It\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');
          }
          value = value.replace(importantRE, '').trim();
          this.el.style.setProperty(prop.kebab, value, isImportant);
        } else {
          this.el.style[prop.camel] = value;
        }
      } else {
        this.el.style[prop.camel] = '';
      }
    }

  };

  /**
   * Normalize a CSS property name.
   * - cache result
   * - auto prefix
   * - camelCase -> dash-case
   *
   * @param {String} prop
   * @return {String}
   */

  function normalize(prop) {
    if (propCache[prop]) {
      return propCache[prop];
    }
    var res = prefix(prop);
    propCache[prop] = propCache[res] = res;
    return res;
  }

  /**
   * Auto detect the appropriate prefix for a CSS property.
   * https://gist.github.com/paulirish/523692
   *
   * @param {String} prop
   * @return {String}
   */

  function prefix(prop) {
    prop = hyphenate(prop);
    var camel = camelize(prop);
    var upper = camel.charAt(0).toUpperCase() + camel.slice(1);
    if (!testEl) {
      testEl = document.createElement('div');
    }
    var i = prefixes.length;
    var prefixed;
    if (camel !== 'filter' && camel in testEl.style) {
      return {
        kebab: prop,
        camel: camel
      };
    }
    while (i--) {
      prefixed = camelPrefixes[i] + upper;
      if (prefixed in testEl.style) {
        return {
          kebab: prefixes[i] + prop,
          camel: prefixed
        };
      }
    }
  }

  // xlink
  var xlinkNS = 'http://www.w3.org/1999/xlink';
  var xlinkRE = /^xlink:/;

  // check for attributes that prohibit interpolations
  var disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;
  // these attributes should also set their corresponding properties
  // because they only affect the initial state of the element
  var attrWithPropsRE = /^(?:value|checked|selected|muted)$/;
  // these attributes expect enumrated values of "true" or "false"
  // but are not boolean attributes
  var enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;

  // these attributes should set a hidden property for
  // binding v-model to object values
  var modelProps = {
    value: '_value',
    'true-value': '_trueValue',
    'false-value': '_falseValue'
  };

  var bind$1 = {

    priority: BIND,

    bind: function bind() {
      var attr = this.arg;
      var tag = this.el.tagName;
      // should be deep watch on object mode
      if (!attr) {
        this.deep = true;
      }
      // handle interpolation bindings
      var descriptor = this.descriptor;
      var tokens = descriptor.interp;
      if (tokens) {
        // handle interpolations with one-time tokens
        if (descriptor.hasOneTime) {
          this.expression = tokensToExp(tokens, this._scope || this.vm);
        }

        // only allow binding on native attributes
        if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {
          ("development") !== 'production' && warn(attr + '="' + descriptor.raw + '": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);
          this.el.removeAttribute(attr);
          this.invalid = true;
        }

        /* istanbul ignore if */
        if (true) {
          var raw = attr + '="' + descriptor.raw + '": ';
          // warn src
          if (attr === 'src') {
            warn(raw + 'interpolation in "src" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);
          }

          // warn style
          if (attr === 'style') {
            warn(raw + 'interpolation in "style" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);
          }
        }
      }
    },

    update: function update(value) {
      if (this.invalid) {
        return;
      }
      var attr = this.arg;
      if (this.arg) {
        this.handleSingle(attr, value);
      } else {
        this.handleObject(value || {});
      }
    },

    // share object handler with v-bind:class
    handleObject: style.handleObject,

    handleSingle: function handleSingle(attr, value) {
      var el = this.el;
      var interp = this.descriptor.interp;
      if (this.modifiers.camel) {
        attr = camelize(attr);
      }
      if (!interp && attrWithPropsRE.test(attr) && attr in el) {
        var attrValue = attr === 'value' ? value == null // IE9 will set input.value to "null" for null...
        ? '' : value : value;

        if (el[attr] !== attrValue) {
          el[attr] = attrValue;
        }
      }
      // set model props
      var modelProp = modelProps[attr];
      if (!interp && modelProp) {
        el[modelProp] = value;
        // update v-model if present
        var model = el.__v_model;
        if (model) {
          model.listener();
        }
      }
      // do not set value attribute for textarea
      if (attr === 'value' && el.tagName === 'TEXTAREA') {
        el.removeAttribute(attr);
        return;
      }
      // update attribute
      if (enumeratedAttrRE.test(attr)) {
        el.setAttribute(attr, value ? 'true' : 'false');
      } else if (value != null && value !== false) {
        if (attr === 'class') {
          // handle edge case #1960:
          // class interpolation should not overwrite Vue transition class
          if (el.__v_trans) {
            value += ' ' + el.__v_trans.id + '-transition';
          }
          setClass(el, value);
        } else if (xlinkRE.test(attr)) {
          el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);
        } else {
          el.setAttribute(attr, value === true ? '' : value);
        }
      } else {
        el.removeAttribute(attr);
      }
    }
  };

  var el = {

    priority: EL,

    bind: function bind() {
      /* istanbul ignore if */
      if (!this.arg) {
        return;
      }
      var id = this.id = camelize(this.arg);
      var refs = (this._scope || this.vm).$els;
      if (hasOwn(refs, id)) {
        refs[id] = this.el;
      } else {
        defineReactive(refs, id, this.el);
      }
    },

    unbind: function unbind() {
      var refs = (this._scope || this.vm).$els;
      if (refs[this.id] === this.el) {
        refs[this.id] = null;
      }
    }
  };

  var ref = {
    bind: function bind() {
      ("development") !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);
    }
  };

  var cloak = {
    bind: function bind() {
      var el = this.el;
      this.vm.$once('pre-hook:compiled', function () {
        el.removeAttribute('v-cloak');
      });
    }
  };

  // must export plain object
  var directives = {
    text: text$1,
    html: html,
    'for': vFor,
    'if': vIf,
    show: show,
    model: model,
    on: on$1,
    bind: bind$1,
    el: el,
    ref: ref,
    cloak: cloak
  };

  var vClass = {

    deep: true,

    update: function update(value) {
      if (!value) {
        this.cleanup();
      } else if (typeof value === 'string') {
        this.setClass(value.trim().split(/\s+/));
      } else {
        this.setClass(normalize$1(value));
      }
    },

    setClass: function setClass(value) {
      this.cleanup(value);
      for (var i = 0, l = value.length; i < l; i++) {
        var val = value[i];
        if (val) {
          apply(this.el, val, addClass);
        }
      }
      this.prevKeys = value;
    },

    cleanup: function cleanup(value) {
      var prevKeys = this.prevKeys;
      if (!prevKeys) return;
      var i = prevKeys.length;
      while (i--) {
        var key = prevKeys[i];
        if (!value || value.indexOf(key) < 0) {
          apply(this.el, key, removeClass);
        }
      }
    }
  };

  /**
   * Normalize objects and arrays (potentially containing objects)
   * into array of strings.
   *
   * @param {Object|Array<String|Object>} value
   * @return {Array<String>}
   */

  function normalize$1(value) {
    var res = [];
    if (isArray(value)) {
      for (var i = 0, l = value.length; i < l; i++) {
        var _key = value[i];
        if (_key) {
          if (typeof _key === 'string') {
            res.push(_key);
          } else {
            for (var k in _key) {
              if (_key[k]) res.push(k);
            }
          }
        }
      }
    } else if (isObject(value)) {
      for (var key in value) {
        if (value[key]) res.push(key);
      }
    }
    return res;
  }

  /**
   * Add or remove a class/classes on an element
   *
   * @param {Element} el
   * @param {String} key The class name. This may or may not
   *                     contain a space character, in such a
   *                     case we'll deal with multiple class
   *                     names at once.
   * @param {Function} fn
   */

  function apply(el, key, fn) {
    key = key.trim();
    if (key.indexOf(' ') === -1) {
      fn(el, key);
      return;
    }
    // The key contains one or more space characters.
    // Since a class name doesn't accept such characters, we
    // treat it as multiple classes.
    var keys = key.split(/\s+/);
    for (var i = 0, l = keys.length; i < l; i++) {
      fn(el, keys[i]);
    }
  }

  var component = {

    priority: COMPONENT,

    params: ['keep-alive', 'transition-mode', 'inline-template'],

    /**
     * Setup. Two possible usages:
     *
     * - static:
     *   <comp> or <div v-component="comp">
     *
     * - dynamic:
     *   <component :is="view">
     */

    bind: function bind() {
      if (!this.el.__vue__) {
        // keep-alive cache
        this.keepAlive = this.params.keepAlive;
        if (this.keepAlive) {
          this.cache = {};
        }
        // check inline-template
        if (this.params.inlineTemplate) {
          // extract inline template as a DocumentFragment
          this.inlineTemplate = extractContent(this.el, true);
        }
        // component resolution related state
        this.pendingComponentCb = this.Component = null;
        // transition related state
        this.pendingRemovals = 0;
        this.pendingRemovalCb = null;
        // create a ref anchor
        this.anchor = createAnchor('v-component');
        replace(this.el, this.anchor);
        // remove is attribute.
        // this is removed during compilation, but because compilation is
        // cached, when the component is used elsewhere this attribute
        // will remain at link time.
        this.el.removeAttribute('is');
        this.el.removeAttribute(':is');
        // remove ref, same as above
        if (this.descriptor.ref) {
          this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));
        }
        // if static, build right now.
        if (this.literal) {
          this.setComponent(this.expression);
        }
      } else {
        ("development") !== 'production' && warn('cannot mount component "' + this.expression + '" ' + 'on already mounted element: ' + this.el);
      }
    },

    /**
     * Public update, called by the watcher in the dynamic
     * literal scenario, e.g. <component :is="view">
     */

    update: function update(value) {
      if (!this.literal) {
        this.setComponent(value);
      }
    },

    /**
     * Switch dynamic components. May resolve the component
     * asynchronously, and perform transition based on
     * specified transition mode. Accepts a few additional
     * arguments specifically for vue-router.
     *
     * The callback is called when the full transition is
     * finished.
     *
     * @param {String} value
     * @param {Function} [cb]
     */

    setComponent: function setComponent(value, cb) {
      this.invalidatePending();
      if (!value) {
        // just remove current
        this.unbuild(true);
        this.remove(this.childVM, cb);
        this.childVM = null;
      } else {
        var self = this;
        this.resolveComponent(value, function () {
          self.mountComponent(cb);
        });
      }
    },

    /**
     * Resolve the component constructor to use when creating
     * the child vm.
     *
     * @param {String|Function} value
     * @param {Function} cb
     */

    resolveComponent: function resolveComponent(value, cb) {
      var self = this;
      this.pendingComponentCb = cancellable(function (Component) {
        self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);
        self.Component = Component;
        cb();
      });
      this.vm._resolveComponent(value, this.pendingComponentCb);
    },

    /**
     * Create a new instance using the current constructor and
     * replace the existing instance. This method doesn't care
     * whether the new component and the old one are actually
     * the same.
     *
     * @param {Function} [cb]
     */

    mountComponent: function mountComponent(cb) {
      // actual mount
      this.unbuild(true);
      var self = this;
      var activateHooks = this.Component.options.activate;
      var cached = this.getCached();
      var newComponent = this.build();
      if (activateHooks && !cached) {
        this.waitingFor = newComponent;
        callActivateHooks(activateHooks, newComponent, function () {
          if (self.waitingFor !== newComponent) {
            return;
          }
          self.waitingFor = null;
          self.transition(newComponent, cb);
        });
      } else {
        // update ref for kept-alive component
        if (cached) {
          newComponent._updateRef();
        }
        this.transition(newComponent, cb);
      }
    },

    /**
     * When the component changes or unbinds before an async
     * constructor is resolved, we need to invalidate its
     * pending callback.
     */

    invalidatePending: function invalidatePending() {
      if (this.pendingComponentCb) {
        this.pendingComponentCb.cancel();
        this.pendingComponentCb = null;
      }
    },

    /**
     * Instantiate/insert a new child vm.
     * If keep alive and has cached instance, insert that
     * instance; otherwise build a new one and cache it.
     *
     * @param {Object} [extraOptions]
     * @return {Vue} - the created instance
     */

    build: function build(extraOptions) {
      var cached = this.getCached();
      if (cached) {
        return cached;
      }
      if (this.Component) {
        // default options
        var options = {
          name: this.ComponentName,
          el: cloneNode(this.el),
          template: this.inlineTemplate,
          // make sure to add the child with correct parent
          // if this is a transcluded component, its parent
          // should be the transclusion host.
          parent: this._host || this.vm,
          // if no inline-template, then the compiled
          // linker can be cached for better performance.
          _linkerCachable: !this.inlineTemplate,
          _ref: this.descriptor.ref,
          _asComponent: true,
          _isRouterView: this._isRouterView,
          // if this is a transcluded component, context
          // will be the common parent vm of this instance
          // and its host.
          _context: this.vm,
          // if this is inside an inline v-for, the scope
          // will be the intermediate scope created for this
          // repeat fragment. this is used for linking props
          // and container directives.
          _scope: this._scope,
          // pass in the owner fragment of this component.
          // this is necessary so that the fragment can keep
          // track of its contained components in order to
          // call attach/detach hooks for them.
          _frag: this._frag
        };
        // extra options
        // in 1.0.0 this is used by vue-router only
        /* istanbul ignore if */
        if (extraOptions) {
          extend(options, extraOptions);
        }
        var child = new this.Component(options);
        if (this.keepAlive) {
          this.cache[this.Component.cid] = child;
        }
        /* istanbul ignore if */
        if (("development") !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {
          warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);
        }
        return child;
      }
    },

    /**
     * Try to get a cached instance of the current component.
     *
     * @return {Vue|undefined}
     */

    getCached: function getCached() {
      return this.keepAlive && this.cache[this.Component.cid];
    },

    /**
     * Teardown the current child, but defers cleanup so
     * that we can separate the destroy and removal steps.
     *
     * @param {Boolean} defer
     */

    unbuild: function unbuild(defer) {
      if (this.waitingFor) {
        if (!this.keepAlive) {
          this.waitingFor.$destroy();
        }
        this.waitingFor = null;
      }
      var child = this.childVM;
      if (!child || this.keepAlive) {
        if (child) {
          // remove ref
          child._inactive = true;
          child._updateRef(true);
        }
        return;
      }
      // the sole purpose of `deferCleanup` is so that we can
      // "deactivate" the vm right now and perform DOM removal
      // later.
      child.$destroy(false, defer);
    },

    /**
     * Remove current destroyed child and manually do
     * the cleanup after removal.
     *
     * @param {Function} cb
     */

    remove: function remove(child, cb) {
      var keepAlive = this.keepAlive;
      if (child) {
        // we may have a component switch when a previous
        // component is still being transitioned out.
        // we want to trigger only one lastest insertion cb
        // when the existing transition finishes. (#1119)
        this.pendingRemovals++;
        this.pendingRemovalCb = cb;
        var self = this;
        child.$remove(function () {
          self.pendingRemovals--;
          if (!keepAlive) child._cleanup();
          if (!self.pendingRemovals && self.pendingRemovalCb) {
            self.pendingRemovalCb();
            self.pendingRemovalCb = null;
          }
        });
      } else if (cb) {
        cb();
      }
    },

    /**
     * Actually swap the components, depending on the
     * transition mode. Defaults to simultaneous.
     *
     * @param {Vue} target
     * @param {Function} [cb]
     */

    transition: function transition(target, cb) {
      var self = this;
      var current = this.childVM;
      // for devtool inspection
      if (current) current._inactive = true;
      target._inactive = false;
      this.childVM = target;
      switch (self.params.transitionMode) {
        case 'in-out':
          target.$before(self.anchor, function () {
            self.remove(current, cb);
          });
          break;
        case 'out-in':
          self.remove(current, function () {
            target.$before(self.anchor, cb);
          });
          break;
        default:
          self.remove(current);
          target.$before(self.anchor, cb);
      }
    },

    /**
     * Unbind.
     */

    unbind: function unbind() {
      this.invalidatePending();
      // Do not defer cleanup when unbinding
      this.unbuild();
      // destroy all keep-alive cached instances
      if (this.cache) {
        for (var key in this.cache) {
          this.cache[key].$destroy();
        }
        this.cache = null;
      }
    }
  };

  /**
   * Call activate hooks in order (asynchronous)
   *
   * @param {Array} hooks
   * @param {Vue} vm
   * @param {Function} cb
   */

  function callActivateHooks(hooks, vm, cb) {
    var total = hooks.length;
    var called = 0;
    hooks[0].call(vm, next);
    function next() {
      if (++called >= total) {
        cb();
      } else {
        hooks[called].call(vm, next);
      }
    }
  }

  var propBindingModes = config._propBindingModes;
  var empty = {};

  // regexes
  var identRE$1 = /^[$_a-zA-Z]+[\w$]*$/;
  var settablePathRE = /^[A-Za-z_$][\w$]*(\.[A-Za-z_$][\w$]*|\[[^\[\]]+\])*$/;

  /**
   * Compile props on a root element and return
   * a props link function.
   *
   * @param {Element|DocumentFragment} el
   * @param {Array} propOptions
   * @param {Vue} vm
   * @return {Function} propsLinkFn
   */

  function compileProps(el, propOptions, vm) {
    var props = [];
    var names = Object.keys(propOptions);
    var i = names.length;
    var options, name, attr, value, path, parsed, prop;
    while (i--) {
      name = names[i];
      options = propOptions[name] || empty;

      if (("development") !== 'production' && name === '$data') {
        warn('Do not use $data as prop.', vm);
        continue;
      }

      // props could contain dashes, which will be
      // interpreted as minus calculations by the parser
      // so we need to camelize the path here
      path = camelize(name);
      if (!identRE$1.test(path)) {
        ("development") !== 'production' && warn('Invalid prop key: "' + name + '". Prop keys ' + 'must be valid identifiers.', vm);
        continue;
      }

      prop = {
        name: name,
        path: path,
        options: options,
        mode: propBindingModes.ONE_WAY,
        raw: null
      };

      attr = hyphenate(name);
      // first check dynamic version
      if ((value = getBindAttr(el, attr)) === null) {
        if ((value = getBindAttr(el, attr + '.sync')) !== null) {
          prop.mode = propBindingModes.TWO_WAY;
        } else if ((value = getBindAttr(el, attr + '.once')) !== null) {
          prop.mode = propBindingModes.ONE_TIME;
        }
      }
      if (value !== null) {
        // has dynamic binding!
        prop.raw = value;
        parsed = parseDirective(value);
        value = parsed.expression;
        prop.filters = parsed.filters;
        // check binding type
        if (isLiteral(value) && !parsed.filters) {
          // for expressions containing literal numbers and
          // booleans, there's no need to setup a prop binding,
          // so we can optimize them as a one-time set.
          prop.optimizedLiteral = true;
        } else {
          prop.dynamic = true;
          // check non-settable path for two-way bindings
          if (("development") !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {
            prop.mode = propBindingModes.ONE_WAY;
            warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);
          }
        }
        prop.parentPath = value;

        // warn required two-way
        if (("development") !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {
          warn('Prop "' + name + '" expects a two-way binding type.', vm);
        }
      } else if ((value = getAttr(el, attr)) !== null) {
        // has literal binding!
        prop.raw = value;
      } else if (true) {
        // check possible camelCase prop usage
        var lowerCaseName = path.toLowerCase();
        value = /[A-Z\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));
        if (value) {
          warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);
        } else if (options.required) {
          // warn missing required
          warn('Missing required prop: ' + name, vm);
        }
      }
      // push prop
      props.push(prop);
    }
    return makePropsLinkFn(props);
  }

  /**
   * Build a function that applies props to a vm.
   *
   * @param {Array} props
   * @return {Function} propsLinkFn
   */

  function makePropsLinkFn(props) {
    return function propsLinkFn(vm, scope) {
      // store resolved props info
      vm._props = {};
      var inlineProps = vm.$options.propsData;
      var i = props.length;
      var prop, path, options, value, raw;
      while (i--) {
        prop = props[i];
        raw = prop.raw;
        path = prop.path;
        options = prop.options;
        vm._props[path] = prop;
        if (inlineProps && hasOwn(inlineProps, path)) {
          initProp(vm, prop, inlineProps[path]);
        }if (raw === null) {
          // initialize absent prop
          initProp(vm, prop, undefined);
        } else if (prop.dynamic) {
          // dynamic prop
          if (prop.mode === propBindingModes.ONE_TIME) {
            // one time binding
            value = (scope || vm._context || vm).$get(prop.parentPath);
            initProp(vm, prop, value);
          } else {
            if (vm._context) {
              // dynamic binding
              vm._bindDir({
                name: 'prop',
                def: propDef,
                prop: prop
              }, null, null, scope); // el, host, scope
            } else {
                // root instance
                initProp(vm, prop, vm.$get(prop.parentPath));
              }
          }
        } else if (prop.optimizedLiteral) {
          // optimized literal, cast it and just set once
          var stripped = stripQuotes(raw);
          value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;
          initProp(vm, prop, value);
        } else {
          // string literal, but we need to cater for
          // Boolean props with no value, or with same
          // literal value (e.g. disabled="disabled")
          // see https://github.com/vuejs/vue-loader/issues/182
          value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;
          initProp(vm, prop, value);
        }
      }
    };
  }

  /**
   * Process a prop with a rawValue, applying necessary coersions,
   * default values & assertions and call the given callback with
   * processed value.
   *
   * @param {Vue} vm
   * @param {Object} prop
   * @param {*} rawValue
   * @param {Function} fn
   */

  function processPropValue(vm, prop, rawValue, fn) {
    var isSimple = prop.dynamic && isSimplePath(prop.parentPath);
    var value = rawValue;
    if (value === undefined) {
      value = getPropDefaultValue(vm, prop);
    }
    value = coerceProp(prop, value, vm);
    var coerced = value !== rawValue;
    if (!assertProp(prop, value, vm)) {
      value = undefined;
    }
    if (isSimple && !coerced) {
      withoutConversion(function () {
        fn(value);
      });
    } else {
      fn(value);
    }
  }

  /**
   * Set a prop's initial value on a vm and its data object.
   *
   * @param {Vue} vm
   * @param {Object} prop
   * @param {*} value
   */

  function initProp(vm, prop, value) {
    processPropValue(vm, prop, value, function (value) {
      defineReactive(vm, prop.path, value);
    });
  }

  /**
   * Update a prop's value on a vm.
   *
   * @param {Vue} vm
   * @param {Object} prop
   * @param {*} value
   */

  function updateProp(vm, prop, value) {
    processPropValue(vm, prop, value, function (value) {
      vm[prop.path] = value;
    });
  }

  /**
   * Get the default value of a prop.
   *
   * @param {Vue} vm
   * @param {Object} prop
   * @return {*}
   */

  function getPropDefaultValue(vm, prop) {
    // no default, return undefined
    var options = prop.options;
    if (!hasOwn(options, 'default')) {
      // absent boolean value defaults to false
      return options.type === Boolean ? false : undefined;
    }
    var def = options['default'];
    // warn against non-factory defaults for Object & Array
    if (isObject(def)) {
      ("development") !== 'production' && warn('Invalid default value for prop "' + prop.name + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
    }
    // call factory function for non-Function types
    return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;
  }

  /**
   * Assert whether a prop is valid.
   *
   * @param {Object} prop
   * @param {*} value
   * @param {Vue} vm
   */

  function assertProp(prop, value, vm) {
    if (!prop.options.required && ( // non-required
    prop.raw === null || // abscent
    value == null) // null or undefined
    ) {
        return true;
      }
    var options = prop.options;
    var type = options.type;
    var valid = !type;
    var expectedTypes = [];
    if (type) {
      if (!isArray(type)) {
        type = [type];
      }
      for (var i = 0; i < type.length && !valid; i++) {
        var assertedType = assertType(value, type[i]);
        expectedTypes.push(assertedType.expectedType);
        valid = assertedType.valid;
      }
    }
    if (!valid) {
      if (true) {
        warn('Invalid prop: type check failed for prop "' + prop.name + '".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);
      }
      return false;
    }
    var validator = options.validator;
    if (validator) {
      if (!validator(value)) {
        ("development") !== 'production' && warn('Invalid prop: custom validator check failed for prop "' + prop.name + '".', vm);
        return false;
      }
    }
    return true;
  }

  /**
   * Force parsing value with coerce option.
   *
   * @param {*} value
   * @param {Object} options
   * @return {*}
   */

  function coerceProp(prop, value, vm) {
    var coerce = prop.options.coerce;
    if (!coerce) {
      return value;
    }
    if (typeof coerce === 'function') {
      return coerce(value);
    } else {
      ("development") !== 'production' && warn('Invalid coerce for prop "' + prop.name + '": expected function, got ' + typeof coerce + '.', vm);
      return value;
    }
  }

  /**
   * Assert the type of a value
   *
   * @param {*} value
   * @param {Function} type
   * @return {Object}
   */

  function assertType(value, type) {
    var valid;
    var expectedType;
    if (type === String) {
      expectedType = 'string';
      valid = typeof value === expectedType;
    } else if (type === Number) {
      expectedType = 'number';
      valid = typeof value === expectedType;
    } else if (type === Boolean) {
      expectedType = 'boolean';
      valid = typeof value === expectedType;
    } else if (type === Function) {
      expectedType = 'function';
      valid = typeof value === expectedType;
    } else if (type === Object) {
      expectedType = 'object';
      valid = isPlainObject(value);
    } else if (type === Array) {
      expectedType = 'array';
      valid = isArray(value);
    } else {
      valid = value instanceof type;
    }
    return {
      valid: valid,
      expectedType: expectedType
    };
  }

  /**
   * Format type for output
   *
   * @param {String} type
   * @return {String}
   */

  function formatType(type) {
    return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';
  }

  /**
   * Format value
   *
   * @param {*} value
   * @return {String}
   */

  function formatValue(val) {
    return Object.prototype.toString.call(val).slice(8, -1);
  }

  var bindingModes = config._propBindingModes;

  var propDef = {

    bind: function bind() {
      var child = this.vm;
      var parent = child._context;
      // passed in from compiler directly
      var prop = this.descriptor.prop;
      var childKey = prop.path;
      var parentKey = prop.parentPath;
      var twoWay = prop.mode === bindingModes.TWO_WAY;

      var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {
        updateProp(child, prop, val);
      }, {
        twoWay: twoWay,
        filters: prop.filters,
        // important: props need to be observed on the
        // v-for scope if present
        scope: this._scope
      });

      // set the child initial value.
      initProp(child, prop, parentWatcher.value);

      // setup two-way binding
      if (twoWay) {
        // important: defer the child watcher creation until
        // the created hook (after data observation)
        var self = this;
        child.$once('pre-hook:created', function () {
          self.childWatcher = new Watcher(child, childKey, function (val) {
            parentWatcher.set(val);
          }, {
            // ensure sync upward before parent sync down.
            // this is necessary in cases e.g. the child
            // mutates a prop array, then replaces it. (#1683)
            sync: true
          });
        });
      }
    },

    unbind: function unbind() {
      this.parentWatcher.teardown();
      if (this.childWatcher) {
        this.childWatcher.teardown();
      }
    }
  };

  var queue$1 = [];
  var queued = false;

  /**
   * Push a job into the queue.
   *
   * @param {Function} job
   */

  function pushJob(job) {
    queue$1.push(job);
    if (!queued) {
      queued = true;
      nextTick(flush);
    }
  }

  /**
   * Flush the queue, and do one forced reflow before
   * triggering transitions.
   */

  function flush() {
    // Force layout
    var f = document.documentElement.offsetHeight;
    for (var i = 0; i < queue$1.length; i++) {
      queue$1[i]();
    }
    queue$1 = [];
    queued = false;
    // dummy return, so js linters don't complain about
    // unused variable f
    return f;
  }

  var TYPE_TRANSITION = 'transition';
  var TYPE_ANIMATION = 'animation';
  var transDurationProp = transitionProp + 'Duration';
  var animDurationProp = animationProp + 'Duration';

  /**
   * If a just-entered element is applied the
   * leave class while its enter transition hasn't started yet,
   * and the transitioned property has the same value for both
   * enter/leave, then the leave transition will be skipped and
   * the transitionend event never fires. This function ensures
   * its callback to be called after a transition has started
   * by waiting for double raf.
   *
   * It falls back to setTimeout on devices that support CSS
   * transitions but not raf (e.g. Android 4.2 browser) - since
   * these environments are usually slow, we are giving it a
   * relatively large timeout.
   */

  var raf = inBrowser && window.requestAnimationFrame;
  var waitForTransitionStart = raf
  /* istanbul ignore next */
  ? function (fn) {
    raf(function () {
      raf(fn);
    });
  } : function (fn) {
    setTimeout(fn, 50);
  };

  /**
   * A Transition object that encapsulates the state and logic
   * of the transition.
   *
   * @param {Element} el
   * @param {String} id
   * @param {Object} hooks
   * @param {Vue} vm
   */
  function Transition(el, id, hooks, vm) {
    this.id = id;
    this.el = el;
    this.enterClass = hooks && hooks.enterClass || id + '-enter';
    this.leaveClass = hooks && hooks.leaveClass || id + '-leave';
    this.hooks = hooks;
    this.vm = vm;
    // async state
    this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;
    this.justEntered = false;
    this.entered = this.left = false;
    this.typeCache = {};
    // check css transition type
    this.type = hooks && hooks.type;
    /* istanbul ignore if */
    if (true) {
      if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {
        warn('invalid CSS transition type for transition="' + this.id + '": ' + this.type, vm);
      }
    }
    // bind
    var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {
      self[m] = bind(self[m], self);
    });
  }

  var p$1 = Transition.prototype;

  /**
   * Start an entering transition.
   *
   * 1. enter transition triggered
   * 2. call beforeEnter hook
   * 3. add enter class
   * 4. insert/show element
   * 5. call enter hook (with possible explicit js callback)
   * 6. reflow
   * 7. based on transition type:
   *    - transition:
   *        remove class now, wait for transitionend,
   *        then done if there's no explicit js callback.
   *    - animation:
   *        wait for animationend, remove class,
   *        then done if there's no explicit js callback.
   *    - no css transition:
   *        done now if there's no explicit js callback.
   * 8. wait for either done or js callback, then call
   *    afterEnter hook.
   *
   * @param {Function} op - insert/show the element
   * @param {Function} [cb]
   */

  p$1.enter = function (op, cb) {
    this.cancelPending();
    this.callHook('beforeEnter');
    this.cb = cb;
    addClass(this.el, this.enterClass);
    op();
    this.entered = false;
    this.callHookWithCb('enter');
    if (this.entered) {
      return; // user called done synchronously.
    }
    this.cancel = this.hooks && this.hooks.enterCancelled;
    pushJob(this.enterNextTick);
  };

  /**
   * The "nextTick" phase of an entering transition, which is
   * to be pushed into a queue and executed after a reflow so
   * that removing the class can trigger a CSS transition.
   */

  p$1.enterNextTick = function () {
    var _this = this;

    // prevent transition skipping
    this.justEntered = true;
    waitForTransitionStart(function () {
      _this.justEntered = false;
    });
    var enterDone = this.enterDone;
    var type = this.getCssTransitionType(this.enterClass);
    if (!this.pendingJsCb) {
      if (type === TYPE_TRANSITION) {
        // trigger transition by removing enter class now
        removeClass(this.el, this.enterClass);
        this.setupCssCb(transitionEndEvent, enterDone);
      } else if (type === TYPE_ANIMATION) {
        this.setupCssCb(animationEndEvent, enterDone);
      } else {
        enterDone();
      }
    } else if (type === TYPE_TRANSITION) {
      removeClass(this.el, this.enterClass);
    }
  };

  /**
   * The "cleanup" phase of an entering transition.
   */

  p$1.enterDone = function () {
    this.entered = true;
    this.cancel = this.pendingJsCb = null;
    removeClass(this.el, this.enterClass);
    this.callHook('afterEnter');
    if (this.cb) this.cb();
  };

  /**
   * Start a leaving transition.
   *
   * 1. leave transition triggered.
   * 2. call beforeLeave hook
   * 3. add leave class (trigger css transition)
   * 4. call leave hook (with possible explicit js callback)
   * 5. reflow if no explicit js callback is provided
   * 6. based on transition type:
   *    - transition or animation:
   *        wait for end event, remove class, then done if
   *        there's no explicit js callback.
   *    - no css transition:
   *        done if there's no explicit js callback.
   * 7. wait for either done or js callback, then call
   *    afterLeave hook.
   *
   * @param {Function} op - remove/hide the element
   * @param {Function} [cb]
   */

  p$1.leave = function (op, cb) {
    this.cancelPending();
    this.callHook('beforeLeave');
    this.op = op;
    this.cb = cb;
    addClass(this.el, this.leaveClass);
    this.left = false;
    this.callHookWithCb('leave');
    if (this.left) {
      return; // user called done synchronously.
    }
    this.cancel = this.hooks && this.hooks.leaveCancelled;
    // only need to handle leaveDone if
    // 1. the transition is already done (synchronously called
    //    by the user, which causes this.op set to null)
    // 2. there's no explicit js callback
    if (this.op && !this.pendingJsCb) {
      // if a CSS transition leaves immediately after enter,
      // the transitionend event never fires. therefore we
      // detect such cases and end the leave immediately.
      if (this.justEntered) {
        this.leaveDone();
      } else {
        pushJob(this.leaveNextTick);
      }
    }
  };

  /**
   * The "nextTick" phase of a leaving transition.
   */

  p$1.leaveNextTick = function () {
    var type = this.getCssTransitionType(this.leaveClass);
    if (type) {
      var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;
      this.setupCssCb(event, this.leaveDone);
    } else {
      this.leaveDone();
    }
  };

  /**
   * The "cleanup" phase of a leaving transition.
   */

  p$1.leaveDone = function () {
    this.left = true;
    this.cancel = this.pendingJsCb = null;
    this.op();
    removeClass(this.el, this.leaveClass);
    this.callHook('afterLeave');
    if (this.cb) this.cb();
    this.op = null;
  };

  /**
   * Cancel any pending callbacks from a previously running
   * but not finished transition.
   */

  p$1.cancelPending = function () {
    this.op = this.cb = null;
    var hasPending = false;
    if (this.pendingCssCb) {
      hasPending = true;
      off(this.el, this.pendingCssEvent, this.pendingCssCb);
      this.pendingCssEvent = this.pendingCssCb = null;
    }
    if (this.pendingJsCb) {
      hasPending = true;
      this.pendingJsCb.cancel();
      this.pendingJsCb = null;
    }
    if (hasPending) {
      removeClass(this.el, this.enterClass);
      removeClass(this.el, this.leaveClass);
    }
    if (this.cancel) {
      this.cancel.call(this.vm, this.el);
      this.cancel = null;
    }
  };

  /**
   * Call a user-provided synchronous hook function.
   *
   * @param {String} type
   */

  p$1.callHook = function (type) {
    if (this.hooks && this.hooks[type]) {
      this.hooks[type].call(this.vm, this.el);
    }
  };

  /**
   * Call a user-provided, potentially-async hook function.
   * We check for the length of arguments to see if the hook
   * expects a `done` callback. If true, the transition's end
   * will be determined by when the user calls that callback;
   * otherwise, the end is determined by the CSS transition or
   * animation.
   *
   * @param {String} type
   */

  p$1.callHookWithCb = function (type) {
    var hook = this.hooks && this.hooks[type];
    if (hook) {
      if (hook.length > 1) {
        this.pendingJsCb = cancellable(this[type + 'Done']);
      }
      hook.call(this.vm, this.el, this.pendingJsCb);
    }
  };

  /**
   * Get an element's transition type based on the
   * calculated styles.
   *
   * @param {String} className
   * @return {Number}
   */

  p$1.getCssTransitionType = function (className) {
    /* istanbul ignore if */
    if (!transitionEndEvent ||
    // skip CSS transitions if page is not visible -
    // this solves the issue of transitionend events not
    // firing until the page is visible again.
    // pageVisibility API is supported in IE10+, same as
    // CSS transitions.
    document.hidden ||
    // explicit js-only transition
    this.hooks && this.hooks.css === false ||
    // element is hidden
    isHidden(this.el)) {
      return;
    }
    var type = this.type || this.typeCache[className];
    if (type) return type;
    var inlineStyles = this.el.style;
    var computedStyles = window.getComputedStyle(this.el);
    var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];
    if (transDuration && transDuration !== '0s') {
      type = TYPE_TRANSITION;
    } else {
      var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];
      if (animDuration && animDuration !== '0s') {
        type = TYPE_ANIMATION;
      }
    }
    if (type) {
      this.typeCache[className] = type;
    }
    return type;
  };

  /**
   * Setup a CSS transitionend/animationend callback.
   *
   * @param {String} event
   * @param {Function} cb
   */

  p$1.setupCssCb = function (event, cb) {
    this.pendingCssEvent = event;
    var self = this;
    var el = this.el;
    var onEnd = this.pendingCssCb = function (e) {
      if (e.target === el) {
        off(el, event, onEnd);
        self.pendingCssEvent = self.pendingCssCb = null;
        if (!self.pendingJsCb && cb) {
          cb();
        }
      }
    };
    on(el, event, onEnd);
  };

  /**
   * Check if an element is hidden - in that case we can just
   * skip the transition alltogether.
   *
   * @param {Element} el
   * @return {Boolean}
   */

  function isHidden(el) {
    if (/svg$/.test(el.namespaceURI)) {
      // SVG elements do not have offset(Width|Height)
      // so we need to check the client rect
      var rect = el.getBoundingClientRect();
      return !(rect.width || rect.height);
    } else {
      return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
    }
  }

  var transition$1 = {

    priority: TRANSITION,

    update: function update(id, oldId) {
      var el = this.el;
      // resolve on owner vm
      var hooks = resolveAsset(this.vm.$options, 'transitions', id);
      id = id || 'v';
      oldId = oldId || 'v';
      el.__v_trans = new Transition(el, id, hooks, this.vm);
      removeClass(el, oldId + '-transition');
      addClass(el, id + '-transition');
    }
  };

  var internalDirectives = {
    style: style,
    'class': vClass,
    component: component,
    prop: propDef,
    transition: transition$1
  };

  // special binding prefixes
  var bindRE = /^v-bind:|^:/;
  var onRE = /^v-on:|^@/;
  var dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;
  var modifierRE = /\.[^\.]+/g;
  var transitionRE = /^(v-bind:|:)?transition$/;

  // default directive priority
  var DEFAULT_PRIORITY = 1000;
  var DEFAULT_TERMINAL_PRIORITY = 2000;

  /**
   * Compile a template and return a reusable composite link
   * function, which recursively contains more link functions
   * inside. This top level compile function would normally
   * be called on instance root nodes, but can also be used
   * for partial compilation if the partial argument is true.
   *
   * The returned composite link function, when called, will
   * return an unlink function that tearsdown all directives
   * created during the linking phase.
   *
   * @param {Element|DocumentFragment} el
   * @param {Object} options
   * @param {Boolean} partial
   * @return {Function}
   */

  function compile(el, options, partial) {
    // link function for the node itself.
    var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;
    // link function for the childNodes
    var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;

    /**
     * A composite linker function to be called on a already
     * compiled piece of DOM, which instantiates all directive
     * instances.
     *
     * @param {Vue} vm
     * @param {Element|DocumentFragment} el
     * @param {Vue} [host] - host vm of transcluded content
     * @param {Object} [scope] - v-for scope
     * @param {Fragment} [frag] - link context fragment
     * @return {Function|undefined}
     */

    return function compositeLinkFn(vm, el, host, scope, frag) {
      // cache childNodes before linking parent, fix #657
      var childNodes = toArray(el.childNodes);
      // link
      var dirs = linkAndCapture(function compositeLinkCapturer() {
        if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);
        if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);
      }, vm);
      return makeUnlinkFn(vm, dirs);
    };
  }

  /**
   * Apply a linker to a vm/element pair and capture the
   * directives created during the process.
   *
   * @param {Function} linker
   * @param {Vue} vm
   */

  function linkAndCapture(linker, vm) {
    /* istanbul ignore if */
    if (false) {
      // reset directives before every capture in production
      // mode, so that when unlinking we don't need to splice
      // them out (which turns out to be a perf hit).
      // they are kept in development mode because they are
      // useful for Vue's own tests.
      vm._directives = [];
    }
    var originalDirCount = vm._directives.length;
    linker();
    var dirs = vm._directives.slice(originalDirCount);
    dirs.sort(directiveComparator);
    for (var i = 0, l = dirs.length; i < l; i++) {
      dirs[i]._bind();
    }
    return dirs;
  }

  /**
   * Directive priority sort comparator
   *
   * @param {Object} a
   * @param {Object} b
   */

  function directiveComparator(a, b) {
    a = a.descriptor.def.priority || DEFAULT_PRIORITY;
    b = b.descriptor.def.priority || DEFAULT_PRIORITY;
    return a > b ? -1 : a === b ? 0 : 1;
  }

  /**
   * Linker functions return an unlink function that
   * tearsdown all directives instances generated during
   * the process.
   *
   * We create unlink functions with only the necessary
   * information to avoid retaining additional closures.
   *
   * @param {Vue} vm
   * @param {Array} dirs
   * @param {Vue} [context]
   * @param {Array} [contextDirs]
   * @return {Function}
   */

  function makeUnlinkFn(vm, dirs, context, contextDirs) {
    function unlink(destroying) {
      teardownDirs(vm, dirs, destroying);
      if (context && contextDirs) {
        teardownDirs(context, contextDirs);
      }
    }
    // expose linked directives
    unlink.dirs = dirs;
    return unlink;
  }

  /**
   * Teardown partial linked directives.
   *
   * @param {Vue} vm
   * @param {Array} dirs
   * @param {Boolean} destroying
   */

  function teardownDirs(vm, dirs, destroying) {
    var i = dirs.length;
    while (i--) {
      dirs[i]._teardown();
      if (("development") !== 'production' && !destroying) {
        vm._directives.$remove(dirs[i]);
      }
    }
  }

  /**
   * Compile link props on an instance.
   *
   * @param {Vue} vm
   * @param {Element} el
   * @param {Object} props
   * @param {Object} [scope]
   * @return {Function}
   */

  function compileAndLinkProps(vm, el, props, scope) {
    var propsLinkFn = compileProps(el, props, vm);
    var propDirs = linkAndCapture(function () {
      propsLinkFn(vm, scope);
    }, vm);
    return makeUnlinkFn(vm, propDirs);
  }

  /**
   * Compile the root element of an instance.
   *
   * 1. attrs on context container (context scope)
   * 2. attrs on the component template root node, if
   *    replace:true (child scope)
   *
   * If this is a fragment instance, we only need to compile 1.
   *
   * @param {Element} el
   * @param {Object} options
   * @param {Object} contextOptions
   * @return {Function}
   */

  function compileRoot(el, options, contextOptions) {
    var containerAttrs = options._containerAttrs;
    var replacerAttrs = options._replacerAttrs;
    var contextLinkFn, replacerLinkFn;

    // only need to compile other attributes for
    // non-fragment instances
    if (el.nodeType !== 11) {
      // for components, container and replacer need to be
      // compiled separately and linked in different scopes.
      if (options._asComponent) {
        // 2. container attributes
        if (containerAttrs && contextOptions) {
          contextLinkFn = compileDirectives(containerAttrs, contextOptions);
        }
        if (replacerAttrs) {
          // 3. replacer attributes
          replacerLinkFn = compileDirectives(replacerAttrs, options);
        }
      } else {
        // non-component, just compile as a normal element.
        replacerLinkFn = compileDirectives(el.attributes, options);
      }
    } else if (("development") !== 'production' && containerAttrs) {
      // warn container directives for fragment instances
      var names = containerAttrs.filter(function (attr) {
        // allow vue-loader/vueify scoped css attributes
        return attr.name.indexOf('_v-') < 0 &&
        // allow event listeners
        !onRE.test(attr.name) &&
        // allow slots
        attr.name !== 'slot';
      }).map(function (attr) {
        return '"' + attr.name + '"';
      });
      if (names.length) {
        var plural = names.length > 1;
        warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + options.el.tagName.toLowerCase() + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');
      }
    }

    options._containerAttrs = options._replacerAttrs = null;
    return function rootLinkFn(vm, el, scope) {
      // link context scope dirs
      var context = vm._context;
      var contextDirs;
      if (context && contextLinkFn) {
        contextDirs = linkAndCapture(function () {
          contextLinkFn(context, el, null, scope);
        }, context);
      }

      // link self
      var selfDirs = linkAndCapture(function () {
        if (replacerLinkFn) replacerLinkFn(vm, el);
      }, vm);

      // return the unlink function that tearsdown context
      // container directives.
      return makeUnlinkFn(vm, selfDirs, context, contextDirs);
    };
  }

  /**
   * Compile a node and return a nodeLinkFn based on the
   * node type.
   *
   * @param {Node} node
   * @param {Object} options
   * @return {Function|null}
   */

  function compileNode(node, options) {
    var type = node.nodeType;
    if (type === 1 && !isScript(node)) {
      return compileElement(node, options);
    } else if (type === 3 && node.data.trim()) {
      return compileTextNode(node, options);
    } else {
      return null;
    }
  }

  /**
   * Compile an element and return a nodeLinkFn.
   *
   * @param {Element} el
   * @param {Object} options
   * @return {Function|null}
   */

  function compileElement(el, options) {
    // preprocess textareas.
    // textarea treats its text content as the initial value.
    // just bind it as an attr directive for value.
    if (el.tagName === 'TEXTAREA') {
      var tokens = parseText(el.value);
      if (tokens) {
        el.setAttribute(':value', tokensToExp(tokens));
        el.value = '';
      }
    }
    var linkFn;
    var hasAttrs = el.hasAttributes();
    var attrs = hasAttrs && toArray(el.attributes);
    // check terminal directives (for & if)
    if (hasAttrs) {
      linkFn = checkTerminalDirectives(el, attrs, options);
    }
    // check element directives
    if (!linkFn) {
      linkFn = checkElementDirectives(el, options);
    }
    // check component
    if (!linkFn) {
      linkFn = checkComponent(el, options);
    }
    // normal directives
    if (!linkFn && hasAttrs) {
      linkFn = compileDirectives(attrs, options);
    }
    return linkFn;
  }

  /**
   * Compile a textNode and return a nodeLinkFn.
   *
   * @param {TextNode} node
   * @param {Object} options
   * @return {Function|null} textNodeLinkFn
   */

  function compileTextNode(node, options) {
    // skip marked text nodes
    if (node._skip) {
      return removeText;
    }

    var tokens = parseText(node.wholeText);
    if (!tokens) {
      return null;
    }

    // mark adjacent text nodes as skipped,
    // because we are using node.wholeText to compile
    // all adjacent text nodes together. This fixes
    // issues in IE where sometimes it splits up a single
    // text node into multiple ones.
    var next = node.nextSibling;
    while (next && next.nodeType === 3) {
      next._skip = true;
      next = next.nextSibling;
    }

    var frag = document.createDocumentFragment();
    var el, token;
    for (var i = 0, l = tokens.length; i < l; i++) {
      token = tokens[i];
      el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);
      frag.appendChild(el);
    }
    return makeTextNodeLinkFn(tokens, frag, options);
  }

  /**
   * Linker for an skipped text node.
   *
   * @param {Vue} vm
   * @param {Text} node
   */

  function removeText(vm, node) {
    remove(node);
  }

  /**
   * Process a single text token.
   *
   * @param {Object} token
   * @param {Object} options
   * @return {Node}
   */

  function processTextToken(token, options) {
    var el;
    if (token.oneTime) {
      el = document.createTextNode(token.value);
    } else {
      if (token.html) {
        el = document.createComment('v-html');
        setTokenType('html');
      } else {
        // IE will clean up empty textNodes during
        // frag.cloneNode(true), so we have to give it
        // something here...
        el = document.createTextNode(' ');
        setTokenType('text');
      }
    }
    function setTokenType(type) {
      if (token.descriptor) return;
      var parsed = parseDirective(token.value);
      token.descriptor = {
        name: type,
        def: directives[type],
        expression: parsed.expression,
        filters: parsed.filters
      };
    }
    return el;
  }

  /**
   * Build a function that processes a textNode.
   *
   * @param {Array<Object>} tokens
   * @param {DocumentFragment} frag
   */

  function makeTextNodeLinkFn(tokens, frag) {
    return function textNodeLinkFn(vm, el, host, scope) {
      var fragClone = frag.cloneNode(true);
      var childNodes = toArray(fragClone.childNodes);
      var token, value, node;
      for (var i = 0, l = tokens.length; i < l; i++) {
        token = tokens[i];
        value = token.value;
        if (token.tag) {
          node = childNodes[i];
          if (token.oneTime) {
            value = (scope || vm).$eval(value);
            if (token.html) {
              replace(node, parseTemplate(value, true));
            } else {
              node.data = _toString(value);
            }
          } else {
            vm._bindDir(token.descriptor, node, host, scope);
          }
        }
      }
      replace(el, fragClone);
    };
  }

  /**
   * Compile a node list and return a childLinkFn.
   *
   * @param {NodeList} nodeList
   * @param {Object} options
   * @return {Function|undefined}
   */

  function compileNodeList(nodeList, options) {
    var linkFns = [];
    var nodeLinkFn, childLinkFn, node;
    for (var i = 0, l = nodeList.length; i < l; i++) {
      node = nodeList[i];
      nodeLinkFn = compileNode(node, options);
      childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;
      linkFns.push(nodeLinkFn, childLinkFn);
    }
    return linkFns.length ? makeChildLinkFn(linkFns) : null;
  }

  /**
   * Make a child link function for a node's childNodes.
   *
   * @param {Array<Function>} linkFns
   * @return {Function} childLinkFn
   */

  function makeChildLinkFn(linkFns) {
    return function childLinkFn(vm, nodes, host, scope, frag) {
      var node, nodeLinkFn, childrenLinkFn;
      for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {
        node = nodes[n];
        nodeLinkFn = linkFns[i++];
        childrenLinkFn = linkFns[i++];
        // cache childNodes before linking parent, fix #657
        var childNodes = toArray(node.childNodes);
        if (nodeLinkFn) {
          nodeLinkFn(vm, node, host, scope, frag);
        }
        if (childrenLinkFn) {
          childrenLinkFn(vm, childNodes, host, scope, frag);
        }
      }
    };
  }

  /**
   * Check for element directives (custom elements that should
   * be resovled as terminal directives).
   *
   * @param {Element} el
   * @param {Object} options
   */

  function checkElementDirectives(el, options) {
    var tag = el.tagName.toLowerCase();
    if (commonTagRE.test(tag)) {
      return;
    }
    var def = resolveAsset(options, 'elementDirectives', tag);
    if (def) {
      return makeTerminalNodeLinkFn(el, tag, '', options, def);
    }
  }

  /**
   * Check if an element is a component. If yes, return
   * a component link function.
   *
   * @param {Element} el
   * @param {Object} options
   * @return {Function|undefined}
   */

  function checkComponent(el, options) {
    var component = checkComponentAttr(el, options);
    if (component) {
      var ref = findRef(el);
      var descriptor = {
        name: 'component',
        ref: ref,
        expression: component.id,
        def: internalDirectives.component,
        modifiers: {
          literal: !component.dynamic
        }
      };
      var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {
        if (ref) {
          defineReactive((scope || vm).$refs, ref, null);
        }
        vm._bindDir(descriptor, el, host, scope, frag);
      };
      componentLinkFn.terminal = true;
      return componentLinkFn;
    }
  }

  /**
   * Check an element for terminal directives in fixed order.
   * If it finds one, return a terminal link function.
   *
   * @param {Element} el
   * @param {Array} attrs
   * @param {Object} options
   * @return {Function} terminalLinkFn
   */

  function checkTerminalDirectives(el, attrs, options) {
    // skip v-pre
    if (getAttr(el, 'v-pre') !== null) {
      return skip;
    }
    // skip v-else block, but only if following v-if
    if (el.hasAttribute('v-else')) {
      var prev = el.previousElementSibling;
      if (prev && prev.hasAttribute('v-if')) {
        return skip;
      }
    }

    var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;
    for (var i = 0, j = attrs.length; i < j; i++) {
      attr = attrs[i];
      name = attr.name.replace(modifierRE, '');
      if (matched = name.match(dirAttrRE)) {
        def = resolveAsset(options, 'directives', matched[1]);
        if (def && def.terminal) {
          if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {
            termDef = def;
            rawName = attr.name;
            modifiers = parseModifiers(attr.name);
            value = attr.value;
            dirName = matched[1];
            arg = matched[2];
          }
        }
      }
    }

    if (termDef) {
      return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);
    }
  }

  function skip() {}
  skip.terminal = true;

  /**
   * Build a node link function for a terminal directive.
   * A terminal link function terminates the current
   * compilation recursion and handles compilation of the
   * subtree in the directive.
   *
   * @param {Element} el
   * @param {String} dirName
   * @param {String} value
   * @param {Object} options
   * @param {Object} def
   * @param {String} [rawName]
   * @param {String} [arg]
   * @param {Object} [modifiers]
   * @return {Function} terminalLinkFn
   */

  function makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {
    var parsed = parseDirective(value);
    var descriptor = {
      name: dirName,
      arg: arg,
      expression: parsed.expression,
      filters: parsed.filters,
      raw: value,
      attr: rawName,
      modifiers: modifiers,
      def: def
    };
    // check ref for v-for and router-view
    if (dirName === 'for' || dirName === 'router-view') {
      descriptor.ref = findRef(el);
    }
    var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {
      if (descriptor.ref) {
        defineReactive((scope || vm).$refs, descriptor.ref, null);
      }
      vm._bindDir(descriptor, el, host, scope, frag);
    };
    fn.terminal = true;
    return fn;
  }

  /**
   * Compile the directives on an element and return a linker.
   *
   * @param {Array|NamedNodeMap} attrs
   * @param {Object} options
   * @return {Function}
   */

  function compileDirectives(attrs, options) {
    var i = attrs.length;
    var dirs = [];
    var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;
    while (i--) {
      attr = attrs[i];
      name = rawName = attr.name;
      value = rawValue = attr.value;
      tokens = parseText(value);
      // reset arg
      arg = null;
      // check modifiers
      modifiers = parseModifiers(name);
      name = name.replace(modifierRE, '');

      // attribute interpolations
      if (tokens) {
        value = tokensToExp(tokens);
        arg = name;
        pushDir('bind', directives.bind, tokens);
        // warn against mixing mustaches with v-bind
        if (true) {
          if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {
            return attr.name === ':class' || attr.name === 'v-bind:class';
          })) {
            warn('class="' + rawValue + '": Do not mix mustache interpolation ' + 'and v-bind for "class" on the same element. Use one or the other.', options);
          }
        }
      } else

        // special attribute: transition
        if (transitionRE.test(name)) {
          modifiers.literal = !bindRE.test(name);
          pushDir('transition', internalDirectives.transition);
        } else

          // event handlers
          if (onRE.test(name)) {
            arg = name.replace(onRE, '');
            pushDir('on', directives.on);
          } else

            // attribute bindings
            if (bindRE.test(name)) {
              dirName = name.replace(bindRE, '');
              if (dirName === 'style' || dirName === 'class') {
                pushDir(dirName, internalDirectives[dirName]);
              } else {
                arg = dirName;
                pushDir('bind', directives.bind);
              }
            } else

              // normal directives
              if (matched = name.match(dirAttrRE)) {
                dirName = matched[1];
                arg = matched[2];

                // skip v-else (when used with v-show)
                if (dirName === 'else') {
                  continue;
                }

                dirDef = resolveAsset(options, 'directives', dirName, true);
                if (dirDef) {
                  pushDir(dirName, dirDef);
                }
              }
    }

    /**
     * Push a directive.
     *
     * @param {String} dirName
     * @param {Object|Function} def
     * @param {Array} [interpTokens]
     */

    function pushDir(dirName, def, interpTokens) {
      var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);
      var parsed = !hasOneTimeToken && parseDirective(value);
      dirs.push({
        name: dirName,
        attr: rawName,
        raw: rawValue,
        def: def,
        arg: arg,
        modifiers: modifiers,
        // conversion from interpolation strings with one-time token
        // to expression is differed until directive bind time so that we
        // have access to the actual vm context for one-time bindings.
        expression: parsed && parsed.expression,
        filters: parsed && parsed.filters,
        interp: interpTokens,
        hasOneTime: hasOneTimeToken
      });
    }

    if (dirs.length) {
      return makeNodeLinkFn(dirs);
    }
  }

  /**
   * Parse modifiers from directive attribute name.
   *
   * @param {String} name
   * @return {Object}
   */

  function parseModifiers(name) {
    var res = Object.create(null);
    var match = name.match(modifierRE);
    if (match) {
      var i = match.length;
      while (i--) {
        res[match[i].slice(1)] = true;
      }
    }
    return res;
  }

  /**
   * Build a link function for all directives on a single node.
   *
   * @param {Array} directives
   * @return {Function} directivesLinkFn
   */

  function makeNodeLinkFn(directives) {
    return function nodeLinkFn(vm, el, host, scope, frag) {
      // reverse apply because it's sorted low to high
      var i = directives.length;
      while (i--) {
        vm._bindDir(directives[i], el, host, scope, frag);
      }
    };
  }

  /**
   * Check if an interpolation string contains one-time tokens.
   *
   * @param {Array} tokens
   * @return {Boolean}
   */

  function hasOneTime(tokens) {
    var i = tokens.length;
    while (i--) {
      if (tokens[i].oneTime) return true;
    }
  }

  function isScript(el) {
    return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');
  }

  var specialCharRE = /[^\w\-:\.]/;

  /**
   * Process an element or a DocumentFragment based on a
   * instance option object. This allows us to transclude
   * a template node/fragment before the instance is created,
   * so the processed fragment can then be cloned and reused
   * in v-for.
   *
   * @param {Element} el
   * @param {Object} options
   * @return {Element|DocumentFragment}
   */

  function transclude(el, options) {
    // extract container attributes to pass them down
    // to compiler, because they need to be compiled in
    // parent scope. we are mutating the options object here
    // assuming the same object will be used for compile
    // right after this.
    if (options) {
      options._containerAttrs = extractAttrs(el);
    }
    // for template tags, what we want is its content as
    // a documentFragment (for fragment instances)
    if (isTemplate(el)) {
      el = parseTemplate(el);
    }
    if (options) {
      if (options._asComponent && !options.template) {
        options.template = '<slot></slot>';
      }
      if (options.template) {
        options._content = extractContent(el);
        el = transcludeTemplate(el, options);
      }
    }
    if (isFragment(el)) {
      // anchors for fragment instance
      // passing in `persist: true` to avoid them being
      // discarded by IE during template cloning
      prepend(createAnchor('v-start', true), el);
      el.appendChild(createAnchor('v-end', true));
    }
    return el;
  }

  /**
   * Process the template option.
   * If the replace option is true this will swap the $el.
   *
   * @param {Element} el
   * @param {Object} options
   * @return {Element|DocumentFragment}
   */

  function transcludeTemplate(el, options) {
    var template = options.template;
    var frag = parseTemplate(template, true);
    if (frag) {
      var replacer = frag.firstChild;
      var tag = replacer.tagName && replacer.tagName.toLowerCase();
      if (options.replace) {
        /* istanbul ignore if */
        if (el === document.body) {
          ("development") !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');
        }
        // there are many cases where the instance must
        // become a fragment instance: basically anything that
        // can create more than 1 root nodes.
        if (
        // multi-children template
        frag.childNodes.length > 1 ||
        // non-element template
        replacer.nodeType !== 1 ||
        // single nested component
        tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||
        // element directive
        resolveAsset(options, 'elementDirectives', tag) ||
        // for block
        replacer.hasAttribute('v-for') ||
        // if block
        replacer.hasAttribute('v-if')) {
          return frag;
        } else {
          options._replacerAttrs = extractAttrs(replacer);
          mergeAttrs(el, replacer);
          return replacer;
        }
      } else {
        el.appendChild(frag);
        return el;
      }
    } else {
      ("development") !== 'production' && warn('Invalid template option: ' + template);
    }
  }

  /**
   * Helper to extract a component container's attributes
   * into a plain object array.
   *
   * @param {Element} el
   * @return {Array}
   */

  function extractAttrs(el) {
    if (el.nodeType === 1 && el.hasAttributes()) {
      return toArray(el.attributes);
    }
  }

  /**
   * Merge the attributes of two elements, and make sure
   * the class names are merged properly.
   *
   * @param {Element} from
   * @param {Element} to
   */

  function mergeAttrs(from, to) {
    var attrs = from.attributes;
    var i = attrs.length;
    var name, value;
    while (i--) {
      name = attrs[i].name;
      value = attrs[i].value;
      if (!to.hasAttribute(name) && !specialCharRE.test(name)) {
        to.setAttribute(name, value);
      } else if (name === 'class' && !parseText(value) && (value = value.trim())) {
        value.split(/\s+/).forEach(function (cls) {
          addClass(to, cls);
        });
      }
    }
  }

  /**
   * Scan and determine slot content distribution.
   * We do this during transclusion instead at compile time so that
   * the distribution is decoupled from the compilation order of
   * the slots.
   *
   * @param {Element|DocumentFragment} template
   * @param {Element} content
   * @param {Vue} vm
   */

  function resolveSlots(vm, content) {
    if (!content) {
      return;
    }
    var contents = vm._slotContents = Object.create(null);
    var el, name;
    for (var i = 0, l = content.children.length; i < l; i++) {
      el = content.children[i];
      /* eslint-disable no-cond-assign */
      if (name = el.getAttribute('slot')) {
        (contents[name] || (contents[name] = [])).push(el);
      }
      /* eslint-enable no-cond-assign */
      if (("development") !== 'production' && getBindAttr(el, 'slot')) {
        warn('The "slot" attribute must be static.', vm.$parent);
      }
    }
    for (name in contents) {
      contents[name] = extractFragment(contents[name], content);
    }
    if (content.hasChildNodes()) {
      var nodes = content.childNodes;
      if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {
        return;
      }
      contents['default'] = extractFragment(content.childNodes, content);
    }
  }

  /**
   * Extract qualified content nodes from a node list.
   *
   * @param {NodeList} nodes
   * @return {DocumentFragment}
   */

  function extractFragment(nodes, parent) {
    var frag = document.createDocumentFragment();
    nodes = toArray(nodes);
    for (var i = 0, l = nodes.length; i < l; i++) {
      var node = nodes[i];
      if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {
        parent.removeChild(node);
        node = parseTemplate(node, true);
      }
      frag.appendChild(node);
    }
    return frag;
  }



  var compiler = Object.freeze({
  	compile: compile,
  	compileAndLinkProps: compileAndLinkProps,
  	compileRoot: compileRoot,
  	transclude: transclude,
  	resolveSlots: resolveSlots
  });

  function stateMixin (Vue) {
    /**
     * Accessor for `$data` property, since setting $data
     * requires observing the new object and updating
     * proxied properties.
     */

    Object.defineProperty(Vue.prototype, '$data', {
      get: function get() {
        return this._data;
      },
      set: function set(newData) {
        if (newData !== this._data) {
          this._setData(newData);
        }
      }
    });

    /**
     * Setup the scope of an instance, which contains:
     * - observed data
     * - computed properties
     * - user methods
     * - meta properties
     */

    Vue.prototype._initState = function () {
      this._initProps();
      this._initMeta();
      this._initMethods();
      this._initData();
      this._initComputed();
    };

    /**
     * Initialize props.
     */

    Vue.prototype._initProps = function () {
      var options = this.$options;
      var el = options.el;
      var props = options.props;
      if (props && !el) {
        ("development") !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);
      }
      // make sure to convert string selectors into element now
      el = options.el = query(el);
      this._propsUnlinkFn = el && el.nodeType === 1 && props
      // props must be linked in proper scope if inside v-for
      ? compileAndLinkProps(this, el, props, this._scope) : null;
    };

    /**
     * Initialize the data.
     */

    Vue.prototype._initData = function () {
      var dataFn = this.$options.data;
      var data = this._data = dataFn ? dataFn() : {};
      if (!isPlainObject(data)) {
        data = {};
        ("development") !== 'production' && warn('data functions should return an object.', this);
      }
      var props = this._props;
      // proxy data on instance
      var keys = Object.keys(data);
      var i, key;
      i = keys.length;
      while (i--) {
        key = keys[i];
        // there are two scenarios where we can proxy a data key:
        // 1. it's not already defined as a prop
        // 2. it's provided via a instantiation option AND there are no
        //    template prop present
        if (!props || !hasOwn(props, key)) {
          this._proxy(key);
        } else if (true) {
          warn('Data field "' + key + '" is already defined ' + 'as a prop. To provide default value for a prop, use the "default" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the "propsData" option.', this);
        }
      }
      // observe data
      observe(data, this);
    };

    /**
     * Swap the instance's $data. Called in $data's setter.
     *
     * @param {Object} newData
     */

    Vue.prototype._setData = function (newData) {
      newData = newData || {};
      var oldData = this._data;
      this._data = newData;
      var keys, key, i;
      // unproxy keys not present in new data
      keys = Object.keys(oldData);
      i = keys.length;
      while (i--) {
        key = keys[i];
        if (!(key in newData)) {
          this._unproxy(key);
        }
      }
      // proxy keys not already proxied,
      // and trigger change for changed values
      keys = Object.keys(newData);
      i = keys.length;
      while (i--) {
        key = keys[i];
        if (!hasOwn(this, key)) {
          // new property
          this._proxy(key);
        }
      }
      oldData.__ob__.removeVm(this);
      observe(newData, this);
      this._digest();
    };

    /**
     * Proxy a property, so that
     * vm.prop === vm._data.prop
     *
     * @param {String} key
     */

    Vue.prototype._proxy = function (key) {
      if (!isReserved(key)) {
        // need to store ref to self here
        // because these getter/setters might
        // be called by child scopes via
        // prototype inheritance.
        var self = this;
        Object.defineProperty(self, key, {
          configurable: true,
          enumerable: true,
          get: function proxyGetter() {
            return self._data[key];
          },
          set: function proxySetter(val) {
            self._data[key] = val;
          }
        });
      }
    };

    /**
     * Unproxy a property.
     *
     * @param {String} key
     */

    Vue.prototype._unproxy = function (key) {
      if (!isReserved(key)) {
        delete this[key];
      }
    };

    /**
     * Force update on every watcher in scope.
     */

    Vue.prototype._digest = function () {
      for (var i = 0, l = this._watchers.length; i < l; i++) {
        this._watchers[i].update(true); // shallow updates
      }
    };

    /**
     * Setup computed properties. They are essentially
     * special getter/setters
     */

    function noop() {}
    Vue.prototype._initComputed = function () {
      var computed = this.$options.computed;
      if (computed) {
        for (var key in computed) {
          var userDef = computed[key];
          var def = {
            enumerable: true,
            configurable: true
          };
          if (typeof userDef === 'function') {
            def.get = makeComputedGetter(userDef, this);
            def.set = noop;
          } else {
            def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;
            def.set = userDef.set ? bind(userDef.set, this) : noop;
          }
          Object.defineProperty(this, key, def);
        }
      }
    };

    function makeComputedGetter(getter, owner) {
      var watcher = new Watcher(owner, getter, null, {
        lazy: true
      });
      return function computedGetter() {
        if (watcher.dirty) {
          watcher.evaluate();
        }
        if (Dep.target) {
          watcher.depend();
        }
        return watcher.value;
      };
    }

    /**
     * Setup instance methods. Methods must be bound to the
     * instance since they might be passed down as a prop to
     * child components.
     */

    Vue.prototype._initMethods = function () {
      var methods = this.$options.methods;
      if (methods) {
        for (var key in methods) {
          this[key] = bind(methods[key], this);
        }
      }
    };

    /**
     * Initialize meta information like $index, $key & $value.
     */

    Vue.prototype._initMeta = function () {
      var metas = this.$options._meta;
      if (metas) {
        for (var key in metas) {
          defineReactive(this, key, metas[key]);
        }
      }
    };
  }

  var eventRE = /^v-on:|^@/;

  function eventsMixin (Vue) {
    /**
     * Setup the instance's option events & watchers.
     * If the value is a string, we pull it from the
     * instance's methods by name.
     */

    Vue.prototype._initEvents = function () {
      var options = this.$options;
      if (options._asComponent) {
        registerComponentEvents(this, options.el);
      }
      registerCallbacks(this, '$on', options.events);
      registerCallbacks(this, '$watch', options.watch);
    };

    /**
     * Register v-on events on a child component
     *
     * @param {Vue} vm
     * @param {Element} el
     */

    function registerComponentEvents(vm, el) {
      var attrs = el.attributes;
      var name, value, handler;
      for (var i = 0, l = attrs.length; i < l; i++) {
        name = attrs[i].name;
        if (eventRE.test(name)) {
          name = name.replace(eventRE, '');
          // force the expression into a statement so that
          // it always dynamically resolves the method to call (#2670)
          // kinda ugly hack, but does the job.
          value = attrs[i].value;
          if (isSimplePath(value)) {
            value += '.apply(this, $arguments)';
          }
          handler = (vm._scope || vm._context).$eval(value, true);
          handler._fromParent = true;
          vm.$on(name.replace(eventRE), handler);
        }
      }
    }

    /**
     * Register callbacks for option events and watchers.
     *
     * @param {Vue} vm
     * @param {String} action
     * @param {Object} hash
     */

    function registerCallbacks(vm, action, hash) {
      if (!hash) return;
      var handlers, key, i, j;
      for (key in hash) {
        handlers = hash[key];
        if (isArray(handlers)) {
          for (i = 0, j = handlers.length; i < j; i++) {
            register(vm, action, key, handlers[i]);
          }
        } else {
          register(vm, action, key, handlers);
        }
      }
    }

    /**
     * Helper to register an event/watch callback.
     *
     * @param {Vue} vm
     * @param {String} action
     * @param {String} key
     * @param {Function|String|Object} handler
     * @param {Object} [options]
     */

    function register(vm, action, key, handler, options) {
      var type = typeof handler;
      if (type === 'function') {
        vm[action](key, handler, options);
      } else if (type === 'string') {
        var methods = vm.$options.methods;
        var method = methods && methods[handler];
        if (method) {
          vm[action](key, method, options);
        } else {
          ("development") !== 'production' && warn('Unknown method: "' + handler + '" when ' + 'registering callback for ' + action + ': "' + key + '".', vm);
        }
      } else if (handler && type === 'object') {
        register(vm, action, key, handler.handler, handler);
      }
    }

    /**
     * Setup recursive attached/detached calls
     */

    Vue.prototype._initDOMHooks = function () {
      this.$on('hook:attached', onAttached);
      this.$on('hook:detached', onDetached);
    };

    /**
     * Callback to recursively call attached hook on children
     */

    function onAttached() {
      if (!this._isAttached) {
        this._isAttached = true;
        this.$children.forEach(callAttach);
      }
    }

    /**
     * Iterator to call attached hook
     *
     * @param {Vue} child
     */

    function callAttach(child) {
      if (!child._isAttached && inDoc(child.$el)) {
        child._callHook('attached');
      }
    }

    /**
     * Callback to recursively call detached hook on children
     */

    function onDetached() {
      if (this._isAttached) {
        this._isAttached = false;
        this.$children.forEach(callDetach);
      }
    }

    /**
     * Iterator to call detached hook
     *
     * @param {Vue} child
     */

    function callDetach(child) {
      if (child._isAttached && !inDoc(child.$el)) {
        child._callHook('detached');
      }
    }

    /**
     * Trigger all handlers for a hook
     *
     * @param {String} hook
     */

    Vue.prototype._callHook = function (hook) {
      this.$emit('pre-hook:' + hook);
      var handlers = this.$options[hook];
      if (handlers) {
        for (var i = 0, j = handlers.length; i < j; i++) {
          handlers[i].call(this);
        }
      }
      this.$emit('hook:' + hook);
    };
  }

  function noop$1() {}

  /**
   * A directive links a DOM element with a piece of data,
   * which is the result of evaluating an expression.
   * It registers a watcher with the expression and calls
   * the DOM update function when a change is triggered.
   *
   * @param {Object} descriptor
   *                 - {String} name
   *                 - {Object} def
   *                 - {String} expression
   *                 - {Array<Object>} [filters]
   *                 - {Object} [modifiers]
   *                 - {Boolean} literal
   *                 - {String} attr
   *                 - {String} arg
   *                 - {String} raw
   *                 - {String} [ref]
   *                 - {Array<Object>} [interp]
   *                 - {Boolean} [hasOneTime]
   * @param {Vue} vm
   * @param {Node} el
   * @param {Vue} [host] - transclusion host component
   * @param {Object} [scope] - v-for scope
   * @param {Fragment} [frag] - owner fragment
   * @constructor
   */
  function Directive(descriptor, vm, el, host, scope, frag) {
    this.vm = vm;
    this.el = el;
    // copy descriptor properties
    this.descriptor = descriptor;
    this.name = descriptor.name;
    this.expression = descriptor.expression;
    this.arg = descriptor.arg;
    this.modifiers = descriptor.modifiers;
    this.filters = descriptor.filters;
    this.literal = this.modifiers && this.modifiers.literal;
    // private
    this._locked = false;
    this._bound = false;
    this._listeners = null;
    // link context
    this._host = host;
    this._scope = scope;
    this._frag = frag;
    // store directives on node in dev mode
    if (("development") !== 'production' && this.el) {
      this.el._vue_directives = this.el._vue_directives || [];
      this.el._vue_directives.push(this);
    }
  }

  /**
   * Initialize the directive, mixin definition properties,
   * setup the watcher, call definition bind() and update()
   * if present.
   */

  Directive.prototype._bind = function () {
    var name = this.name;
    var descriptor = this.descriptor;

    // remove attribute
    if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {
      var attr = descriptor.attr || 'v-' + name;
      this.el.removeAttribute(attr);
    }

    // copy def properties
    var def = descriptor.def;
    if (typeof def === 'function') {
      this.update = def;
    } else {
      extend(this, def);
    }

    // setup directive params
    this._setupParams();

    // initial bind
    if (this.bind) {
      this.bind();
    }
    this._bound = true;

    if (this.literal) {
      this.update && this.update(descriptor.raw);
    } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {
      // wrapped updater for context
      var dir = this;
      if (this.update) {
        this._update = function (val, oldVal) {
          if (!dir._locked) {
            dir.update(val, oldVal);
          }
        };
      } else {
        this._update = noop$1;
      }
      var preProcess = this._preProcess ? bind(this._preProcess, this) : null;
      var postProcess = this._postProcess ? bind(this._postProcess, this) : null;
      var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback
      {
        filters: this.filters,
        twoWay: this.twoWay,
        deep: this.deep,
        preProcess: preProcess,
        postProcess: postProcess,
        scope: this._scope
      });
      // v-model with inital inline value need to sync back to
      // model instead of update to DOM on init. They would
      // set the afterBind hook to indicate that.
      if (this.afterBind) {
        this.afterBind();
      } else if (this.update) {
        this.update(watcher.value);
      }
    }
  };

  /**
   * Setup all param attributes, e.g. track-by,
   * transition-mode, etc...
   */

  Directive.prototype._setupParams = function () {
    if (!this.params) {
      return;
    }
    var params = this.params;
    // swap the params array with a fresh object.
    this.params = Object.create(null);
    var i = params.length;
    var key, val, mappedKey;
    while (i--) {
      key = hyphenate(params[i]);
      mappedKey = camelize(key);
      val = getBindAttr(this.el, key);
      if (val != null) {
        // dynamic
        this._setupParamWatcher(mappedKey, val);
      } else {
        // static
        val = getAttr(this.el, key);
        if (val != null) {
          this.params[mappedKey] = val === '' ? true : val;
        }
      }
    }
  };

  /**
   * Setup a watcher for a dynamic param.
   *
   * @param {String} key
   * @param {String} expression
   */

  Directive.prototype._setupParamWatcher = function (key, expression) {
    var self = this;
    var called = false;
    var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {
      self.params[key] = val;
      // since we are in immediate mode,
      // only call the param change callbacks if this is not the first update.
      if (called) {
        var cb = self.paramWatchers && self.paramWatchers[key];
        if (cb) {
          cb.call(self, val, oldVal);
        }
      } else {
        called = true;
      }
    }, {
      immediate: true,
      user: false
    });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);
  };

  /**
   * Check if the directive is a function caller
   * and if the expression is a callable one. If both true,
   * we wrap up the expression and use it as the event
   * handler.
   *
   * e.g. on-click="a++"
   *
   * @return {Boolean}
   */

  Directive.prototype._checkStatement = function () {
    var expression = this.expression;
    if (expression && this.acceptStatement && !isSimplePath(expression)) {
      var fn = parseExpression(expression).get;
      var scope = this._scope || this.vm;
      var handler = function handler(e) {
        scope.$event = e;
        fn.call(scope, scope);
        scope.$event = null;
      };
      if (this.filters) {
        handler = scope._applyFilters(handler, null, this.filters);
      }
      this.update(handler);
      return true;
    }
  };

  /**
   * Set the corresponding value with the setter.
   * This should only be used in two-way directives
   * e.g. v-model.
   *
   * @param {*} value
   * @public
   */

  Directive.prototype.set = function (value) {
    /* istanbul ignore else */
    if (this.twoWay) {
      this._withLock(function () {
        this._watcher.set(value);
      });
    } else if (true) {
      warn('Directive.set() can only be used inside twoWay' + 'directives.');
    }
  };

  /**
   * Execute a function while preventing that function from
   * triggering updates on this directive instance.
   *
   * @param {Function} fn
   */

  Directive.prototype._withLock = function (fn) {
    var self = this;
    self._locked = true;
    fn.call(self);
    nextTick(function () {
      self._locked = false;
    });
  };

  /**
   * Convenience method that attaches a DOM event listener
   * to the directive element and autometically tears it down
   * during unbind.
   *
   * @param {String} event
   * @param {Function} handler
   * @param {Boolean} [useCapture]
   */

  Directive.prototype.on = function (event, handler, useCapture) {
    on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);
  };

  /**
   * Teardown the watcher and call unbind.
   */

  Directive.prototype._teardown = function () {
    if (this._bound) {
      this._bound = false;
      if (this.unbind) {
        this.unbind();
      }
      if (this._watcher) {
        this._watcher.teardown();
      }
      var listeners = this._listeners;
      var i;
      if (listeners) {
        i = listeners.length;
        while (i--) {
          off(this.el, listeners[i][0], listeners[i][1]);
        }
      }
      var unwatchFns = this._paramUnwatchFns;
      if (unwatchFns) {
        i = unwatchFns.length;
        while (i--) {
          unwatchFns[i]();
        }
      }
      if (("development") !== 'production' && this.el) {
        this.el._vue_directives.$remove(this);
      }
      this.vm = this.el = this._watcher = this._listeners = null;
    }
  };

  function lifecycleMixin (Vue) {
    /**
     * Update v-ref for component.
     *
     * @param {Boolean} remove
     */

    Vue.prototype._updateRef = function (remove) {
      var ref = this.$options._ref;
      if (ref) {
        var refs = (this._scope || this._context).$refs;
        if (remove) {
          if (refs[ref] === this) {
            refs[ref] = null;
          }
        } else {
          refs[ref] = this;
        }
      }
    };

    /**
     * Transclude, compile and link element.
     *
     * If a pre-compiled linker is available, that means the
     * passed in element will be pre-transcluded and compiled
     * as well - all we need to do is to call the linker.
     *
     * Otherwise we need to call transclude/compile/link here.
     *
     * @param {Element} el
     */

    Vue.prototype._compile = function (el) {
      var options = this.$options;

      // transclude and init element
      // transclude can potentially replace original
      // so we need to keep reference; this step also injects
      // the template and caches the original attributes
      // on the container node and replacer node.
      var original = el;
      el = transclude(el, options);
      this._initElement(el);

      // handle v-pre on root node (#2026)
      if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {
        return;
      }

      // root is always compiled per-instance, because
      // container attrs and props can be different every time.
      var contextOptions = this._context && this._context.$options;
      var rootLinker = compileRoot(el, options, contextOptions);

      // resolve slot distribution
      resolveSlots(this, options._content);

      // compile and link the rest
      var contentLinkFn;
      var ctor = this.constructor;
      // component compilation can be cached
      // as long as it's not using inline-template
      if (options._linkerCachable) {
        contentLinkFn = ctor.linker;
        if (!contentLinkFn) {
          contentLinkFn = ctor.linker = compile(el, options);
        }
      }

      // link phase
      // make sure to link root with prop scope!
      var rootUnlinkFn = rootLinker(this, el, this._scope);
      var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);

      // register composite unlink function
      // to be called during instance destruction
      this._unlinkFn = function () {
        rootUnlinkFn();
        // passing destroying: true to avoid searching and
        // splicing the directives
        contentUnlinkFn(true);
      };

      // finally replace original
      if (options.replace) {
        replace(original, el);
      }

      this._isCompiled = true;
      this._callHook('compiled');
    };

    /**
     * Initialize instance element. Called in the public
     * $mount() method.
     *
     * @param {Element} el
     */

    Vue.prototype._initElement = function (el) {
      if (isFragment(el)) {
        this._isFragment = true;
        this.$el = this._fragmentStart = el.firstChild;
        this._fragmentEnd = el.lastChild;
        // set persisted text anchors to empty
        if (this._fragmentStart.nodeType === 3) {
          this._fragmentStart.data = this._fragmentEnd.data = '';
        }
        this._fragment = el;
      } else {
        this.$el = el;
      }
      this.$el.__vue__ = this;
      this._callHook('beforeCompile');
    };

    /**
     * Create and bind a directive to an element.
     *
     * @param {Object} descriptor - parsed directive descriptor
     * @param {Node} node   - target node
     * @param {Vue} [host] - transclusion host component
     * @param {Object} [scope] - v-for scope
     * @param {Fragment} [frag] - owner fragment
     */

    Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {
      this._directives.push(new Directive(descriptor, this, node, host, scope, frag));
    };

    /**
     * Teardown an instance, unobserves the data, unbind all the
     * directives, turn off all the event listeners, etc.
     *
     * @param {Boolean} remove - whether to remove the DOM node.
     * @param {Boolean} deferCleanup - if true, defer cleanup to
     *                                 be called later
     */

    Vue.prototype._destroy = function (remove, deferCleanup) {
      if (this._isBeingDestroyed) {
        if (!deferCleanup) {
          this._cleanup();
        }
        return;
      }

      var destroyReady;
      var pendingRemoval;

      var self = this;
      // Cleanup should be called either synchronously or asynchronoysly as
      // callback of this.$remove(), or if remove and deferCleanup are false.
      // In any case it should be called after all other removing, unbinding and
      // turning of is done
      var cleanupIfPossible = function cleanupIfPossible() {
        if (destroyReady && !pendingRemoval && !deferCleanup) {
          self._cleanup();
        }
      };

      // remove DOM element
      if (remove && this.$el) {
        pendingRemoval = true;
        this.$remove(function () {
          pendingRemoval = false;
          cleanupIfPossible();
        });
      }

      this._callHook('beforeDestroy');
      this._isBeingDestroyed = true;
      var i;
      // remove self from parent. only necessary
      // if parent is not being destroyed as well.
      var parent = this.$parent;
      if (parent && !parent._isBeingDestroyed) {
        parent.$children.$remove(this);
        // unregister ref (remove: true)
        this._updateRef(true);
      }
      // destroy all children.
      i = this.$children.length;
      while (i--) {
        this.$children[i].$destroy();
      }
      // teardown props
      if (this._propsUnlinkFn) {
        this._propsUnlinkFn();
      }
      // teardown all directives. this also tearsdown all
      // directive-owned watchers.
      if (this._unlinkFn) {
        this._unlinkFn();
      }
      i = this._watchers.length;
      while (i--) {
        this._watchers[i].teardown();
      }
      // remove reference to self on $el
      if (this.$el) {
        this.$el.__vue__ = null;
      }

      destroyReady = true;
      cleanupIfPossible();
    };

    /**
     * Clean up to ensure garbage collection.
     * This is called after the leave transition if there
     * is any.
     */

    Vue.prototype._cleanup = function () {
      if (this._isDestroyed) {
        return;
      }
      // remove self from owner fragment
      // do it in cleanup so that we can call $destroy with
      // defer right when a fragment is about to be removed.
      if (this._frag) {
        this._frag.children.$remove(this);
      }
      // remove reference from data ob
      // frozen object may not have observer.
      if (this._data && this._data.__ob__) {
        this._data.__ob__.removeVm(this);
      }
      // Clean up references to private properties and other
      // instances. preserve reference to _data so that proxy
      // accessors still work. The only potential side effect
      // here is that mutating the instance after it's destroyed
      // may affect the state of other components that are still
      // observing the same object, but that seems to be a
      // reasonable responsibility for the user rather than
      // always throwing an error on them.
      this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;
      // call the last hook...
      this._isDestroyed = true;
      this._callHook('destroyed');
      // turn off all instance listeners.
      this.$off();
    };
  }

  function miscMixin (Vue) {
    /**
     * Apply a list of filter (descriptors) to a value.
     * Using plain for loops here because this will be called in
     * the getter of any watcher with filters so it is very
     * performance sensitive.
     *
     * @param {*} value
     * @param {*} [oldValue]
     * @param {Array} filters
     * @param {Boolean} write
     * @return {*}
     */

    Vue.prototype._applyFilters = function (value, oldValue, filters, write) {
      var filter, fn, args, arg, offset, i, l, j, k;
      for (i = 0, l = filters.length; i < l; i++) {
        filter = filters[write ? l - i - 1 : i];
        fn = resolveAsset(this.$options, 'filters', filter.name, true);
        if (!fn) continue;
        fn = write ? fn.write : fn.read || fn;
        if (typeof fn !== 'function') continue;
        args = write ? [value, oldValue] : [value];
        offset = write ? 2 : 1;
        if (filter.args) {
          for (j = 0, k = filter.args.length; j < k; j++) {
            arg = filter.args[j];
            args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;
          }
        }
        value = fn.apply(this, args);
      }
      return value;
    };

    /**
     * Resolve a component, depending on whether the component
     * is defined normally or using an async factory function.
     * Resolves synchronously if already resolved, otherwise
     * resolves asynchronously and caches the resolved
     * constructor on the factory.
     *
     * @param {String|Function} value
     * @param {Function} cb
     */

    Vue.prototype._resolveComponent = function (value, cb) {
      var factory;
      if (typeof value === 'function') {
        factory = value;
      } else {
        factory = resolveAsset(this.$options, 'components', value, true);
      }
      /* istanbul ignore if */
      if (!factory) {
        return;
      }
      // async component factory
      if (!factory.options) {
        if (factory.resolved) {
          // cached
          cb(factory.resolved);
        } else if (factory.requested) {
          // pool callbacks
          factory.pendingCallbacks.push(cb);
        } else {
          factory.requested = true;
          var cbs = factory.pendingCallbacks = [cb];
          factory.call(this, function resolve(res) {
            if (isPlainObject(res)) {
              res = Vue.extend(res);
            }
            // cache resolved
            factory.resolved = res;
            // invoke callbacks
            for (var i = 0, l = cbs.length; i < l; i++) {
              cbs[i](res);
            }
          }, function reject(reason) {
            ("development") !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\nReason: ' + reason : ''));
          });
        }
      } else {
        // normal component
        cb(factory);
      }
    };
  }

  var filterRE$1 = /[^|]\|[^|]/;

  function dataAPI (Vue) {
    /**
     * Get the value from an expression on this vm.
     *
     * @param {String} exp
     * @param {Boolean} [asStatement]
     * @return {*}
     */

    Vue.prototype.$get = function (exp, asStatement) {
      var res = parseExpression(exp);
      if (res) {
        if (asStatement) {
          var self = this;
          return function statementHandler() {
            self.$arguments = toArray(arguments);
            var result = res.get.call(self, self);
            self.$arguments = null;
            return result;
          };
        } else {
          try {
            return res.get.call(this, this);
          } catch (e) {}
        }
      }
    };

    /**
     * Set the value from an expression on this vm.
     * The expression must be a valid left-hand
     * expression in an assignment.
     *
     * @param {String} exp
     * @param {*} val
     */

    Vue.prototype.$set = function (exp, val) {
      var res = parseExpression(exp, true);
      if (res && res.set) {
        res.set.call(this, this, val);
      }
    };

    /**
     * Delete a property on the VM
     *
     * @param {String} key
     */

    Vue.prototype.$delete = function (key) {
      del(this._data, key);
    };

    /**
     * Watch an expression, trigger callback when its
     * value changes.
     *
     * @param {String|Function} expOrFn
     * @param {Function} cb
     * @param {Object} [options]
     *                 - {Boolean} deep
     *                 - {Boolean} immediate
     * @return {Function} - unwatchFn
     */

    Vue.prototype.$watch = function (expOrFn, cb, options) {
      var vm = this;
      var parsed;
      if (typeof expOrFn === 'string') {
        parsed = parseDirective(expOrFn);
        expOrFn = parsed.expression;
      }
      var watcher = new Watcher(vm, expOrFn, cb, {
        deep: options && options.deep,
        sync: options && options.sync,
        filters: parsed && parsed.filters,
        user: !options || options.user !== false
      });
      if (options && options.immediate) {
        cb.call(vm, watcher.value);
      }
      return function unwatchFn() {
        watcher.teardown();
      };
    };

    /**
     * Evaluate a text directive, including filters.
     *
     * @param {String} text
     * @param {Boolean} [asStatement]
     * @return {String}
     */

    Vue.prototype.$eval = function (text, asStatement) {
      // check for filters.
      if (filterRE$1.test(text)) {
        var dir = parseDirective(text);
        // the filter regex check might give false positive
        // for pipes inside strings, so it's possible that
        // we don't get any filters here
        var val = this.$get(dir.expression, asStatement);
        return dir.filters ? this._applyFilters(val, null, dir.filters) : val;
      } else {
        // no filter
        return this.$get(text, asStatement);
      }
    };

    /**
     * Interpolate a piece of template text.
     *
     * @param {String} text
     * @return {String}
     */

    Vue.prototype.$interpolate = function (text) {
      var tokens = parseText(text);
      var vm = this;
      if (tokens) {
        if (tokens.length === 1) {
          return vm.$eval(tokens[0].value) + '';
        } else {
          return tokens.map(function (token) {
            return token.tag ? vm.$eval(token.value) : token.value;
          }).join('');
        }
      } else {
        return text;
      }
    };

    /**
     * Log instance data as a plain JS object
     * so that it is easier to inspect in console.
     * This method assumes console is available.
     *
     * @param {String} [path]
     */

    Vue.prototype.$log = function (path) {
      var data = path ? getPath(this._data, path) : this._data;
      if (data) {
        data = clean(data);
      }
      // include computed fields
      if (!path) {
        var key;
        for (key in this.$options.computed) {
          data[key] = clean(this[key]);
        }
        if (this._props) {
          for (key in this._props) {
            data[key] = clean(this[key]);
          }
        }
      }
      console.log(data);
    };

    /**
     * "clean" a getter/setter converted object into a plain
     * object copy.
     *
     * @param {Object} - obj
     * @return {Object}
     */

    function clean(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
  }

  function domAPI (Vue) {
    /**
     * Convenience on-instance nextTick. The callback is
     * auto-bound to the instance, and this avoids component
     * modules having to rely on the global Vue.
     *
     * @param {Function} fn
     */

    Vue.prototype.$nextTick = function (fn) {
      nextTick(fn, this);
    };

    /**
     * Append instance to target
     *
     * @param {Node} target
     * @param {Function} [cb]
     * @param {Boolean} [withTransition] - defaults to true
     */

    Vue.prototype.$appendTo = function (target, cb, withTransition) {
      return insert(this, target, cb, withTransition, append, appendWithTransition);
    };

    /**
     * Prepend instance to target
     *
     * @param {Node} target
     * @param {Function} [cb]
     * @param {Boolean} [withTransition] - defaults to true
     */

    Vue.prototype.$prependTo = function (target, cb, withTransition) {
      target = query(target);
      if (target.hasChildNodes()) {
        this.$before(target.firstChild, cb, withTransition);
      } else {
        this.$appendTo(target, cb, withTransition);
      }
      return this;
    };

    /**
     * Insert instance before target
     *
     * @param {Node} target
     * @param {Function} [cb]
     * @param {Boolean} [withTransition] - defaults to true
     */

    Vue.prototype.$before = function (target, cb, withTransition) {
      return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);
    };

    /**
     * Insert instance after target
     *
     * @param {Node} target
     * @param {Function} [cb]
     * @param {Boolean} [withTransition] - defaults to true
     */

    Vue.prototype.$after = function (target, cb, withTransition) {
      target = query(target);
      if (target.nextSibling) {
        this.$before(target.nextSibling, cb, withTransition);
      } else {
        this.$appendTo(target.parentNode, cb, withTransition);
      }
      return this;
    };

    /**
     * Remove instance from DOM
     *
     * @param {Function} [cb]
     * @param {Boolean} [withTransition] - defaults to true
     */

    Vue.prototype.$remove = function (cb, withTransition) {
      if (!this.$el.parentNode) {
        return cb && cb();
      }
      var inDocument = this._isAttached && inDoc(this.$el);
      // if we are not in document, no need to check
      // for transitions
      if (!inDocument) withTransition = false;
      var self = this;
      var realCb = function realCb() {
        if (inDocument) self._callHook('detached');
        if (cb) cb();
      };
      if (this._isFragment) {
        removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);
      } else {
        var op = withTransition === false ? removeWithCb : removeWithTransition;
        op(this.$el, this, realCb);
      }
      return this;
    };

    /**
     * Shared DOM insertion function.
     *
     * @param {Vue} vm
     * @param {Element} target
     * @param {Function} [cb]
     * @param {Boolean} [withTransition]
     * @param {Function} op1 - op for non-transition insert
     * @param {Function} op2 - op for transition insert
     * @return vm
     */

    function insert(vm, target, cb, withTransition, op1, op2) {
      target = query(target);
      var targetIsDetached = !inDoc(target);
      var op = withTransition === false || targetIsDetached ? op1 : op2;
      var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);
      if (vm._isFragment) {
        mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {
          op(node, target, vm);
        });
        cb && cb();
      } else {
        op(vm.$el, target, vm, cb);
      }
      if (shouldCallHook) {
        vm._callHook('attached');
      }
      return vm;
    }

    /**
     * Check for selectors
     *
     * @param {String|Element} el
     */

    function query(el) {
      return typeof el === 'string' ? document.querySelector(el) : el;
    }

    /**
     * Append operation that takes a callback.
     *
     * @param {Node} el
     * @param {Node} target
     * @param {Vue} vm - unused
     * @param {Function} [cb]
     */

    function append(el, target, vm, cb) {
      target.appendChild(el);
      if (cb) cb();
    }

    /**
     * InsertBefore operation that takes a callback.
     *
     * @param {Node} el
     * @param {Node} target
     * @param {Vue} vm - unused
     * @param {Function} [cb]
     */

    function beforeWithCb(el, target, vm, cb) {
      before(el, target);
      if (cb) cb();
    }

    /**
     * Remove operation that takes a callback.
     *
     * @param {Node} el
     * @param {Vue} vm - unused
     * @param {Function} [cb]
     */

    function removeWithCb(el, vm, cb) {
      remove(el);
      if (cb) cb();
    }
  }

  function eventsAPI (Vue) {
    /**
     * Listen on the given `event` with `fn`.
     *
     * @param {String} event
     * @param {Function} fn
     */

    Vue.prototype.$on = function (event, fn) {
      (this._events[event] || (this._events[event] = [])).push(fn);
      modifyListenerCount(this, event, 1);
      return this;
    };

    /**
     * Adds an `event` listener that will be invoked a single
     * time then automatically removed.
     *
     * @param {String} event
     * @param {Function} fn
     */

    Vue.prototype.$once = function (event, fn) {
      var self = this;
      function on() {
        self.$off(event, on);
        fn.apply(this, arguments);
      }
      on.fn = fn;
      this.$on(event, on);
      return this;
    };

    /**
     * Remove the given callback for `event` or all
     * registered callbacks.
     *
     * @param {String} event
     * @param {Function} fn
     */

    Vue.prototype.$off = function (event, fn) {
      var cbs;
      // all
      if (!arguments.length) {
        if (this.$parent) {
          for (event in this._events) {
            cbs = this._events[event];
            if (cbs) {
              modifyListenerCount(this, event, -cbs.length);
            }
          }
        }
        this._events = {};
        return this;
      }
      // specific event
      cbs = this._events[event];
      if (!cbs) {
        return this;
      }
      if (arguments.length === 1) {
        modifyListenerCount(this, event, -cbs.length);
        this._events[event] = null;
        return this;
      }
      // specific handler
      var cb;
      var i = cbs.length;
      while (i--) {
        cb = cbs[i];
        if (cb === fn || cb.fn === fn) {
          modifyListenerCount(this, event, -1);
          cbs.splice(i, 1);
          break;
        }
      }
      return this;
    };

    /**
     * Trigger an event on self.
     *
     * @param {String|Object} event
     * @return {Boolean} shouldPropagate
     */

    Vue.prototype.$emit = function (event) {
      var isSource = typeof event === 'string';
      event = isSource ? event : event.name;
      var cbs = this._events[event];
      var shouldPropagate = isSource || !cbs;
      if (cbs) {
        cbs = cbs.length > 1 ? toArray(cbs) : cbs;
        // this is a somewhat hacky solution to the question raised
        // in #2102: for an inline component listener like <comp @test="doThis">,
        // the propagation handling is somewhat broken. Therefore we
        // need to treat these inline callbacks differently.
        var hasParentCbs = isSource && cbs.some(function (cb) {
          return cb._fromParent;
        });
        if (hasParentCbs) {
          shouldPropagate = false;
        }
        var args = toArray(arguments, 1);
        for (var i = 0, l = cbs.length; i < l; i++) {
          var cb = cbs[i];
          var res = cb.apply(this, args);
          if (res === true && (!hasParentCbs || cb._fromParent)) {
            shouldPropagate = true;
          }
        }
      }
      return shouldPropagate;
    };

    /**
     * Recursively broadcast an event to all children instances.
     *
     * @param {String|Object} event
     * @param {...*} additional arguments
     */

    Vue.prototype.$broadcast = function (event) {
      var isSource = typeof event === 'string';
      event = isSource ? event : event.name;
      // if no child has registered for this event,
      // then there's no need to broadcast.
      if (!this._eventsCount[event]) return;
      var children = this.$children;
      var args = toArray(arguments);
      if (isSource) {
        // use object event to indicate non-source emit
        // on children
        args[0] = { name: event, source: this };
      }
      for (var i = 0, l = children.length; i < l; i++) {
        var child = children[i];
        var shouldPropagate = child.$emit.apply(child, args);
        if (shouldPropagate) {
          child.$broadcast.apply(child, args);
        }
      }
      return this;
    };

    /**
     * Recursively propagate an event up the parent chain.
     *
     * @param {String} event
     * @param {...*} additional arguments
     */

    Vue.prototype.$dispatch = function (event) {
      var shouldPropagate = this.$emit.apply(this, arguments);
      if (!shouldPropagate) return;
      var parent = this.$parent;
      var args = toArray(arguments);
      // use object event to indicate non-source emit
      // on parents
      args[0] = { name: event, source: this };
      while (parent) {
        shouldPropagate = parent.$emit.apply(parent, args);
        parent = shouldPropagate ? parent.$parent : null;
      }
      return this;
    };

    /**
     * Modify the listener counts on all parents.
     * This bookkeeping allows $broadcast to return early when
     * no child has listened to a certain event.
     *
     * @param {Vue} vm
     * @param {String} event
     * @param {Number} count
     */

    var hookRE = /^hook:/;
    function modifyListenerCount(vm, event, count) {
      var parent = vm.$parent;
      // hooks do not get broadcasted so no need
      // to do bookkeeping for them
      if (!parent || !count || hookRE.test(event)) return;
      while (parent) {
        parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;
        parent = parent.$parent;
      }
    }
  }

  function lifecycleAPI (Vue) {
    /**
     * Set instance target element and kick off the compilation
     * process. The passed in `el` can be a selector string, an
     * existing Element, or a DocumentFragment (for block
     * instances).
     *
     * @param {Element|DocumentFragment|string} el
     * @public
     */

    Vue.prototype.$mount = function (el) {
      if (this._isCompiled) {
        ("development") !== 'production' && warn('$mount() should be called only once.', this);
        return;
      }
      el = query(el);
      if (!el) {
        el = document.createElement('div');
      }
      this._compile(el);
      this._initDOMHooks();
      if (inDoc(this.$el)) {
        this._callHook('attached');
        ready.call(this);
      } else {
        this.$once('hook:attached', ready);
      }
      return this;
    };

    /**
     * Mark an instance as ready.
     */

    function ready() {
      this._isAttached = true;
      this._isReady = true;
      this._callHook('ready');
    }

    /**
     * Teardown the instance, simply delegate to the internal
     * _destroy.
     *
     * @param {Boolean} remove
     * @param {Boolean} deferCleanup
     */

    Vue.prototype.$destroy = function (remove, deferCleanup) {
      this._destroy(remove, deferCleanup);
    };

    /**
     * Partially compile a piece of DOM and return a
     * decompile function.
     *
     * @param {Element|DocumentFragment} el
     * @param {Vue} [host]
     * @param {Object} [scope]
     * @param {Fragment} [frag]
     * @return {Function}
     */

    Vue.prototype.$compile = function (el, host, scope, frag) {
      return compile(el, this.$options, true)(this, el, host, scope, frag);
    };
  }

  /**
   * The exposed Vue constructor.
   *
   * API conventions:
   * - public API methods/properties are prefixed with `$`
   * - internal methods/properties are prefixed with `_`
   * - non-prefixed properties are assumed to be proxied user
   *   data.
   *
   * @constructor
   * @param {Object} [options]
   * @public
   */

  function Vue(options) {
    this._init(options);
  }

  // install internals
  initMixin(Vue);
  stateMixin(Vue);
  eventsMixin(Vue);
  lifecycleMixin(Vue);
  miscMixin(Vue);

  // install instance APIs
  dataAPI(Vue);
  domAPI(Vue);
  eventsAPI(Vue);
  lifecycleAPI(Vue);

  var slot = {

    priority: SLOT,
    params: ['name'],

    bind: function bind() {
      // this was resolved during component transclusion
      var name = this.params.name || 'default';
      var content = this.vm._slotContents && this.vm._slotContents[name];
      if (!content || !content.hasChildNodes()) {
        this.fallback();
      } else {
        this.compile(content.cloneNode(true), this.vm._context, this.vm);
      }
    },

    compile: function compile(content, context, host) {
      if (content && context) {
        if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {
          // if the inserted slot has v-if
          // inject fallback content as the v-else
          var elseBlock = document.createElement('template');
          elseBlock.setAttribute('v-else', '');
          elseBlock.innerHTML = this.el.innerHTML;
          // the else block should be compiled in child scope
          elseBlock._context = this.vm;
          content.appendChild(elseBlock);
        }
        var scope = host ? host._scope : this._scope;
        this.unlink = context.$compile(content, host, scope, this._frag);
      }
      if (content) {
        replace(this.el, content);
      } else {
        remove(this.el);
      }
    },

    fallback: function fallback() {
      this.compile(extractContent(this.el, true), this.vm);
    },

    unbind: function unbind() {
      if (this.unlink) {
        this.unlink();
      }
    }
  };

  var partial = {

    priority: PARTIAL,

    params: ['name'],

    // watch changes to name for dynamic partials
    paramWatchers: {
      name: function name(value) {
        vIf.remove.call(this);
        if (value) {
          this.insert(value);
        }
      }
    },

    bind: function bind() {
      this.anchor = createAnchor('v-partial');
      replace(this.el, this.anchor);
      this.insert(this.params.name);
    },

    insert: function insert(id) {
      var partial = resolveAsset(this.vm.$options, 'partials', id, true);
      if (partial) {
        this.factory = new FragmentFactory(this.vm, partial);
        vIf.insert.call(this);
      }
    },

    unbind: function unbind() {
      if (this.frag) {
        this.frag.destroy();
      }
    }
  };

  var elementDirectives = {
    slot: slot,
    partial: partial
  };

  var convertArray = vFor._postProcess;

  /**
   * Limit filter for arrays
   *
   * @param {Number} n
   * @param {Number} offset (Decimal expected)
   */

  function limitBy(arr, n, offset) {
    offset = offset ? parseInt(offset, 10) : 0;
    n = toNumber(n);
    return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;
  }

  /**
   * Filter filter for arrays
   *
   * @param {String} search
   * @param {String} [delimiter]
   * @param {String} ...dataKeys
   */

  function filterBy(arr, search, delimiter) {
    arr = convertArray(arr);
    if (search == null) {
      return arr;
    }
    if (typeof search === 'function') {
      return arr.filter(search);
    }
    // cast to lowercase string
    search = ('' + search).toLowerCase();
    // allow optional `in` delimiter
    // because why not
    var n = delimiter === 'in' ? 3 : 2;
    // extract and flatten keys
    var keys = Array.prototype.concat.apply([], toArray(arguments, n));
    var res = [];
    var item, key, val, j;
    for (var i = 0, l = arr.length; i < l; i++) {
      item = arr[i];
      val = item && item.$value || item;
      j = keys.length;
      if (j) {
        while (j--) {
          key = keys[j];
          if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {
            res.push(item);
            break;
          }
        }
      } else if (contains(item, search)) {
        res.push(item);
      }
    }
    return res;
  }

  /**
   * Filter filter for arrays
   *
   * @param {String|Array<String>|Function} ...sortKeys
   * @param {Number} [order]
   */

  function orderBy(arr) {
    var comparator = null;
    var sortKeys = undefined;
    arr = convertArray(arr);

    // determine order (last argument)
    var args = toArray(arguments, 1);
    var order = args[args.length - 1];
    if (typeof order === 'number') {
      order = order < 0 ? -1 : 1;
      args = args.length > 1 ? args.slice(0, -1) : args;
    } else {
      order = 1;
    }

    // determine sortKeys & comparator
    var firstArg = args[0];
    if (!firstArg) {
      return arr;
    } else if (typeof firstArg === 'function') {
      // custom comparator
      comparator = function (a, b) {
        return firstArg(a, b) * order;
      };
    } else {
      // string keys. flatten first
      sortKeys = Array.prototype.concat.apply([], args);
      comparator = function (a, b, i) {
        i = i || 0;
        return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);
      };
    }

    function baseCompare(a, b, sortKeyIndex) {
      var sortKey = sortKeys[sortKeyIndex];
      if (sortKey) {
        if (sortKey !== '$key') {
          if (isObject(a) && '$value' in a) a = a.$value;
          if (isObject(b) && '$value' in b) b = b.$value;
        }
        a = isObject(a) ? getPath(a, sortKey) : a;
        b = isObject(b) ? getPath(b, sortKey) : b;
      }
      return a === b ? 0 : a > b ? order : -order;
    }

    // sort on a copy to avoid mutating original array
    return arr.slice().sort(comparator);
  }

  /**
   * String contain helper
   *
   * @param {*} val
   * @param {String} search
   */

  function contains(val, search) {
    var i;
    if (isPlainObject(val)) {
      var keys = Object.keys(val);
      i = keys.length;
      while (i--) {
        if (contains(val[keys[i]], search)) {
          return true;
        }
      }
    } else if (isArray(val)) {
      i = val.length;
      while (i--) {
        if (contains(val[i], search)) {
          return true;
        }
      }
    } else if (val != null) {
      return val.toString().toLowerCase().indexOf(search) > -1;
    }
  }

  var digitsRE = /(\d{3})(?=\d)/g;

  // asset collections must be a plain object.
  var filters = {

    orderBy: orderBy,
    filterBy: filterBy,
    limitBy: limitBy,

    /**
     * Stringify value.
     *
     * @param {Number} indent
     */

    json: {
      read: function read(value, indent) {
        return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);
      },
      write: function write(value) {
        try {
          return JSON.parse(value);
        } catch (e) {
          return value;
        }
      }
    },

    /**
     * 'abc' => 'Abc'
     */

    capitalize: function capitalize(value) {
      if (!value && value !== 0) return '';
      value = value.toString();
      return value.charAt(0).toUpperCase() + value.slice(1);
    },

    /**
     * 'abc' => 'ABC'
     */

    uppercase: function uppercase(value) {
      return value || value === 0 ? value.toString().toUpperCase() : '';
    },

    /**
     * 'AbC' => 'abc'
     */

    lowercase: function lowercase(value) {
      return value || value === 0 ? value.toString().toLowerCase() : '';
    },

    /**
     * 12345 => $12,345.00
     *
     * @param {String} sign
     * @param {Number} decimals Decimal places
     */

    currency: function currency(value, _currency, decimals) {
      value = parseFloat(value);
      if (!isFinite(value) || !value && value !== 0) return '';
      _currency = _currency != null ? _currency : '$';
      decimals = decimals != null ? decimals : 2;
      var stringified = Math.abs(value).toFixed(decimals);
      var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;
      var i = _int.length % 3;
      var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';
      var _float = decimals ? stringified.slice(-1 - decimals) : '';
      var sign = value < 0 ? '-' : '';
      return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;
    },

    /**
     * 'item' => 'items'
     *
     * @params
     *  an array of strings corresponding to
     *  the single, double, triple ... forms of the word to
     *  be pluralized. When the number to be pluralized
     *  exceeds the length of the args, it will use the last
     *  entry in the array.
     *
     *  e.g. ['single', 'double', 'triple', 'multiple']
     */

    pluralize: function pluralize(value) {
      var args = toArray(arguments, 1);
      var length = args.length;
      if (length > 1) {
        var index = value % 10 - 1;
        return index in args ? args[index] : args[length - 1];
      } else {
        return args[0] + (value === 1 ? '' : 's');
      }
    },

    /**
     * Debounce a handler function.
     *
     * @param {Function} handler
     * @param {Number} delay = 300
     * @return {Function}
     */

    debounce: function debounce(handler, delay) {
      if (!handler) return;
      if (!delay) {
        delay = 300;
      }
      return _debounce(handler, delay);
    }
  };

  function installGlobalAPI (Vue) {
    /**
     * Vue and every constructor that extends Vue has an
     * associated options object, which can be accessed during
     * compilation steps as `this.constructor.options`.
     *
     * These can be seen as the default options of every
     * Vue instance.
     */

    Vue.options = {
      directives: directives,
      elementDirectives: elementDirectives,
      filters: filters,
      transitions: {},
      components: {},
      partials: {},
      replace: true
    };

    /**
     * Expose useful internals
     */

    Vue.util = util;
    Vue.config = config;
    Vue.set = set;
    Vue['delete'] = del;
    Vue.nextTick = nextTick;

    /**
     * The following are exposed for advanced usage / plugins
     */

    Vue.compiler = compiler;
    Vue.FragmentFactory = FragmentFactory;
    Vue.internalDirectives = internalDirectives;
    Vue.parsers = {
      path: path,
      text: text,
      template: template,
      directive: directive,
      expression: expression
    };

    /**
     * Each instance constructor, including Vue, has a unique
     * cid. This enables us to create wrapped "child
     * constructors" for prototypal inheritance and cache them.
     */

    Vue.cid = 0;
    var cid = 1;

    /**
     * Class inheritance
     *
     * @param {Object} extendOptions
     */

    Vue.extend = function (extendOptions) {
      extendOptions = extendOptions || {};
      var Super = this;
      var isFirstExtend = Super.cid === 0;
      if (isFirstExtend && extendOptions._Ctor) {
        return extendOptions._Ctor;
      }
      var name = extendOptions.name || Super.options.name;
      if (true) {
        if (!/^[a-zA-Z][\w-]*$/.test(name)) {
          warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');
          name = null;
        }
      }
      var Sub = createClass(name || 'VueComponent');
      Sub.prototype = Object.create(Super.prototype);
      Sub.prototype.constructor = Sub;
      Sub.cid = cid++;
      Sub.options = mergeOptions(Super.options, extendOptions);
      Sub['super'] = Super;
      // allow further extension
      Sub.extend = Super.extend;
      // create asset registers, so extended classes
      // can have their private assets too.
      config._assetTypes.forEach(function (type) {
        Sub[type] = Super[type];
      });
      // enable recursive self-lookup
      if (name) {
        Sub.options.components[name] = Sub;
      }
      // cache constructor
      if (isFirstExtend) {
        extendOptions._Ctor = Sub;
      }
      return Sub;
    };

    /**
     * A function that returns a sub-class constructor with the
     * given name. This gives us much nicer output when
     * logging instances in the console.
     *
     * @param {String} name
     * @return {Function}
     */

    function createClass(name) {
      /* eslint-disable no-new-func */
      return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();
      /* eslint-enable no-new-func */
    }

    /**
     * Plugin system
     *
     * @param {Object} plugin
     */

    Vue.use = function (plugin) {
      /* istanbul ignore if */
      if (plugin.installed) {
        return;
      }
      // additional parameters
      var args = toArray(arguments, 1);
      args.unshift(this);
      if (typeof plugin.install === 'function') {
        plugin.install.apply(plugin, args);
      } else {
        plugin.apply(null, args);
      }
      plugin.installed = true;
      return this;
    };

    /**
     * Apply a global mixin by merging it into the default
     * options.
     */

    Vue.mixin = function (mixin) {
      Vue.options = mergeOptions(Vue.options, mixin);
    };

    /**
     * Create asset registration methods with the following
     * signature:
     *
     * @param {String} id
     * @param {*} definition
     */

    config._assetTypes.forEach(function (type) {
      Vue[type] = function (id, definition) {
        if (!definition) {
          return this.options[type + 's'][id];
        } else {
          /* istanbul ignore if */
          if (true) {
            if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {
              warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);
            }
          }
          if (type === 'component' && isPlainObject(definition)) {
            if (!definition.name) {
              definition.name = id;
            }
            definition = Vue.extend(definition);
          }
          this.options[type + 's'][id] = definition;
          return definition;
        }
      };
    });

    // expose internal transition API
    extend(Vue.transition, transition);
  }

  installGlobalAPI(Vue);

  Vue.version = '1.0.26';

  // devtools global hook
  /* istanbul ignore next */
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (("development") !== 'production' && inBrowser && /Chrome\/\d+/.test(window.navigator.userAgent)) {
        console.log('Download the Vue Devtools for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }
  }, 0);

  module.exports = Vue;
  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var moment = __webpack_require__(1);
  moment.locale("zh-cn");
  function format(t, fmt) {
      if (!t)
          return "";
      return moment(t).format(fmt || "Y-MM-DD HH:mm:ss");
  }
  exports.format = format;
  function formatEndDate(t) {
      if (!t)
          return "";
      var m = moment(t);
      if (!m.hour() && !m.minute() && !m.second()) {
          m = m.subtract(1, 'days');
          return m.format("Y-MM-DD");
      }
      return m.format("Y-MM-DD HH:mm");
  }
  exports.formatEndDate = formatEndDate;
  function short(t) {
      if (!t)
          return "";
      return moment(t).fromNow();
  }
  exports.short = short;
  function valueOf(t) {
      if (!t)
          return 0;
      return moment(t).valueOf();
  }
  exports.valueOf = valueOf;
  window.time = {
      format: format,
      short: short,
      valueOf: valueOf
  };


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var actions = __webpack_require__(129);
  exports.init = actions.init;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  var tooltip = __webpack_require__(11);
  var notification = __webpack_require__(14);
  function nickEdit() {
      var nick = $("#nick-edit");
      var inner = nick.children().first();
      var v = inner.text();
      inner.html("<input type='text' maxlength='10' class='nick-edit'/>");
      var edit = inner.children();
      edit.val(v);
      edit.on("click", function (e) { return e.stopPropagation(); });
      var end = function () {
          var v = edit.val().trim();
          if (!v) {
              tooltip.show(edit, "请输入您的昵称");
              return;
          }
          $(document.body).off("click", end);
          inner.text(v);
          api.User.Update({
              NickName: v
          }).then(function (r) {
              tooltip.show(nick, "昵称已保存");
              window.setTimeout(function () {
                  return window.location.reload();
              }, 2000);
          }, function (e) {
              tooltip.show(nick, "修改失败:" + e._error);
              window.setTimeout(function () {
                  return window.location.reload();
              }, 2000);
          });
      };
      $(document.body).on("click", end);
  }
  function userIconUpdate() {
      $('#userIconUpload').click();
  }
  function handleIconUpload() {
      var file = $('#userIconUpload');
      file.attr("data-url", "/api/media/upload");
      var img = file.parent().children("img");
      file.fileupload({
          dataType: 'text',
          done: function (e, data) {
              api.User.Update({
                  Image: data.result
              }).then(function (r) {
                  img.attr("src", "/r/" + data.result + "?format=c100");
                  tooltip.show(img, "头像已修改");
              });
          }
      });
  }
  var dailyAttanded = false;
  function dailySign(args) {
      if (dailyAttanded)
          return;
      dailyAttanded = true;
      api.Promotion.DailyAttend().then(function (re) {
          $("span", $(args.element)).html("已签到");
      }, function (e) {
          var el = $("span", $(args.element));
          el.html("签到失败");
          $(args.element).attr("title", e._error);
          //alert("每日签到暂时不可用");
      });
  }
  function initNotificationIcon() {
      notification.update().then(function (re) {
          if (re.ReceivedUnreaded)
              $("#user-head-notification").append("<span>" + (re.ReceivedUnreaded < 10 ? re.ReceivedUnreaded : "9+") + "</span>");
      });
  }
  var inited = false;
  module.exports = function () {
      if (inited)
          return;
      inited = true;
      handleIconUpload();
      initNotificationIcon();
      actions.init({
          nickEdit: nickEdit,
          userIconUpdate: userIconUpdate,
          dailySign: dailySign
      });
  };


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var base64 = __webpack_require__(131);
  var _user = undefined;
  function parseUserFromCookie() {
      var cs = document.cookie;
      var i = cs.indexOf(".sp.user=");
      if (i == -1)
          return null;
      i += 9;
      var j = cs.indexOf(';', i);
      var userStr = cs.substring(i, j == -1 ? cs.length : j);
      if (!userStr)
          return null;
      userStr = decodeURIComponent(userStr);
      var user = JSON.parse(base64.decode(userStr));
      return user;
  }
  function user() {
      if (_user === undefined)
          _user = parseUserFromCookie();
      return _user;
  }
  exports.user = user;
  function update(user) {
      _user = user;
  }
  exports.update = update;
  function isMobile(s) {
      if (!s)
          return false;
      var reg = /^1[3|4|5|7|8][0-9]\d{4,8}$/;
      return s.length == 11 && reg.test(s);
  }
  exports.isMobile = isMobile;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var Vue = __webpack_require__(3);
  var pagination_1 = __webpack_require__(135);
  var component = Vue.extend({
      props: {
          version: { type: Number, required: true },
          total: { type: Number, required: true },
          itemsPerPage: { type: Number, default: 10 },
          hidePaging: { type: Boolean }
      },
      template: "\n<div class='data-table'>\n<div>\n    <slot/>\n</div>\n<div v-if=\"showPaging\" >\n    <pagination :current=\"current\" :total=\"total\" :items-per-page=\"itemsPerPage\"/>\n</div>\n</div>\n",
      data: function () {
          return {
              current: 0,
          };
      },
      computed: {
          showPaging: function () {
              return !this.hidePaging;
          }
      },
      components: {
          pagination: pagination_1.default
      },
      activate: function (done) {
          this.$dispatch('loadTableData', {
              offset: 0,
              limit: this.itemsPerPage,
              totalRequired: true
          });
          done();
      },
      watch: {
          version: function (v) {
              this.current = 0;
              this.$dispatch('loadTableData', {
                  offset: 0,
                  limit: this.itemsPerPage,
                  totalRequired: true
              });
          }
      },
      events: {
          pageChanged: function (offset, count) {
              this.current = offset;
              this.$dispatch('loadTableData', {
                  offset: offset,
                  limit: count,
                  totalRequired: false
              });
          }
      }
  });
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = component;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var validator = __webpack_require__(15);
  var tooltip = __webpack_require__(11);
  var jQuery = window["jQuery"];
  jQuery.extend(jQuery.validator.messages, {
      required: "必须字段",
      remote: "请修正该字段",
      email: "请输入正确格式的电子邮件",
      url: "请输入正确的网址",
      date: "请输入正确的日期",
      dateISO: "请输入合法的日期 (ISO).",
      number: "请输入数字",
      digits: "只能输入整数",
      creditcard: "请输入正确的信用卡号",
      equalTo: "请再次输入相同的内容",
      accept: "请输入拥有合法后缀名的字符串",
      maxlength: jQuery.validator.format("长度不能超过 {0} 个字符"),
      minlength: jQuery.validator.format("长度不能少于 {0} 个字符"),
      rangelength: jQuery.validator.format("长度在 {0} 和 {1} 之间"),
      range: jQuery.validator.format("请输入一个介于 {0} 和 {1} 之间的数字"),
      max: jQuery.validator.format("不能超过{0}"),
      min: jQuery.validator.format("不能小于{0}"),
      length: jQuery.validator.format("长度为{0}个字符"),
      isMobile: "请填写11位手机号码，如:13012345678",
      isMobileOrPhone: "请填写手机或座机码，如:13012345678,021-12345678",
      password: "您输入的密码太简单，密码至少需要6个字符"
  });
  jQuery.validator.addMethod("isMobile", function (value, element) {
      return this.optional(element) || validator.isMobile(value);
  });
  jQuery.validator.addMethod("isMobileOrPhone", function (value, element) {
      return this.optional(element) || validator.isMobileOrPhone(value);
  });
  jQuery.validator.addMethod("length", function (value, element, params) {
      return this.optional(element) || value && value.length == params;
  });
  jQuery.validator.addMethod("password", function (value, element, params) {
      return this.optional(element) || value && value.length >= 6;
  });
  function inputGroup(e) {
      return $(e).parent('.input-group').length ? $(e).parent() : $(e);
  }
  function validate(form, cfgs) {
      return $(form).validate($.extend({
          highlight: function (element) {
              var grp = $(element).closest('.form-group');
              grp.addClass('has-error has-feedback');
              //if (!grp.children(".glyphicon-remove").length)
              //    $('<span class="glyphicon glyphicon-remove form-control-feedback" aria-hidden="true"></span>')
              //        .insertAfter(inputGroup(element));
              //grp.children(".glyphicon-ok").remove();
          },
          unhighlight: function (element) {
              var grp = $(element).closest('.form-group');
              //grp.addClass("has-feedback").removeClass('has-error');
              grp.removeClass('has-error has-feedback');
              //grp.addClass("has-feedback").removeClass('has-error');
              //grp.children(".glyphicon-remove").remove();
              //if (!grp.children(".glyphicon-ok").length)
              //    $('<span class="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true"></span>')
              //        .insertAfter(inputGroup(element));
          },
          errorElement: 'span',
          errorClass: 'help-block',
          errorPlacement: function (error, element) {
              var form_group = element.closest(".form-group");
              var ec = $(".form-message", form_group[0]);
              if (ec.length) {
                  if (ec.length > 1) {
                      var gi = element.closest(".form-group-item");
                      if (gi.length)
                          ec = $(".form-message", gi[0]);
                  }
                  ec.append(error);
              }
              else {
                  if (form_group.prop("className").indexOf("col-") != -1 && form_group.next(".form-group").length)
                      error.addClass("help-block-down");
                  form_group.append(error); //.insertAfter(elementGroup(element))
              }
          }
      }, cfgs));
  }
  exports.validate = validate;
  function getJumpBackUrl(key) {
      if (!key) {
          return getJumpBackUrl("returnUrl=") ||
              getJumpBackUrl("jump=");
      }
      var l = window.location.href;
      var i = l.lastIndexOf(key);
      if (i == -1)
          return null;
      return decodeURIComponent(l.substring(i + key.length));
  }
  exports.getJumpBackUrl = getJumpBackUrl;
  function tryJumpBack() {
      var u = getJumpBackUrl();
      if (!u)
          return false;
      window.location.href = u;
      return true;
  }
  exports.tryJumpBack = tryJumpBack;
  function getFormValues(form) {
      var args = {};
      form.serializeArray().forEach(function (p) { return args[p.name] = p.value; });
      return args;
  }
  exports.getFormValues = getFormValues;
  function initShowPassword(password, show) {
      show.on("mouseover", function () {
          password.attr("type", "text");
          $(document.body).one("mousemove", function () {
              return password.attr("type", "password");
          });
      }).on("mousemove", function (e) { return e.stopPropagation(); });
  }
  exports.initShowPassword = initShowPassword;
  function sendVerifyCode(mobileInput, sendCodeButton, codeInput, call) {
      if (!mobileInput.valid() || sendCodeButton.prop("disabled"))
          return;
      sendCodeButton.prop("disabled", true);
      var btnHtml = sendCodeButton.html();
      sendCodeButton.html("正在发送...");
      return call(mobileInput.val()).then(function (re) {
          codeInput.val(re);
          tooltip.show(sendCodeButton, "发送成功");
          var timeout = 30;
          var timer = setInterval(function () {
              if (!timeout) {
                  clearInterval(timer);
                  sendCodeButton.prop("disabled", false);
                  sendCodeButton.html(btnHtml);
                  return;
              }
              timeout--;
              sendCodeButton.html(timeout + "\u79D2\u540E\u53EF\u4EE5\u91CD\u53D1");
          }, 1000);
          sendCodeButton.prop("disabled", true);
      }, function (e) {
          sendCodeButton.prop("disabled", false);
          sendCodeButton.html(btnHtml);
          tooltip.show(sendCodeButton, "发送失败:" + e._error);
      });
  }
  exports.sendVerifyCode = sendVerifyCode;


/***/ },
/* 10 */
/***/ function(module, exports) {

  "use strict";
  function bodyScrollTop() {
      var t1 = document.body.scrollTop || 0;
      var t2 = document.documentElement.scrollTop || 0;
      return Math.max(t1, t2);
  }
  exports.bodyScrollTop = bodyScrollTop;
  function bodyVisibleTop() {
      return document.body.scrollHeight - window.innerHeight;
  }
  exports.bodyVisibleTop = bodyVisibleTop;
  var openWindowForm = null;
  function openWindow(url) {
      if (!openWindowForm) {
          openWindowForm = document.createElement("form");
          openWindowForm.method = "GET";
          openWindowForm.target = "_blank";
          var s = openWindowForm.style;
          s.width = "0";
          s.height = "0";
          s.top = "-100px";
          s.position = "absolute";
          document.body.appendChild(openWindowForm);
      }
      openWindowForm.action = url;
      openWindowForm.submit();
  }
  exports.openWindow = openWindow;


/***/ },
/* 11 */
/***/ function(module, exports) {

  "use strict";
  function show(e, title, hideDelay) {
      if (hideDelay === void 0) { hideDelay = 5000; }
      e.attr("title", title);
      //e.tooltip("fixTitle");
      e.tooltip("show");
      var timer = e.prop("tooltipHideTimer");
      if (timer)
          clearTimeout(timer);
      timer = setTimeout(function () {
          e.prop("tooltipHideTimer", null);
          //e.tooltip("destroy");
      }, hideDelay);
      e.prop("tooltipHideTimer", timer);
  }
  exports.show = show;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var activityTimer = null;
  function getResults(action, quantity) {
      return new Promise(function (resolve, reject) {
          if (activityTimer)
              clearTimeout(activityTimer);
          setTimeout(function () {
              activityTimer = null;
              api.PublicActivity.GetActionResults({
                  Action: action,
                  Quantity: quantity
              }).then(function (re) {
                  if (quantity != quantity) {
                      reject("数量以变化");
                      return;
                  }
                  var totals = re && re[0] && re[0].Items ? re[0].Items.concat
                      .apply(re[0].Items, re.slice(1).map(function (r) { return r.Items; }))
                      .reduce(function (r, c) {
                      r[c.PrizeProvider] = (r[c.PrizeProvider] || 0) + c.RewardCount;
                      return r;
                  }, {}) : {};
                  resolve({
                      totals: totals,
                      activities: re.map(function (r) { return {
                          id: r.Id,
                          name: r.Name,
                          desc: r.Desc,
                          end: r.EndTime ? time.format(r.EndTime, "Y-MM-DD HH:mm") : null,
                          results: r.Items.filter(function (i) { return !!i.RewardCount; }).map(function (i) {
                              return ({
                                  id: i.Id,
                                  name: i.Name,
                                  type: i.PrizeProvider,
                                  count: i.RewardCount,
                                  text: i.PrizeProvider + " x " + i.RewardCount + (i.Name == i.PrizeProvider ? '' : " (" + i.Name + ")")
                              });
                          })
                      }; })
                  });
              }, function (e) { return reject(e); });
          }, 200);
      });
  }
  exports.getResults = getResults;
  ;
  function mapActivityGrant(a) {
      var cc = {
          id: a.Id,
          left: a.LeftCount,
          desc: a.DstActivityDesc,
          name: a.DstActivityName,
          image: a.DstActivityImage ? '/r/' + a.DstActivityImage + '?format=c120' : '/css/desktop/images/activity.png',
          expire: time.formatEndDate(a.ExpiresTime),
          created: time.format(a.CreatedTime),
          used: a.LastUsedTime ? time.format(a.LastUsedTime) : "-",
          url: a.Url,
          urlMobile: a.UrlMobile,
          state: a.State == "Invalid" ? "无效" :
              a.State == "Available" ? "有效" :
                  a.State == "Expired" ? "已过期" :
                      a.State == "Used" ? "已使用" : "无效"
      };
      return cc;
  }
  exports.mapActivityGrant = mapActivityGrant;
  function mapActivityResult(a) {
      var cc = {
          id: a.Id,
          name: a.ActivityName,
          time: time.format(a.Time, "Y-MM-DD HH:mm"),
          status: a.Status,
          desc: a.Desc,
          results: a.Status != "HasReward" ? null : a.RewardSummary ? JSON.parse(a.RewardSummary) : []
      };
      return cc;
  }
  exports.mapActivityResult = mapActivityResult;
  function grantExecActivity(ident) {
      return api.ActivityGrant.ExecuteActivity({ Id: ident });
  }
  exports.grantExecActivity = grantExecActivity;
  function grantStatus(ident, withActionQuantity) {
      return api.ActivityGrant.GetStatus(ident, withActionQuantity);
  }
  exports.grantStatus = grantStatus;
  function rewardItems(ident, opts) {
      return api.PublicActivity.QueryRewardRecords({
          ActivityId: ident,
          UserId: 0
      }, opts);
  }
  exports.rewardItems = rewardItems;
  function publicRewardStatus(id, minutes) {
      return api.PublicActivity.GetRealTimeRewardStatus(id, minutes);
  }
  exports.publicRewardStatus = publicRewardStatus;
  function listObjectPrizeSpecs(id) {
      return api.ObjectPrize.ListSpec(id);
  }
  exports.listObjectPrizeSpecs = listObjectPrizeSpecs;
  function confirmObjectPrizeSpec(rid, sid) {
      api.DeliveryCreate.CreateObjectPrizeDelivery(rid, null, sid);
  }
  exports.confirmObjectPrizeSpec = confirmObjectPrizeSpec;
  window.activity = {
      grantExecActivity: grantExecActivity,
      grantStatus: grantStatus,
      rewardItems: rewardItems,
      publicRewardStatus: publicRewardStatus,
      listObjectPrizeSpecs: listObjectPrizeSpecs,
      confirmObjectPrizeSpec: confirmObjectPrizeSpec
  };


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var uri = __webpack_require__(127);
  var ec = __webpack_require__(20);
  function tryUserTracking() {
      var obj = {};
      var uc = uri.getQueryValue("_uc");
      if (uc)
          obj.uc = uc;
      var ui = uri.getQueryValue("_ui");
      if (ui)
          obj.ui = ui;
      if (uc || ui)
          ec.setObjValues("_t", obj);
  }
  exports.tryUserTracking = tryUserTracking;
  function getUserTracking() {
      return ec.getObject("_t");
  }
  exports.getUserTracking = getUserTracking;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var store = __webpack_require__(20);
  var cache = null;
  var defaultTimeout = 1000 * 10;
  function clear() {
      store.setObjValues("notice-status", null);
  }
  exports.clear = clear;
  function update(force) {
      var updateInternal = function () {
          return api.UserNotificationService.GetStatus().then(function (re) {
              if (!re)
                  return {};
              cache = {
                  time: Date.now(),
                  status: re
              };
              store.setObjValues("notice-status", cache);
              return re;
          });
      };
      var timeout = force ? 1000 : defaultTimeout;
      if (cache && Date.now() - cache.time < timeout)
          return Promise.resolve(cache.status);
      return store.getObject("notice-status").then(function (c) {
          if (!c)
              return updateInternal();
          if (c && c.status && Date.now() - c.time < timeout) {
              cache = c;
              return c.status;
          }
          return updateInternal();
      });
  }
  exports.update = update;


/***/ },
/* 15 */
/***/ function(module, exports) {

  "use strict";
  function isMobile(s) {
      var reg = /^1[3|4|5|7|8][0-9]\d{4,8}$/;
      return s.length == 11 && reg.test(s);
  }
  exports.isMobile = isMobile;
  function isPhone(s) {
      var reg = /^0[1-9]{2,3}-[0-9]{6,8}$/;
      return reg.test(s);
  }
  exports.isPhone = isPhone;
  function isMobileOrPhone(s) {
      return isMobile(s) || isPhone(s);
  }
  exports.isMobileOrPhone = isMobileOrPhone;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var auth = __webpack_require__(7);
  var dom = __webpack_require__(10);
  var Vue = __webpack_require__(3);
  var api = __webpack_require__(2);
  var tooltip = __webpack_require__(11);
  var shoppingcart = __webpack_require__(24);
  var data = {
      items: [],
      total: 0,
      iconCount: "",
      panelTop: "0",
      panelHeight: "0"
  };
  if ($("#shopping-cart-panel").length) {
      var vm = new Vue({
          el: "#shopping-cart-panel",
          data: data,
          methods: {
              remove: function (n) {
                  data.items = data.items.filter(function (i) { return i != n; });
                  api.ShoppingCart.Remove([n.ItemId]);
              },
              show: function () {
                  var e = $("ul", $("#shopping-cart-panel"))[0];
                  if (!e)
                      return;
                  var maxHeight = document.documentElement.clientHeight * 0.8;
                  var minHeight = Math.min(document.documentElement.clientHeight, 300);
                  var ulHeight = e.scrollHeight;
                  var height = Math.max(minHeight, Math.min(ulHeight + 88, maxHeight));
                  data.panelHeight = height + "px";
                  data.panelTop = (50 - (height / 2)) + "px";
              }
          },
          computed: {
              total: function () {
                  return data.items.reduce(function (s, i) { return s + i.Quantity * i.CFPriceUnit; }, 0);
              }
          }
      });
  }
  var updateTimer = null;
  function update() {
      if (updateTimer)
          clearTimeout(updateTimer);
      updateTimer = setTimeout(function () {
          updateTimer = null;
          var u = auth.user();
          if (!u)
              return;
          var e = document.getElementById("shopping-cart-panel");
          if (!e)
              return;
          if (location.href.substr(location.href.length - 5) == "/cart")
              return;
          api.ShoppingCart.Items().then(function (re) {
              data.items = re.map(function (r) {
                  return $.extend(r, {
                      imgLink: "/r/" + r.Image + "?format=c40",
                  });
              });
              data.iconCount = data.items.length > 9 ? "9+" : data.items.length.toString();
          });
      }, 200);
  }
  exports.update = update;
  function addToCart(item, quantity, btn, img) {
      var ni = $("<img>");
      ni.attr("src", img.attr("src"));
      var pos = img.offset();
      pos.top -= dom.bodyScrollTop();
      var iw = img.width();
      var ih = img.height();
      ni.css({
          "border-radius": "10%",
          opacity: 0.5,
          position: "fixed",
          left: pos.left + "px",
          top: pos.top + "px",
          width: iw + "px",
          height: ih + "px",
          "z-index": 100000,
          "filter": "blur(3px)",
      });
      ni.appendTo(document.body);
      var x = pos.left + iw / 2;
      var y = pos.top + ih / 2;
      var dstX = window.innerWidth;
      var dstY = window.innerHeight / 2;
      var i = 0;
      var ra = (dstY + y) * 2;
      var rb = -ra;
      var timer = setInterval(function () {
          i += 0.03;
          var cx = x + (dstX - x) * i;
          var cy = y + (dstY - y) * i + (ra * i * i + rb * i);
          var cw = iw * (1 - i * 0.7);
          var ch = ih * (1 - i * 0.7);
          ni.css({
              left: (cx - cw / 2) + "px",
              top: (cy - ch / 2) + "px",
              width: cw + "px",
              height: ch + "px",
          });
          if (i >= 1) {
              ni.remove();
              clearInterval(timer);
              var u = auth.user();
              if (!u) {
                  shoppingcart.buy(item, 1);
                  return;
              }
              api.ShoppingCart.Add(quantity, [item]).then(function (re) {
                  tooltip.show(btn, "已添加至购物车");
                  update();
              });
          }
      }, 10);
  }
  exports.addToCart = addToCart;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var moment = __webpack_require__(1);
  var tmpl_syncing = function (mode) {
      return (!mode ? "<strong class='open-waiting'></strong>" : "") +
          "\n<div class=\"syncing\" >\n    \u6B63\u5728\u8BA1\u7B97\uFF0C\u8BF7\u7A0D\u540E...\n</div>\n";
  };
  var tmpl_pending = function (mode) {
      return (!mode ? "<strong class='open-waiting'></strong>" : "") +
          "\n    <div class=\"pending\" >\n        \u5F69\u7968\u4E2D\u5FC3\u901A\u8BAF\u5EF6\u65F6\uFF0C\u8BF7\u7A0D\u540E\n        </div>\n";
  };
  function calc_times(item) {
      var t = "" + (Math.floor(item.Total / item.WinSummary.Quantity * 100) * 0.01);
      var i = t.indexOf('.');
      if (i == -1)
          return t + ".00";
      return (t + "000").substring(0, i + 3);
  }
  var tmpl_opened = function (mode, item) {
      switch (mode) {
          case 0:
              return "\n<strong class=\"opened\"></strong>\n<div class=\"win\">\n\t<a href=\"/other/" + item.WinSummary.User.Id + "\" target=\"_blank\"><img src=\"/r/" + item.WinSummary.User.Image + "?format=c40\" /></a>\n\t<dl>\n\t\t<dt>\u63ED\u6653\u65F6\u95F4:</dt>\n\t\t<dd>" + time.format(item.OpenTime, "MM-DD HH:mm:ss") + "</dd>\n\t\t<dt>\u83B7\u5F97\u8005:</dt>\n\t\t<dd><a class=\"user\" href=\"/other/" + item.WinSummary.User.Id + "\" target=\"_blank\">" + item.WinSummary.User.NickName + "</a></dd>\n\t</dl>\n</div>";
          case 1:
              return "\n<div class=\"win\">\n\t<a href=\"/other/" + item.WinSummary.User.Id + "\" target=\"_blank\"><img src=\"/r/" + item.WinSummary.User.Image + "?format=c40\" /></a>\n\t<dl>\n\t\t<dt>\u83B7\u5F97\u8005:</dt>\n\t\t<dd><a class=\"user\" href=\"/other/" + item.WinSummary.User.Id + "\" target=\"_blank\">" + item.WinSummary.User.NickName + "</a></dd>\n\t\t<dt>\u5E78\u8FD0\u53F7\u7801:</dt>\n\t\t<dd><b>" + item.WinSummary.Code + "</b></dd>\n\t\t<dt>\u672C\u671F\u53C2\u4E0E:</dt>\n\t\t<dd><b>" + item.WinSummary.Quantity + "</b> \u4EBA\u6B21</dd>\n\t\t<dt>\u63ED\u6653\u65F6\u95F4:</dt>\n\t\t<dd>" + time.format(item.OpenTime) + "</dd>\n\t</dl>\n\t<a class=\"btn btn-default\" href=\"/item/" + item.ProductId + "-" + item.Round + "\" target=\"_blank\">\n\t\t<span>\u56DE\u62A5\u7387:" + calc_times(item) + "\u500D</span>\n\t\t<span>\u67E5\u770B\u8BE6\u60C5</span>\n\t</a>\n</div>\n";
          case 2:
              return "\n<div class=\"win\">\n\t<a href=\"/other/" + item.WinSummary.User.Id + "\" target=\"_blank\"><img src=\"/r/" + item.WinSummary.User.Image + "?format=c40\" /></a>\n\t<dl>\n\t\t<dt>\u63ED\u6653\u65F6\u95F4:</dt>\n\t\t<dd>" + time.format(item.OpenTime) + "</dd>\n\t\t<dt>\u83B7\u5F97\u8005:</dt>\n\t\t<dd><a class=\"user\" href=\"/other/" + item.WinSummary.User.Id + "\" target=\"_blank\">" + item.WinSummary.User.NickName + "</a></dd>\n\t</dl>\n</div>";
          case 3:
      }
  };
  function buildHanlder(e, cb) {
      var pnt = e.parentElement;
      var cfg = JSON.parse(e.getAttribute("data-cfg"));
      var mode = cfg[0], product = cfg[1], round = cfg[2], dst = cfg[3];
      //dst = Date.now() + 10000;
      var cs = e.getElementsByTagName("b");
      var b0 = cs.item(0);
      var b1 = cs.item(1);
      var b2 = cs.item(2);
      var b3 = cs.item(3);
      var b4 = cs.item(4);
      var b5 = cs.item(5);
      var first = true;
      var set_html = function (html, arg) {
          if (cb)
              cb(arg);
          pnt.innerHTML = html;
      };
      return {
          ontimer: function (now) {
              if (!e.offsetParent)
                  return true;
              var diff = dst - now;
              if (diff <= 0) {
                  set_html(tmpl_syncing(mode), null);
                  return {
                      ProductId: product,
                      Round: round
                  };
              }
              if (first) {
                  e.style.visibility = "visible";
                  first = false;
              }
              var ms = diff % 1000;
              var s = Math.floor(diff / 1000) % 60;
              var m0 = Math.floor(diff / 600000);
              var m1 = Math.floor(diff / 60000) % 10;
              var s0 = Math.floor(diff / 10000) % 6;
              var s1 = Math.floor(diff / 1000) % 10;
              var ms0 = Math.floor(diff / 100) % 10;
              var ms1 = Math.floor(diff / 10) % 10;
              b0.innerText = m0;
              b1.innerText = m1;
              b2.innerText = s0;
              b3.innerText = s1;
              b4.innerText = ms0;
              b5.innerText = ms1;
              return null;
          },
          onresolved: function (round) {
              if (round.OpenTime) {
                  setTimeout(function () {
                      set_html(tmpl_opened(mode, round), round);
                  }, Math.round(5000));
              }
              else {
                  setTimeout(function () {
                      set_html(tmpl_pending(mode), round);
                  }, 5000);
              }
          }
      };
  }
  var handlers = [];
  var timer = null;
  function initTimer() {
      timer = setInterval(function () {
          var now = Date.now();
          var ids = [];
          for (var i = 0; i < handlers.length; i++) {
              var h = handlers[i];
              var id = h.ontimer(now);
              if (!id)
                  continue;
              if (id !== true)
                  ids.push([h, id]);
              handlers.splice(i, 1);
              i--;
          }
          if (!ids.length)
              return;
          api.Round.BatchGet(ids.map(function (i) { return i[1]; })).then(function (re) {
              re.forEach(function (r, i) {
                  ids[i][0].onresolved(r);
              });
          });
      }, 33);
  }
  module.exports = function (e, cb) {
      handlers.push(buildHanlder(e, cb));
      if (!timer)
          initTimer();
  };


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

  /*!

   handlebars v4.0.5

  Copyright (C) 2011-2015 by Yehuda Katz

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.

  @license
  */
  (function webpackUniversalModuleDefinition(root, factory) {
  	if(true)
  		module.exports = factory();
  	else if(typeof define === 'function' && define.amd)
  		define([], factory);
  	else if(typeof exports === 'object')
  		exports["Handlebars"] = factory();
  	else
  		root["Handlebars"] = factory();
  })(this, function() {
  return /******/ (function(modules) { // webpackBootstrap
  /******/ 	// The module cache
  /******/ 	var installedModules = {};

  /******/ 	// The require function
  /******/ 	function __webpack_require__(moduleId) {

  /******/ 		// Check if module is in cache
  /******/ 		if(installedModules[moduleId])
  /******/ 			return installedModules[moduleId].exports;

  /******/ 		// Create a new module (and put it into the cache)
  /******/ 		var module = installedModules[moduleId] = {
  /******/ 			exports: {},
  /******/ 			id: moduleId,
  /******/ 			loaded: false
  /******/ 		};

  /******/ 		// Execute the module function
  /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

  /******/ 		// Flag the module as loaded
  /******/ 		module.loaded = true;

  /******/ 		// Return the exports of the module
  /******/ 		return module.exports;
  /******/ 	}


  /******/ 	// expose the modules object (__webpack_modules__)
  /******/ 	__webpack_require__.m = modules;

  /******/ 	// expose the module cache
  /******/ 	__webpack_require__.c = installedModules;

  /******/ 	// __webpack_public_path__
  /******/ 	__webpack_require__.p = "";

  /******/ 	// Load entry module and return exports
  /******/ 	return __webpack_require__(0);
  /******/ })
  /************************************************************************/
  /******/ ([
  /* 0 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;

  	var _handlebarsRuntime = __webpack_require__(2);

  	var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

  	// Compiler imports

  	var _handlebarsCompilerAst = __webpack_require__(21);

  	var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

  	var _handlebarsCompilerBase = __webpack_require__(22);

  	var _handlebarsCompilerCompiler = __webpack_require__(27);

  	var _handlebarsCompilerJavascriptCompiler = __webpack_require__(28);

  	var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

  	var _handlebarsCompilerVisitor = __webpack_require__(25);

  	var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

  	var _handlebarsNoConflict = __webpack_require__(20);

  	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

  	var _create = _handlebarsRuntime2['default'].create;
  	function create() {
  	  var hb = _create();

  	  hb.compile = function (input, options) {
  	    return _handlebarsCompilerCompiler.compile(input, options, hb);
  	  };
  	  hb.precompile = function (input, options) {
  	    return _handlebarsCompilerCompiler.precompile(input, options, hb);
  	  };

  	  hb.AST = _handlebarsCompilerAst2['default'];
  	  hb.Compiler = _handlebarsCompilerCompiler.Compiler;
  	  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
  	  hb.Parser = _handlebarsCompilerBase.parser;
  	  hb.parse = _handlebarsCompilerBase.parse;

  	  return hb;
  	}

  	var inst = create();
  	inst.create = create;

  	_handlebarsNoConflict2['default'](inst);

  	inst.Visitor = _handlebarsCompilerVisitor2['default'];

  	inst['default'] = inst;

  	exports['default'] = inst;
  	module.exports = exports['default'];

  /***/ },
  /* 1 */
  /***/ function(module, exports) {

  	"use strict";

  	exports["default"] = function (obj) {
  	  return obj && obj.__esModule ? obj : {
  	    "default": obj
  	  };
  	};

  	exports.__esModule = true;

  /***/ },
  /* 2 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireWildcard = __webpack_require__(3)['default'];

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;

  	var _handlebarsBase = __webpack_require__(4);

  	var base = _interopRequireWildcard(_handlebarsBase);

  	// Each of these augment the Handlebars object. No need to setup here.
  	// (This is done to easily share code between commonjs and browse envs)

  	var _handlebarsSafeString = __webpack_require__(18);

  	var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

  	var _handlebarsException = __webpack_require__(6);

  	var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

  	var _handlebarsUtils = __webpack_require__(5);

  	var Utils = _interopRequireWildcard(_handlebarsUtils);

  	var _handlebarsRuntime = __webpack_require__(19);

  	var runtime = _interopRequireWildcard(_handlebarsRuntime);

  	var _handlebarsNoConflict = __webpack_require__(20);

  	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

  	// For compatibility and usage outside of module systems, make the Handlebars object a namespace
  	function create() {
  	  var hb = new base.HandlebarsEnvironment();

  	  Utils.extend(hb, base);
  	  hb.SafeString = _handlebarsSafeString2['default'];
  	  hb.Exception = _handlebarsException2['default'];
  	  hb.Utils = Utils;
  	  hb.escapeExpression = Utils.escapeExpression;

  	  hb.VM = runtime;
  	  hb.template = function (spec) {
  	    return runtime.template(spec, hb);
  	  };

  	  return hb;
  	}

  	var inst = create();
  	inst.create = create;

  	_handlebarsNoConflict2['default'](inst);

  	inst['default'] = inst;

  	exports['default'] = inst;
  	module.exports = exports['default'];

  /***/ },
  /* 3 */
  /***/ function(module, exports) {

  	"use strict";

  	exports["default"] = function (obj) {
  	  if (obj && obj.__esModule) {
  	    return obj;
  	  } else {
  	    var newObj = {};

  	    if (obj != null) {
  	      for (var key in obj) {
  	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
  	      }
  	    }

  	    newObj["default"] = obj;
  	    return newObj;
  	  }
  	};

  	exports.__esModule = true;

  /***/ },
  /* 4 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;
  	exports.HandlebarsEnvironment = HandlebarsEnvironment;

  	var _utils = __webpack_require__(5);

  	var _exception = __webpack_require__(6);

  	var _exception2 = _interopRequireDefault(_exception);

  	var _helpers = __webpack_require__(7);

  	var _decorators = __webpack_require__(15);

  	var _logger = __webpack_require__(17);

  	var _logger2 = _interopRequireDefault(_logger);

  	var VERSION = '4.0.5';
  	exports.VERSION = VERSION;
  	var COMPILER_REVISION = 7;

  	exports.COMPILER_REVISION = COMPILER_REVISION;
  	var REVISION_CHANGES = {
  	  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  	  2: '== 1.0.0-rc.3',
  	  3: '== 1.0.0-rc.4',
  	  4: '== 1.x.x',
  	  5: '== 2.0.0-alpha.x',
  	  6: '>= 2.0.0-beta.1',
  	  7: '>= 4.0.0'
  	};

  	exports.REVISION_CHANGES = REVISION_CHANGES;
  	var objectType = '[object Object]';

  	function HandlebarsEnvironment(helpers, partials, decorators) {
  	  this.helpers = helpers || {};
  	  this.partials = partials || {};
  	  this.decorators = decorators || {};

  	  _helpers.registerDefaultHelpers(this);
  	  _decorators.registerDefaultDecorators(this);
  	}

  	HandlebarsEnvironment.prototype = {
  	  constructor: HandlebarsEnvironment,

  	  logger: _logger2['default'],
  	  log: _logger2['default'].log,

  	  registerHelper: function registerHelper(name, fn) {
  	    if (_utils.toString.call(name) === objectType) {
  	      if (fn) {
  	        throw new _exception2['default']('Arg not supported with multiple helpers');
  	      }
  	      _utils.extend(this.helpers, name);
  	    } else {
  	      this.helpers[name] = fn;
  	    }
  	  },
  	  unregisterHelper: function unregisterHelper(name) {
  	    delete this.helpers[name];
  	  },

  	  registerPartial: function registerPartial(name, partial) {
  	    if (_utils.toString.call(name) === objectType) {
  	      _utils.extend(this.partials, name);
  	    } else {
  	      if (typeof partial === 'undefined') {
  	        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
  	      }
  	      this.partials[name] = partial;
  	    }
  	  },
  	  unregisterPartial: function unregisterPartial(name) {
  	    delete this.partials[name];
  	  },

  	  registerDecorator: function registerDecorator(name, fn) {
  	    if (_utils.toString.call(name) === objectType) {
  	      if (fn) {
  	        throw new _exception2['default']('Arg not supported with multiple decorators');
  	      }
  	      _utils.extend(this.decorators, name);
  	    } else {
  	      this.decorators[name] = fn;
  	    }
  	  },
  	  unregisterDecorator: function unregisterDecorator(name) {
  	    delete this.decorators[name];
  	  }
  	};

  	var log = _logger2['default'].log;

  	exports.log = log;
  	exports.createFrame = _utils.createFrame;
  	exports.logger = _logger2['default'];

  /***/ },
  /* 5 */
  /***/ function(module, exports) {

  	'use strict';

  	exports.__esModule = true;
  	exports.extend = extend;
  	exports.indexOf = indexOf;
  	exports.escapeExpression = escapeExpression;
  	exports.isEmpty = isEmpty;
  	exports.createFrame = createFrame;
  	exports.blockParams = blockParams;
  	exports.appendContextPath = appendContextPath;
  	var escape = {
  	  '&': '&amp;',
  	  '<': '&lt;',
  	  '>': '&gt;',
  	  '"': '&quot;',
  	  "'": '&#x27;',
  	  '`': '&#x60;',
  	  '=': '&#x3D;'
  	};

  	var badChars = /[&<>"'`=]/g,
  	    possible = /[&<>"'`=]/;

  	function escapeChar(chr) {
  	  return escape[chr];
  	}

  	function extend(obj /* , ...source */) {
  	  for (var i = 1; i < arguments.length; i++) {
  	    for (var key in arguments[i]) {
  	      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
  	        obj[key] = arguments[i][key];
  	      }
  	    }
  	  }

  	  return obj;
  	}

  	var toString = Object.prototype.toString;

  	exports.toString = toString;
  	// Sourced from lodash
  	// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
  	/* eslint-disable func-style */
  	var isFunction = function isFunction(value) {
  	  return typeof value === 'function';
  	};
  	// fallback for older versions of Chrome and Safari
  	/* istanbul ignore next */
  	if (isFunction(/x/)) {
  	  exports.isFunction = isFunction = function (value) {
  	    return typeof value === 'function' && toString.call(value) === '[object Function]';
  	  };
  	}
  	exports.isFunction = isFunction;

  	/* eslint-enable func-style */

  	/* istanbul ignore next */
  	var isArray = Array.isArray || function (value) {
  	  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
  	};

  	exports.isArray = isArray;
  	// Older IE versions do not directly support indexOf so we must implement our own, sadly.

  	function indexOf(array, value) {
  	  for (var i = 0, len = array.length; i < len; i++) {
  	    if (array[i] === value) {
  	      return i;
  	    }
  	  }
  	  return -1;
  	}

  	function escapeExpression(string) {
  	  if (typeof string !== 'string') {
  	    // don't escape SafeStrings, since they're already safe
  	    if (string && string.toHTML) {
  	      return string.toHTML();
  	    } else if (string == null) {
  	      return '';
  	    } else if (!string) {
  	      return string + '';
  	    }

  	    // Force a string conversion as this will be done by the append regardless and
  	    // the regex test will do this transparently behind the scenes, causing issues if
  	    // an object's to string has escaped characters in it.
  	    string = '' + string;
  	  }

  	  if (!possible.test(string)) {
  	    return string;
  	  }
  	  return string.replace(badChars, escapeChar);
  	}

  	function isEmpty(value) {
  	  if (!value && value !== 0) {
  	    return true;
  	  } else if (isArray(value) && value.length === 0) {
  	    return true;
  	  } else {
  	    return false;
  	  }
  	}

  	function createFrame(object) {
  	  var frame = extend({}, object);
  	  frame._parent = object;
  	  return frame;
  	}

  	function blockParams(params, ids) {
  	  params.path = ids;
  	  return params;
  	}

  	function appendContextPath(contextPath, id) {
  	  return (contextPath ? contextPath + '.' : '') + id;
  	}

  /***/ },
  /* 6 */
  /***/ function(module, exports) {

  	'use strict';

  	exports.__esModule = true;

  	var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

  	function Exception(message, node) {
  	  var loc = node && node.loc,
  	      line = undefined,
  	      column = undefined;
  	  if (loc) {
  	    line = loc.start.line;
  	    column = loc.start.column;

  	    message += ' - ' + line + ':' + column;
  	  }

  	  var tmp = Error.prototype.constructor.call(this, message);

  	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  	  for (var idx = 0; idx < errorProps.length; idx++) {
  	    this[errorProps[idx]] = tmp[errorProps[idx]];
  	  }

  	  /* istanbul ignore else */
  	  if (Error.captureStackTrace) {
  	    Error.captureStackTrace(this, Exception);
  	  }

  	  if (loc) {
  	    this.lineNumber = line;
  	    this.column = column;
  	  }
  	}

  	Exception.prototype = new Error();

  	exports['default'] = Exception;
  	module.exports = exports['default'];

  /***/ },
  /* 7 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;
  	exports.registerDefaultHelpers = registerDefaultHelpers;

  	var _helpersBlockHelperMissing = __webpack_require__(8);

  	var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

  	var _helpersEach = __webpack_require__(9);

  	var _helpersEach2 = _interopRequireDefault(_helpersEach);

  	var _helpersHelperMissing = __webpack_require__(10);

  	var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

  	var _helpersIf = __webpack_require__(11);

  	var _helpersIf2 = _interopRequireDefault(_helpersIf);

  	var _helpersLog = __webpack_require__(12);

  	var _helpersLog2 = _interopRequireDefault(_helpersLog);

  	var _helpersLookup = __webpack_require__(13);

  	var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

  	var _helpersWith = __webpack_require__(14);

  	var _helpersWith2 = _interopRequireDefault(_helpersWith);

  	function registerDefaultHelpers(instance) {
  	  _helpersBlockHelperMissing2['default'](instance);
  	  _helpersEach2['default'](instance);
  	  _helpersHelperMissing2['default'](instance);
  	  _helpersIf2['default'](instance);
  	  _helpersLog2['default'](instance);
  	  _helpersLookup2['default'](instance);
  	  _helpersWith2['default'](instance);
  	}

  /***/ },
  /* 8 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	exports.__esModule = true;

  	var _utils = __webpack_require__(5);

  	exports['default'] = function (instance) {
  	  instance.registerHelper('blockHelperMissing', function (context, options) {
  	    var inverse = options.inverse,
  	        fn = options.fn;

  	    if (context === true) {
  	      return fn(this);
  	    } else if (context === false || context == null) {
  	      return inverse(this);
  	    } else if (_utils.isArray(context)) {
  	      if (context.length > 0) {
  	        if (options.ids) {
  	          options.ids = [options.name];
  	        }

  	        return instance.helpers.each(context, options);
  	      } else {
  	        return inverse(this);
  	      }
  	    } else {
  	      if (options.data && options.ids) {
  	        var data = _utils.createFrame(options.data);
  	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
  	        options = { data: data };
  	      }

  	      return fn(context, options);
  	    }
  	  });
  	};

  	module.exports = exports['default'];

  /***/ },
  /* 9 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;

  	var _utils = __webpack_require__(5);

  	var _exception = __webpack_require__(6);

  	var _exception2 = _interopRequireDefault(_exception);

  	exports['default'] = function (instance) {
  	  instance.registerHelper('each', function (context, options) {
  	    if (!options) {
  	      throw new _exception2['default']('Must pass iterator to #each');
  	    }

  	    var fn = options.fn,
  	        inverse = options.inverse,
  	        i = 0,
  	        ret = '',
  	        data = undefined,
  	        contextPath = undefined;

  	    if (options.data && options.ids) {
  	      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
  	    }

  	    if (_utils.isFunction(context)) {
  	      context = context.call(this);
  	    }

  	    if (options.data) {
  	      data = _utils.createFrame(options.data);
  	    }

  	    function execIteration(field, index, last) {
  	      if (data) {
  	        data.key = field;
  	        data.index = index;
  	        data.first = index === 0;
  	        data.last = !!last;

  	        if (contextPath) {
  	          data.contextPath = contextPath + field;
  	        }
  	      }

  	      ret = ret + fn(context[field], {
  	        data: data,
  	        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
  	      });
  	    }

  	    if (context && typeof context === 'object') {
  	      if (_utils.isArray(context)) {
  	        for (var j = context.length; i < j; i++) {
  	          if (i in context) {
  	            execIteration(i, i, i === context.length - 1);
  	          }
  	        }
  	      } else {
  	        var priorKey = undefined;

  	        for (var key in context) {
  	          if (context.hasOwnProperty(key)) {
  	            // We're running the iterations one step out of sync so we can detect
  	            // the last iteration without have to scan the object twice and create
  	            // an itermediate keys array.
  	            if (priorKey !== undefined) {
  	              execIteration(priorKey, i - 1);
  	            }
  	            priorKey = key;
  	            i++;
  	          }
  	        }
  	        if (priorKey !== undefined) {
  	          execIteration(priorKey, i - 1, true);
  	        }
  	      }
  	    }

  	    if (i === 0) {
  	      ret = inverse(this);
  	    }

  	    return ret;
  	  });
  	};

  	module.exports = exports['default'];

  /***/ },
  /* 10 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;

  	var _exception = __webpack_require__(6);

  	var _exception2 = _interopRequireDefault(_exception);

  	exports['default'] = function (instance) {
  	  instance.registerHelper('helperMissing', function () /* [args, ]options */{
  	    if (arguments.length === 1) {
  	      // A missing field in a {{foo}} construct.
  	      return undefined;
  	    } else {
  	      // Someone is actually trying to call something, blow up.
  	      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
  	    }
  	  });
  	};

  	module.exports = exports['default'];

  /***/ },
  /* 11 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	exports.__esModule = true;

  	var _utils = __webpack_require__(5);

  	exports['default'] = function (instance) {
  	  instance.registerHelper('if', function (conditional, options) {
  	    if (_utils.isFunction(conditional)) {
  	      conditional = conditional.call(this);
  	    }

  	    // Default behavior is to render the positive path if the value is truthy and not empty.
  	    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
  	    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
  	    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
  	      return options.inverse(this);
  	    } else {
  	      return options.fn(this);
  	    }
  	  });

  	  instance.registerHelper('unless', function (conditional, options) {
  	    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
  	  });
  	};

  	module.exports = exports['default'];

  /***/ },
  /* 12 */
  /***/ function(module, exports) {

  	'use strict';

  	exports.__esModule = true;

  	exports['default'] = function (instance) {
  	  instance.registerHelper('log', function () /* message, options */{
  	    var args = [undefined],
  	        options = arguments[arguments.length - 1];
  	    for (var i = 0; i < arguments.length - 1; i++) {
  	      args.push(arguments[i]);
  	    }

  	    var level = 1;
  	    if (options.hash.level != null) {
  	      level = options.hash.level;
  	    } else if (options.data && options.data.level != null) {
  	      level = options.data.level;
  	    }
  	    args[0] = level;

  	    instance.log.apply(instance, args);
  	  });
  	};

  	module.exports = exports['default'];

  /***/ },
  /* 13 */
  /***/ function(module, exports) {

  	'use strict';

  	exports.__esModule = true;

  	exports['default'] = function (instance) {
  	  instance.registerHelper('lookup', function (obj, field) {
  	    return obj && obj[field];
  	  });
  	};

  	module.exports = exports['default'];

  /***/ },
  /* 14 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	exports.__esModule = true;

  	var _utils = __webpack_require__(5);

  	exports['default'] = function (instance) {
  	  instance.registerHelper('with', function (context, options) {
  	    if (_utils.isFunction(context)) {
  	      context = context.call(this);
  	    }

  	    var fn = options.fn;

  	    if (!_utils.isEmpty(context)) {
  	      var data = options.data;
  	      if (options.data && options.ids) {
  	        data = _utils.createFrame(options.data);
  	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
  	      }

  	      return fn(context, {
  	        data: data,
  	        blockParams: _utils.blockParams([context], [data && data.contextPath])
  	      });
  	    } else {
  	      return options.inverse(this);
  	    }
  	  });
  	};

  	module.exports = exports['default'];

  /***/ },
  /* 15 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;
  	exports.registerDefaultDecorators = registerDefaultDecorators;

  	var _decoratorsInline = __webpack_require__(16);

  	var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

  	function registerDefaultDecorators(instance) {
  	  _decoratorsInline2['default'](instance);
  	}

  /***/ },
  /* 16 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	exports.__esModule = true;

  	var _utils = __webpack_require__(5);

  	exports['default'] = function (instance) {
  	  instance.registerDecorator('inline', function (fn, props, container, options) {
  	    var ret = fn;
  	    if (!props.partials) {
  	      props.partials = {};
  	      ret = function (context, options) {
  	        // Create a new partials stack frame prior to exec.
  	        var original = container.partials;
  	        container.partials = _utils.extend({}, original, props.partials);
  	        var ret = fn(context, options);
  	        container.partials = original;
  	        return ret;
  	      };
  	    }

  	    props.partials[options.args[0]] = options.fn;

  	    return ret;
  	  });
  	};

  	module.exports = exports['default'];

  /***/ },
  /* 17 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	exports.__esModule = true;

  	var _utils = __webpack_require__(5);

  	var logger = {
  	  methodMap: ['debug', 'info', 'warn', 'error'],
  	  level: 'info',

  	  // Maps a given level value to the `methodMap` indexes above.
  	  lookupLevel: function lookupLevel(level) {
  	    if (typeof level === 'string') {
  	      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
  	      if (levelMap >= 0) {
  	        level = levelMap;
  	      } else {
  	        level = parseInt(level, 10);
  	      }
  	    }

  	    return level;
  	  },

  	  // Can be overridden in the host environment
  	  log: function log(level) {
  	    level = logger.lookupLevel(level);

  	    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
  	      var method = logger.methodMap[level];
  	      if (!console[method]) {
  	        // eslint-disable-line no-console
  	        method = 'log';
  	      }

  	      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
  	        message[_key - 1] = arguments[_key];
  	      }

  	      console[method].apply(console, message); // eslint-disable-line no-console
  	    }
  	  }
  	};

  	exports['default'] = logger;
  	module.exports = exports['default'];

  /***/ },
  /* 18 */
  /***/ function(module, exports) {

  	// Build out our basic SafeString type
  	'use strict';

  	exports.__esModule = true;
  	function SafeString(string) {
  	  this.string = string;
  	}

  	SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
  	  return '' + this.string;
  	};

  	exports['default'] = SafeString;
  	module.exports = exports['default'];

  /***/ },
  /* 19 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireWildcard = __webpack_require__(3)['default'];

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;
  	exports.checkRevision = checkRevision;
  	exports.template = template;
  	exports.wrapProgram = wrapProgram;
  	exports.resolvePartial = resolvePartial;
  	exports.invokePartial = invokePartial;
  	exports.noop = noop;

  	var _utils = __webpack_require__(5);

  	var Utils = _interopRequireWildcard(_utils);

  	var _exception = __webpack_require__(6);

  	var _exception2 = _interopRequireDefault(_exception);

  	var _base = __webpack_require__(4);

  	function checkRevision(compilerInfo) {
  	  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
  	      currentRevision = _base.COMPILER_REVISION;

  	  if (compilerRevision !== currentRevision) {
  	    if (compilerRevision < currentRevision) {
  	      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
  	          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
  	      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
  	    } else {
  	      // Use the embedded version info since the runtime doesn't know about this revision yet
  	      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
  	    }
  	  }
  	}

  	function template(templateSpec, env) {
  	  /* istanbul ignore next */
  	  if (!env) {
  	    throw new _exception2['default']('No environment passed to template');
  	  }
  	  if (!templateSpec || !templateSpec.main) {
  	    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
  	  }

  	  templateSpec.main.decorator = templateSpec.main_d;

  	  // Note: Using env.VM references rather than local var references throughout this section to allow
  	  // for external users to override these as psuedo-supported APIs.
  	  env.VM.checkRevision(templateSpec.compiler);

  	  function invokePartialWrapper(partial, context, options) {
  	    if (options.hash) {
  	      context = Utils.extend({}, context, options.hash);
  	      if (options.ids) {
  	        options.ids[0] = true;
  	      }
  	    }

  	    partial = env.VM.resolvePartial.call(this, partial, context, options);
  	    var result = env.VM.invokePartial.call(this, partial, context, options);

  	    if (result == null && env.compile) {
  	      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
  	      result = options.partials[options.name](context, options);
  	    }
  	    if (result != null) {
  	      if (options.indent) {
  	        var lines = result.split('\n');
  	        for (var i = 0, l = lines.length; i < l; i++) {
  	          if (!lines[i] && i + 1 === l) {
  	            break;
  	          }

  	          lines[i] = options.indent + lines[i];
  	        }
  	        result = lines.join('\n');
  	      }
  	      return result;
  	    } else {
  	      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
  	    }
  	  }

  	  // Just add water
  	  var container = {
  	    strict: function strict(obj, name) {
  	      if (!(name in obj)) {
  	        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
  	      }
  	      return obj[name];
  	    },
  	    lookup: function lookup(depths, name) {
  	      var len = depths.length;
  	      for (var i = 0; i < len; i++) {
  	        if (depths[i] && depths[i][name] != null) {
  	          return depths[i][name];
  	        }
  	      }
  	    },
  	    lambda: function lambda(current, context) {
  	      return typeof current === 'function' ? current.call(context) : current;
  	    },

  	    escapeExpression: Utils.escapeExpression,
  	    invokePartial: invokePartialWrapper,

  	    fn: function fn(i) {
  	      var ret = templateSpec[i];
  	      ret.decorator = templateSpec[i + '_d'];
  	      return ret;
  	    },

  	    programs: [],
  	    program: function program(i, data, declaredBlockParams, blockParams, depths) {
  	      var programWrapper = this.programs[i],
  	          fn = this.fn(i);
  	      if (data || depths || blockParams || declaredBlockParams) {
  	        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
  	      } else if (!programWrapper) {
  	        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
  	      }
  	      return programWrapper;
  	    },

  	    data: function data(value, depth) {
  	      while (value && depth--) {
  	        value = value._parent;
  	      }
  	      return value;
  	    },
  	    merge: function merge(param, common) {
  	      var obj = param || common;

  	      if (param && common && param !== common) {
  	        obj = Utils.extend({}, common, param);
  	      }

  	      return obj;
  	    },

  	    noop: env.VM.noop,
  	    compilerInfo: templateSpec.compiler
  	  };

  	  function ret(context) {
  	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  	    var data = options.data;

  	    ret._setup(options);
  	    if (!options.partial && templateSpec.useData) {
  	      data = initData(context, data);
  	    }
  	    var depths = undefined,
  	        blockParams = templateSpec.useBlockParams ? [] : undefined;
  	    if (templateSpec.useDepths) {
  	      if (options.depths) {
  	        depths = context !== options.depths[0] ? [context].concat(options.depths) : options.depths;
  	      } else {
  	        depths = [context];
  	      }
  	    }

  	    function main(context /*, options*/) {
  	      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
  	    }
  	    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
  	    return main(context, options);
  	  }
  	  ret.isTop = true;

  	  ret._setup = function (options) {
  	    if (!options.partial) {
  	      container.helpers = container.merge(options.helpers, env.helpers);

  	      if (templateSpec.usePartial) {
  	        container.partials = container.merge(options.partials, env.partials);
  	      }
  	      if (templateSpec.usePartial || templateSpec.useDecorators) {
  	        container.decorators = container.merge(options.decorators, env.decorators);
  	      }
  	    } else {
  	      container.helpers = options.helpers;
  	      container.partials = options.partials;
  	      container.decorators = options.decorators;
  	    }
  	  };

  	  ret._child = function (i, data, blockParams, depths) {
  	    if (templateSpec.useBlockParams && !blockParams) {
  	      throw new _exception2['default']('must pass block params');
  	    }
  	    if (templateSpec.useDepths && !depths) {
  	      throw new _exception2['default']('must pass parent depths');
  	    }

  	    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
  	  };
  	  return ret;
  	}

  	function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
  	  function prog(context) {
  	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  	    var currentDepths = depths;
  	    if (depths && context !== depths[0]) {
  	      currentDepths = [context].concat(depths);
  	    }

  	    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
  	  }

  	  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

  	  prog.program = i;
  	  prog.depth = depths ? depths.length : 0;
  	  prog.blockParams = declaredBlockParams || 0;
  	  return prog;
  	}

  	function resolvePartial(partial, context, options) {
  	  if (!partial) {
  	    if (options.name === '@partial-block') {
  	      partial = options.data['partial-block'];
  	    } else {
  	      partial = options.partials[options.name];
  	    }
  	  } else if (!partial.call && !options.name) {
  	    // This is a dynamic partial that returned a string
  	    options.name = partial;
  	    partial = options.partials[partial];
  	  }
  	  return partial;
  	}

  	function invokePartial(partial, context, options) {
  	  options.partial = true;
  	  if (options.ids) {
  	    options.data.contextPath = options.ids[0] || options.data.contextPath;
  	  }

  	  var partialBlock = undefined;
  	  if (options.fn && options.fn !== noop) {
  	    options.data = _base.createFrame(options.data);
  	    partialBlock = options.data['partial-block'] = options.fn;

  	    if (partialBlock.partials) {
  	      options.partials = Utils.extend({}, options.partials, partialBlock.partials);
  	    }
  	  }

  	  if (partial === undefined && partialBlock) {
  	    partial = partialBlock;
  	  }

  	  if (partial === undefined) {
  	    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
  	  } else if (partial instanceof Function) {
  	    return partial(context, options);
  	  }
  	}

  	function noop() {
  	  return '';
  	}

  	function initData(context, data) {
  	  if (!data || !('root' in data)) {
  	    data = data ? _base.createFrame(data) : {};
  	    data.root = context;
  	  }
  	  return data;
  	}

  	function executeDecorators(fn, prog, container, depths, data, blockParams) {
  	  if (fn.decorator) {
  	    var props = {};
  	    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
  	    Utils.extend(prog, props);
  	  }
  	  return prog;
  	}

  /***/ },
  /* 20 */
  /***/ function(module, exports) {

  	/* WEBPACK VAR INJECTION */(function(global) {/* global window */
  	'use strict';

  	exports.__esModule = true;

  	exports['default'] = function (Handlebars) {
  	  /* istanbul ignore next */
  	  var root = typeof global !== 'undefined' ? global : window,
  	      $Handlebars = root.Handlebars;
  	  /* istanbul ignore next */
  	  Handlebars.noConflict = function () {
  	    if (root.Handlebars === Handlebars) {
  	      root.Handlebars = $Handlebars;
  	    }
  	    return Handlebars;
  	  };
  	};

  	module.exports = exports['default'];
  	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

  /***/ },
  /* 21 */
  /***/ function(module, exports) {

  	'use strict';

  	exports.__esModule = true;
  	var AST = {
  	  // Public API used to evaluate derived attributes regarding AST nodes
  	  helpers: {
  	    // a mustache is definitely a helper if:
  	    // * it is an eligible helper, and
  	    // * it has at least one parameter or hash segment
  	    helperExpression: function helperExpression(node) {
  	      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
  	    },

  	    scopedId: function scopedId(path) {
  	      return (/^\.|this\b/.test(path.original)
  	      );
  	    },

  	    // an ID is simple if it only has one part, and that part is not
  	    // `..` or `this`.
  	    simpleId: function simpleId(path) {
  	      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
  	    }
  	  }
  	};

  	// Must be exported as an object rather than the root of the module as the jison lexer
  	// must modify the object to operate properly.
  	exports['default'] = AST;
  	module.exports = exports['default'];

  /***/ },
  /* 22 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	var _interopRequireWildcard = __webpack_require__(3)['default'];

  	exports.__esModule = true;
  	exports.parse = parse;

  	var _parser = __webpack_require__(23);

  	var _parser2 = _interopRequireDefault(_parser);

  	var _whitespaceControl = __webpack_require__(24);

  	var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

  	var _helpers = __webpack_require__(26);

  	var Helpers = _interopRequireWildcard(_helpers);

  	var _utils = __webpack_require__(5);

  	exports.parser = _parser2['default'];

  	var yy = {};
  	_utils.extend(yy, Helpers);

  	function parse(input, options) {
  	  // Just return if an already-compiled AST was passed in.
  	  if (input.type === 'Program') {
  	    return input;
  	  }

  	  _parser2['default'].yy = yy;

  	  // Altering the shared object here, but this is ok as parser is a sync operation
  	  yy.locInfo = function (locInfo) {
  	    return new yy.SourceLocation(options && options.srcName, locInfo);
  	  };

  	  var strip = new _whitespaceControl2['default'](options);
  	  return strip.accept(_parser2['default'].parse(input));
  	}

  /***/ },
  /* 23 */
  /***/ function(module, exports) {

  	/* istanbul ignore next */
  	/* Jison generated parser */
  	"use strict";

  	var handlebars = (function () {
  	    var parser = { trace: function trace() {},
  	        yy: {},
  	        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition_plus0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
  	        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
  	        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
  	        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
  	        /**/) {

  	            var $0 = $$.length - 1;
  	            switch (yystate) {
  	                case 1:
  	                    return $$[$0 - 1];
  	                    break;
  	                case 2:
  	                    this.$ = yy.prepareProgram($$[$0]);
  	                    break;
  	                case 3:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 4:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 5:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 6:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 7:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 8:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 9:
  	                    this.$ = {
  	                        type: 'CommentStatement',
  	                        value: yy.stripComment($$[$0]),
  	                        strip: yy.stripFlags($$[$0], $$[$0]),
  	                        loc: yy.locInfo(this._$)
  	                    };

  	                    break;
  	                case 10:
  	                    this.$ = {
  	                        type: 'ContentStatement',
  	                        original: $$[$0],
  	                        value: $$[$0],
  	                        loc: yy.locInfo(this._$)
  	                    };

  	                    break;
  	                case 11:
  	                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
  	                    break;
  	                case 12:
  	                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
  	                    break;
  	                case 13:
  	                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
  	                    break;
  	                case 14:
  	                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
  	                    break;
  	                case 15:
  	                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
  	                    break;
  	                case 16:
  	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
  	                    break;
  	                case 17:
  	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
  	                    break;
  	                case 18:
  	                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
  	                    break;
  	                case 19:
  	                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
  	                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
  	                    program.chained = true;

  	                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

  	                    break;
  	                case 20:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 21:
  	                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
  	                    break;
  	                case 22:
  	                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
  	                    break;
  	                case 23:
  	                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
  	                    break;
  	                case 24:
  	                    this.$ = {
  	                        type: 'PartialStatement',
  	                        name: $$[$0 - 3],
  	                        params: $$[$0 - 2],
  	                        hash: $$[$0 - 1],
  	                        indent: '',
  	                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),
  	                        loc: yy.locInfo(this._$)
  	                    };

  	                    break;
  	                case 25:
  	                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
  	                    break;
  	                case 26:
  	                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
  	                    break;
  	                case 27:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 28:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 29:
  	                    this.$ = {
  	                        type: 'SubExpression',
  	                        path: $$[$0 - 3],
  	                        params: $$[$0 - 2],
  	                        hash: $$[$0 - 1],
  	                        loc: yy.locInfo(this._$)
  	                    };

  	                    break;
  	                case 30:
  	                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
  	                    break;
  	                case 31:
  	                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
  	                    break;
  	                case 32:
  	                    this.$ = yy.id($$[$0 - 1]);
  	                    break;
  	                case 33:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 34:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 35:
  	                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
  	                    break;
  	                case 36:
  	                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
  	                    break;
  	                case 37:
  	                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
  	                    break;
  	                case 38:
  	                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
  	                    break;
  	                case 39:
  	                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
  	                    break;
  	                case 40:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 41:
  	                    this.$ = $$[$0];
  	                    break;
  	                case 42:
  	                    this.$ = yy.preparePath(true, $$[$0], this._$);
  	                    break;
  	                case 43:
  	                    this.$ = yy.preparePath(false, $$[$0], this._$);
  	                    break;
  	                case 44:
  	                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
  	                    break;
  	                case 45:
  	                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
  	                    break;
  	                case 46:
  	                    this.$ = [];
  	                    break;
  	                case 47:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	                case 48:
  	                    this.$ = [$$[$0]];
  	                    break;
  	                case 49:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	                case 50:
  	                    this.$ = [];
  	                    break;
  	                case 51:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	                case 58:
  	                    this.$ = [];
  	                    break;
  	                case 59:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	                case 64:
  	                    this.$ = [];
  	                    break;
  	                case 65:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	                case 70:
  	                    this.$ = [];
  	                    break;
  	                case 71:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	                case 78:
  	                    this.$ = [];
  	                    break;
  	                case 79:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	                case 82:
  	                    this.$ = [];
  	                    break;
  	                case 83:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	                case 86:
  	                    this.$ = [];
  	                    break;
  	                case 87:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	                case 90:
  	                    this.$ = [];
  	                    break;
  	                case 91:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	                case 94:
  	                    this.$ = [];
  	                    break;
  	                case 95:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	                case 98:
  	                    this.$ = [$$[$0]];
  	                    break;
  	                case 99:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	                case 100:
  	                    this.$ = [$$[$0]];
  	                    break;
  	                case 101:
  	                    $$[$0 - 1].push($$[$0]);
  	                    break;
  	            }
  	        },
  	        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
  	        defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },
  	        parseError: function parseError(str, hash) {
  	            throw new Error(str);
  	        },
  	        parse: function parse(input) {
  	            var self = this,
  	                stack = [0],
  	                vstack = [null],
  	                lstack = [],
  	                table = this.table,
  	                yytext = "",
  	                yylineno = 0,
  	                yyleng = 0,
  	                recovering = 0,
  	                TERROR = 2,
  	                EOF = 1;
  	            this.lexer.setInput(input);
  	            this.lexer.yy = this.yy;
  	            this.yy.lexer = this.lexer;
  	            this.yy.parser = this;
  	            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
  	            var yyloc = this.lexer.yylloc;
  	            lstack.push(yyloc);
  	            var ranges = this.lexer.options && this.lexer.options.ranges;
  	            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
  	            function popStack(n) {
  	                stack.length = stack.length - 2 * n;
  	                vstack.length = vstack.length - n;
  	                lstack.length = lstack.length - n;
  	            }
  	            function lex() {
  	                var token;
  	                token = self.lexer.lex() || 1;
  	                if (typeof token !== "number") {
  	                    token = self.symbols_[token] || token;
  	                }
  	                return token;
  	            }
  	            var symbol,
  	                preErrorSymbol,
  	                state,
  	                action,
  	                a,
  	                r,
  	                yyval = {},
  	                p,
  	                len,
  	                newState,
  	                expected;
  	            while (true) {
  	                state = stack[stack.length - 1];
  	                if (this.defaultActions[state]) {
  	                    action = this.defaultActions[state];
  	                } else {
  	                    if (symbol === null || typeof symbol == "undefined") {
  	                        symbol = lex();
  	                    }
  	                    action = table[state] && table[state][symbol];
  	                }
  	                if (typeof action === "undefined" || !action.length || !action[0]) {
  	                    var errStr = "";
  	                    if (!recovering) {
  	                        expected = [];
  	                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
  	                            expected.push("'" + this.terminals_[p] + "'");
  	                        }
  	                        if (this.lexer.showPosition) {
  	                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
  	                        } else {
  	                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
  	                        }
  	                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
  	                    }
  	                }
  	                if (action[0] instanceof Array && action.length > 1) {
  	                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
  	                }
  	                switch (action[0]) {
  	                    case 1:
  	                        stack.push(symbol);
  	                        vstack.push(this.lexer.yytext);
  	                        lstack.push(this.lexer.yylloc);
  	                        stack.push(action[1]);
  	                        symbol = null;
  	                        if (!preErrorSymbol) {
  	                            yyleng = this.lexer.yyleng;
  	                            yytext = this.lexer.yytext;
  	                            yylineno = this.lexer.yylineno;
  	                            yyloc = this.lexer.yylloc;
  	                            if (recovering > 0) recovering--;
  	                        } else {
  	                            symbol = preErrorSymbol;
  	                            preErrorSymbol = null;
  	                        }
  	                        break;
  	                    case 2:
  	                        len = this.productions_[action[1]][1];
  	                        yyval.$ = vstack[vstack.length - len];
  	                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
  	                        if (ranges) {
  	                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
  	                        }
  	                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
  	                        if (typeof r !== "undefined") {
  	                            return r;
  	                        }
  	                        if (len) {
  	                            stack = stack.slice(0, -1 * len * 2);
  	                            vstack = vstack.slice(0, -1 * len);
  	                            lstack = lstack.slice(0, -1 * len);
  	                        }
  	                        stack.push(this.productions_[action[1]][0]);
  	                        vstack.push(yyval.$);
  	                        lstack.push(yyval._$);
  	                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
  	                        stack.push(newState);
  	                        break;
  	                    case 3:
  	                        return true;
  	                }
  	            }
  	            return true;
  	        }
  	    };
  	    /* Jison generated lexer */
  	    var lexer = (function () {
  	        var lexer = { EOF: 1,
  	            parseError: function parseError(str, hash) {
  	                if (this.yy.parser) {
  	                    this.yy.parser.parseError(str, hash);
  	                } else {
  	                    throw new Error(str);
  	                }
  	            },
  	            setInput: function setInput(input) {
  	                this._input = input;
  	                this._more = this._less = this.done = false;
  	                this.yylineno = this.yyleng = 0;
  	                this.yytext = this.matched = this.match = '';
  	                this.conditionStack = ['INITIAL'];
  	                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
  	                if (this.options.ranges) this.yylloc.range = [0, 0];
  	                this.offset = 0;
  	                return this;
  	            },
  	            input: function input() {
  	                var ch = this._input[0];
  	                this.yytext += ch;
  	                this.yyleng++;
  	                this.offset++;
  	                this.match += ch;
  	                this.matched += ch;
  	                var lines = ch.match(/(?:\r\n?|\n).*/g);
  	                if (lines) {
  	                    this.yylineno++;
  	                    this.yylloc.last_line++;
  	                } else {
  	                    this.yylloc.last_column++;
  	                }
  	                if (this.options.ranges) this.yylloc.range[1]++;

  	                this._input = this._input.slice(1);
  	                return ch;
  	            },
  	            unput: function unput(ch) {
  	                var len = ch.length;
  	                var lines = ch.split(/(?:\r\n?|\n)/g);

  	                this._input = ch + this._input;
  	                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
  	                //this.yyleng -= len;
  	                this.offset -= len;
  	                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
  	                this.match = this.match.substr(0, this.match.length - 1);
  	                this.matched = this.matched.substr(0, this.matched.length - 1);

  	                if (lines.length - 1) this.yylineno -= lines.length - 1;
  	                var r = this.yylloc.range;

  	                this.yylloc = { first_line: this.yylloc.first_line,
  	                    last_line: this.yylineno + 1,
  	                    first_column: this.yylloc.first_column,
  	                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
  	                };

  	                if (this.options.ranges) {
  	                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
  	                }
  	                return this;
  	            },
  	            more: function more() {
  	                this._more = true;
  	                return this;
  	            },
  	            less: function less(n) {
  	                this.unput(this.match.slice(n));
  	            },
  	            pastInput: function pastInput() {
  	                var past = this.matched.substr(0, this.matched.length - this.match.length);
  	                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
  	            },
  	            upcomingInput: function upcomingInput() {
  	                var next = this.match;
  	                if (next.length < 20) {
  	                    next += this._input.substr(0, 20 - next.length);
  	                }
  	                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
  	            },
  	            showPosition: function showPosition() {
  	                var pre = this.pastInput();
  	                var c = new Array(pre.length + 1).join("-");
  	                return pre + this.upcomingInput() + "\n" + c + "^";
  	            },
  	            next: function next() {
  	                if (this.done) {
  	                    return this.EOF;
  	                }
  	                if (!this._input) this.done = true;

  	                var token, match, tempMatch, index, col, lines;
  	                if (!this._more) {
  	                    this.yytext = '';
  	                    this.match = '';
  	                }
  	                var rules = this._currentRules();
  	                for (var i = 0; i < rules.length; i++) {
  	                    tempMatch = this._input.match(this.rules[rules[i]]);
  	                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
  	                        match = tempMatch;
  	                        index = i;
  	                        if (!this.options.flex) break;
  	                    }
  	                }
  	                if (match) {
  	                    lines = match[0].match(/(?:\r\n?|\n).*/g);
  	                    if (lines) this.yylineno += lines.length;
  	                    this.yylloc = { first_line: this.yylloc.last_line,
  	                        last_line: this.yylineno + 1,
  	                        first_column: this.yylloc.last_column,
  	                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
  	                    this.yytext += match[0];
  	                    this.match += match[0];
  	                    this.matches = match;
  	                    this.yyleng = this.yytext.length;
  	                    if (this.options.ranges) {
  	                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
  	                    }
  	                    this._more = false;
  	                    this._input = this._input.slice(match[0].length);
  	                    this.matched += match[0];
  	                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
  	                    if (this.done && this._input) this.done = false;
  	                    if (token) return token;else return;
  	                }
  	                if (this._input === "") {
  	                    return this.EOF;
  	                } else {
  	                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
  	                }
  	            },
  	            lex: function lex() {
  	                var r = this.next();
  	                if (typeof r !== 'undefined') {
  	                    return r;
  	                } else {
  	                    return this.lex();
  	                }
  	            },
  	            begin: function begin(condition) {
  	                this.conditionStack.push(condition);
  	            },
  	            popState: function popState() {
  	                return this.conditionStack.pop();
  	            },
  	            _currentRules: function _currentRules() {
  	                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
  	            },
  	            topState: function topState() {
  	                return this.conditionStack[this.conditionStack.length - 2];
  	            },
  	            pushState: function begin(condition) {
  	                this.begin(condition);
  	            } };
  	        lexer.options = {};
  	        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
  	        /**/) {

  	            function strip(start, end) {
  	                return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
  	            }

  	            var YYSTATE = YY_START;
  	            switch ($avoiding_name_collisions) {
  	                case 0:
  	                    if (yy_.yytext.slice(-2) === "\\\\") {
  	                        strip(0, 1);
  	                        this.begin("mu");
  	                    } else if (yy_.yytext.slice(-1) === "\\") {
  	                        strip(0, 1);
  	                        this.begin("emu");
  	                    } else {
  	                        this.begin("mu");
  	                    }
  	                    if (yy_.yytext) return 15;

  	                    break;
  	                case 1:
  	                    return 15;
  	                    break;
  	                case 2:
  	                    this.popState();
  	                    return 15;

  	                    break;
  	                case 3:
  	                    this.begin('raw');return 15;
  	                    break;
  	                case 4:
  	                    this.popState();
  	                    // Should be using `this.topState()` below, but it currently
  	                    // returns the second top instead of the first top. Opened an
  	                    // issue about it at https://github.com/zaach/jison/issues/291
  	                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
  	                        return 15;
  	                    } else {
  	                        yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
  	                        return 'END_RAW_BLOCK';
  	                    }

  	                    break;
  	                case 5:
  	                    return 15;
  	                    break;
  	                case 6:
  	                    this.popState();
  	                    return 14;

  	                    break;
  	                case 7:
  	                    return 65;
  	                    break;
  	                case 8:
  	                    return 68;
  	                    break;
  	                case 9:
  	                    return 19;
  	                    break;
  	                case 10:
  	                    this.popState();
  	                    this.begin('raw');
  	                    return 23;

  	                    break;
  	                case 11:
  	                    return 55;
  	                    break;
  	                case 12:
  	                    return 60;
  	                    break;
  	                case 13:
  	                    return 29;
  	                    break;
  	                case 14:
  	                    return 47;
  	                    break;
  	                case 15:
  	                    this.popState();return 44;
  	                    break;
  	                case 16:
  	                    this.popState();return 44;
  	                    break;
  	                case 17:
  	                    return 34;
  	                    break;
  	                case 18:
  	                    return 39;
  	                    break;
  	                case 19:
  	                    return 51;
  	                    break;
  	                case 20:
  	                    return 48;
  	                    break;
  	                case 21:
  	                    this.unput(yy_.yytext);
  	                    this.popState();
  	                    this.begin('com');

  	                    break;
  	                case 22:
  	                    this.popState();
  	                    return 14;

  	                    break;
  	                case 23:
  	                    return 48;
  	                    break;
  	                case 24:
  	                    return 73;
  	                    break;
  	                case 25:
  	                    return 72;
  	                    break;
  	                case 26:
  	                    return 72;
  	                    break;
  	                case 27:
  	                    return 87;
  	                    break;
  	                case 28:
  	                    // ignore whitespace
  	                    break;
  	                case 29:
  	                    this.popState();return 54;
  	                    break;
  	                case 30:
  	                    this.popState();return 33;
  	                    break;
  	                case 31:
  	                    yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
  	                    break;
  	                case 32:
  	                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
  	                    break;
  	                case 33:
  	                    return 85;
  	                    break;
  	                case 34:
  	                    return 82;
  	                    break;
  	                case 35:
  	                    return 82;
  	                    break;
  	                case 36:
  	                    return 83;
  	                    break;
  	                case 37:
  	                    return 84;
  	                    break;
  	                case 38:
  	                    return 81;
  	                    break;
  	                case 39:
  	                    return 75;
  	                    break;
  	                case 40:
  	                    return 77;
  	                    break;
  	                case 41:
  	                    return 72;
  	                    break;
  	                case 42:
  	                    yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
  	                    break;
  	                case 43:
  	                    return 'INVALID';
  	                    break;
  	                case 44:
  	                    return 5;
  	                    break;
  	            }
  	        };
  	        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
  	        lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
  	        return lexer;
  	    })();
  	    parser.lexer = lexer;
  	    function Parser() {
  	        this.yy = {};
  	    }Parser.prototype = parser;parser.Parser = Parser;
  	    return new Parser();
  	})();exports.__esModule = true;
  	exports['default'] = handlebars;

  /***/ },
  /* 24 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;

  	var _visitor = __webpack_require__(25);

  	var _visitor2 = _interopRequireDefault(_visitor);

  	function WhitespaceControl() {
  	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  	  this.options = options;
  	}
  	WhitespaceControl.prototype = new _visitor2['default']();

  	WhitespaceControl.prototype.Program = function (program) {
  	  var doStandalone = !this.options.ignoreStandalone;

  	  var isRoot = !this.isRootSeen;
  	  this.isRootSeen = true;

  	  var body = program.body;
  	  for (var i = 0, l = body.length; i < l; i++) {
  	    var current = body[i],
  	        strip = this.accept(current);

  	    if (!strip) {
  	      continue;
  	    }

  	    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
  	        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
  	        openStandalone = strip.openStandalone && _isPrevWhitespace,
  	        closeStandalone = strip.closeStandalone && _isNextWhitespace,
  	        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

  	    if (strip.close) {
  	      omitRight(body, i, true);
  	    }
  	    if (strip.open) {
  	      omitLeft(body, i, true);
  	    }

  	    if (doStandalone && inlineStandalone) {
  	      omitRight(body, i);

  	      if (omitLeft(body, i)) {
  	        // If we are on a standalone node, save the indent info for partials
  	        if (current.type === 'PartialStatement') {
  	          // Pull out the whitespace from the final line
  	          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
  	        }
  	      }
  	    }
  	    if (doStandalone && openStandalone) {
  	      omitRight((current.program || current.inverse).body);

  	      // Strip out the previous content node if it's whitespace only
  	      omitLeft(body, i);
  	    }
  	    if (doStandalone && closeStandalone) {
  	      // Always strip the next node
  	      omitRight(body, i);

  	      omitLeft((current.inverse || current.program).body);
  	    }
  	  }

  	  return program;
  	};

  	WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
  	  this.accept(block.program);
  	  this.accept(block.inverse);

  	  // Find the inverse program that is involed with whitespace stripping.
  	  var program = block.program || block.inverse,
  	      inverse = block.program && block.inverse,
  	      firstInverse = inverse,
  	      lastInverse = inverse;

  	  if (inverse && inverse.chained) {
  	    firstInverse = inverse.body[0].program;

  	    // Walk the inverse chain to find the last inverse that is actually in the chain.
  	    while (lastInverse.chained) {
  	      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
  	    }
  	  }

  	  var strip = {
  	    open: block.openStrip.open,
  	    close: block.closeStrip.close,

  	    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
  	    // so our parent can determine if we actually are standalone
  	    openStandalone: isNextWhitespace(program.body),
  	    closeStandalone: isPrevWhitespace((firstInverse || program).body)
  	  };

  	  if (block.openStrip.close) {
  	    omitRight(program.body, null, true);
  	  }

  	  if (inverse) {
  	    var inverseStrip = block.inverseStrip;

  	    if (inverseStrip.open) {
  	      omitLeft(program.body, null, true);
  	    }

  	    if (inverseStrip.close) {
  	      omitRight(firstInverse.body, null, true);
  	    }
  	    if (block.closeStrip.open) {
  	      omitLeft(lastInverse.body, null, true);
  	    }

  	    // Find standalone else statments
  	    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
  	      omitLeft(program.body);
  	      omitRight(firstInverse.body);
  	    }
  	  } else if (block.closeStrip.open) {
  	    omitLeft(program.body, null, true);
  	  }

  	  return strip;
  	};

  	WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
  	  return mustache.strip;
  	};

  	WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
  	  /* istanbul ignore next */
  	  var strip = node.strip || {};
  	  return {
  	    inlineStandalone: true,
  	    open: strip.open,
  	    close: strip.close
  	  };
  	};

  	function isPrevWhitespace(body, i, isRoot) {
  	  if (i === undefined) {
  	    i = body.length;
  	  }

  	  // Nodes that end with newlines are considered whitespace (but are special
  	  // cased for strip operations)
  	  var prev = body[i - 1],
  	      sibling = body[i - 2];
  	  if (!prev) {
  	    return isRoot;
  	  }

  	  if (prev.type === 'ContentStatement') {
  	    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
  	  }
  	}
  	function isNextWhitespace(body, i, isRoot) {
  	  if (i === undefined) {
  	    i = -1;
  	  }

  	  var next = body[i + 1],
  	      sibling = body[i + 2];
  	  if (!next) {
  	    return isRoot;
  	  }

  	  if (next.type === 'ContentStatement') {
  	    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
  	  }
  	}

  	// Marks the node to the right of the position as omitted.
  	// I.e. {{foo}}' ' will mark the ' ' node as omitted.
  	//
  	// If i is undefined, then the first child will be marked as such.
  	//
  	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
  	// content is met.
  	function omitRight(body, i, multiple) {
  	  var current = body[i == null ? 0 : i + 1];
  	  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
  	    return;
  	  }

  	  var original = current.value;
  	  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
  	  current.rightStripped = current.value !== original;
  	}

  	// Marks the node to the left of the position as omitted.
  	// I.e. ' '{{foo}} will mark the ' ' node as omitted.
  	//
  	// If i is undefined then the last child will be marked as such.
  	//
  	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
  	// content is met.
  	function omitLeft(body, i, multiple) {
  	  var current = body[i == null ? body.length - 1 : i - 1];
  	  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
  	    return;
  	  }

  	  // We omit the last node if it's whitespace only and not preceeded by a non-content node.
  	  var original = current.value;
  	  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
  	  current.leftStripped = current.value !== original;
  	  return current.leftStripped;
  	}

  	exports['default'] = WhitespaceControl;
  	module.exports = exports['default'];

  /***/ },
  /* 25 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;

  	var _exception = __webpack_require__(6);

  	var _exception2 = _interopRequireDefault(_exception);

  	function Visitor() {
  	  this.parents = [];
  	}

  	Visitor.prototype = {
  	  constructor: Visitor,
  	  mutating: false,

  	  // Visits a given value. If mutating, will replace the value if necessary.
  	  acceptKey: function acceptKey(node, name) {
  	    var value = this.accept(node[name]);
  	    if (this.mutating) {
  	      // Hacky sanity check: This may have a few false positives for type for the helper
  	      // methods but will generally do the right thing without a lot of overhead.
  	      if (value && !Visitor.prototype[value.type]) {
  	        throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
  	      }
  	      node[name] = value;
  	    }
  	  },

  	  // Performs an accept operation with added sanity check to ensure
  	  // required keys are not removed.
  	  acceptRequired: function acceptRequired(node, name) {
  	    this.acceptKey(node, name);

  	    if (!node[name]) {
  	      throw new _exception2['default'](node.type + ' requires ' + name);
  	    }
  	  },

  	  // Traverses a given array. If mutating, empty respnses will be removed
  	  // for child elements.
  	  acceptArray: function acceptArray(array) {
  	    for (var i = 0, l = array.length; i < l; i++) {
  	      this.acceptKey(array, i);

  	      if (!array[i]) {
  	        array.splice(i, 1);
  	        i--;
  	        l--;
  	      }
  	    }
  	  },

  	  accept: function accept(object) {
  	    if (!object) {
  	      return;
  	    }

  	    /* istanbul ignore next: Sanity code */
  	    if (!this[object.type]) {
  	      throw new _exception2['default']('Unknown type: ' + object.type, object);
  	    }

  	    if (this.current) {
  	      this.parents.unshift(this.current);
  	    }
  	    this.current = object;

  	    var ret = this[object.type](object);

  	    this.current = this.parents.shift();

  	    if (!this.mutating || ret) {
  	      return ret;
  	    } else if (ret !== false) {
  	      return object;
  	    }
  	  },

  	  Program: function Program(program) {
  	    this.acceptArray(program.body);
  	  },

  	  MustacheStatement: visitSubExpression,
  	  Decorator: visitSubExpression,

  	  BlockStatement: visitBlock,
  	  DecoratorBlock: visitBlock,

  	  PartialStatement: visitPartial,
  	  PartialBlockStatement: function PartialBlockStatement(partial) {
  	    visitPartial.call(this, partial);

  	    this.acceptKey(partial, 'program');
  	  },

  	  ContentStatement: function ContentStatement() /* content */{},
  	  CommentStatement: function CommentStatement() /* comment */{},

  	  SubExpression: visitSubExpression,

  	  PathExpression: function PathExpression() /* path */{},

  	  StringLiteral: function StringLiteral() /* string */{},
  	  NumberLiteral: function NumberLiteral() /* number */{},
  	  BooleanLiteral: function BooleanLiteral() /* bool */{},
  	  UndefinedLiteral: function UndefinedLiteral() /* literal */{},
  	  NullLiteral: function NullLiteral() /* literal */{},

  	  Hash: function Hash(hash) {
  	    this.acceptArray(hash.pairs);
  	  },
  	  HashPair: function HashPair(pair) {
  	    this.acceptRequired(pair, 'value');
  	  }
  	};

  	function visitSubExpression(mustache) {
  	  this.acceptRequired(mustache, 'path');
  	  this.acceptArray(mustache.params);
  	  this.acceptKey(mustache, 'hash');
  	}
  	function visitBlock(block) {
  	  visitSubExpression.call(this, block);

  	  this.acceptKey(block, 'program');
  	  this.acceptKey(block, 'inverse');
  	}
  	function visitPartial(partial) {
  	  this.acceptRequired(partial, 'name');
  	  this.acceptArray(partial.params);
  	  this.acceptKey(partial, 'hash');
  	}

  	exports['default'] = Visitor;
  	module.exports = exports['default'];

  /***/ },
  /* 26 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;
  	exports.SourceLocation = SourceLocation;
  	exports.id = id;
  	exports.stripFlags = stripFlags;
  	exports.stripComment = stripComment;
  	exports.preparePath = preparePath;
  	exports.prepareMustache = prepareMustache;
  	exports.prepareRawBlock = prepareRawBlock;
  	exports.prepareBlock = prepareBlock;
  	exports.prepareProgram = prepareProgram;
  	exports.preparePartialBlock = preparePartialBlock;

  	var _exception = __webpack_require__(6);

  	var _exception2 = _interopRequireDefault(_exception);

  	function validateClose(open, close) {
  	  close = close.path ? close.path.original : close;

  	  if (open.path.original !== close) {
  	    var errorNode = { loc: open.path.loc };

  	    throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
  	  }
  	}

  	function SourceLocation(source, locInfo) {
  	  this.source = source;
  	  this.start = {
  	    line: locInfo.first_line,
  	    column: locInfo.first_column
  	  };
  	  this.end = {
  	    line: locInfo.last_line,
  	    column: locInfo.last_column
  	  };
  	}

  	function id(token) {
  	  if (/^\[.*\]$/.test(token)) {
  	    return token.substr(1, token.length - 2);
  	  } else {
  	    return token;
  	  }
  	}

  	function stripFlags(open, close) {
  	  return {
  	    open: open.charAt(2) === '~',
  	    close: close.charAt(close.length - 3) === '~'
  	  };
  	}

  	function stripComment(comment) {
  	  return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
  	}

  	function preparePath(data, parts, loc) {
  	  loc = this.locInfo(loc);

  	  var original = data ? '@' : '',
  	      dig = [],
  	      depth = 0,
  	      depthString = '';

  	  for (var i = 0, l = parts.length; i < l; i++) {
  	    var part = parts[i].part,

  	    // If we have [] syntax then we do not treat path references as operators,
  	    // i.e. foo.[this] resolves to approximately context.foo['this']
  	    isLiteral = parts[i].original !== part;
  	    original += (parts[i].separator || '') + part;

  	    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
  	      if (dig.length > 0) {
  	        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
  	      } else if (part === '..') {
  	        depth++;
  	        depthString += '../';
  	      }
  	    } else {
  	      dig.push(part);
  	    }
  	  }

  	  return {
  	    type: 'PathExpression',
  	    data: data,
  	    depth: depth,
  	    parts: dig,
  	    original: original,
  	    loc: loc
  	  };
  	}

  	function prepareMustache(path, params, hash, open, strip, locInfo) {
  	  // Must use charAt to support IE pre-10
  	  var escapeFlag = open.charAt(3) || open.charAt(2),
  	      escaped = escapeFlag !== '{' && escapeFlag !== '&';

  	  var decorator = /\*/.test(open);
  	  return {
  	    type: decorator ? 'Decorator' : 'MustacheStatement',
  	    path: path,
  	    params: params,
  	    hash: hash,
  	    escaped: escaped,
  	    strip: strip,
  	    loc: this.locInfo(locInfo)
  	  };
  	}

  	function prepareRawBlock(openRawBlock, contents, close, locInfo) {
  	  validateClose(openRawBlock, close);

  	  locInfo = this.locInfo(locInfo);
  	  var program = {
  	    type: 'Program',
  	    body: contents,
  	    strip: {},
  	    loc: locInfo
  	  };

  	  return {
  	    type: 'BlockStatement',
  	    path: openRawBlock.path,
  	    params: openRawBlock.params,
  	    hash: openRawBlock.hash,
  	    program: program,
  	    openStrip: {},
  	    inverseStrip: {},
  	    closeStrip: {},
  	    loc: locInfo
  	  };
  	}

  	function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
  	  if (close && close.path) {
  	    validateClose(openBlock, close);
  	  }

  	  var decorator = /\*/.test(openBlock.open);

  	  program.blockParams = openBlock.blockParams;

  	  var inverse = undefined,
  	      inverseStrip = undefined;

  	  if (inverseAndProgram) {
  	    if (decorator) {
  	      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
  	    }

  	    if (inverseAndProgram.chain) {
  	      inverseAndProgram.program.body[0].closeStrip = close.strip;
  	    }

  	    inverseStrip = inverseAndProgram.strip;
  	    inverse = inverseAndProgram.program;
  	  }

  	  if (inverted) {
  	    inverted = inverse;
  	    inverse = program;
  	    program = inverted;
  	  }

  	  return {
  	    type: decorator ? 'DecoratorBlock' : 'BlockStatement',
  	    path: openBlock.path,
  	    params: openBlock.params,
  	    hash: openBlock.hash,
  	    program: program,
  	    inverse: inverse,
  	    openStrip: openBlock.strip,
  	    inverseStrip: inverseStrip,
  	    closeStrip: close && close.strip,
  	    loc: this.locInfo(locInfo)
  	  };
  	}

  	function prepareProgram(statements, loc) {
  	  if (!loc && statements.length) {
  	    var firstLoc = statements[0].loc,
  	        lastLoc = statements[statements.length - 1].loc;

  	    /* istanbul ignore else */
  	    if (firstLoc && lastLoc) {
  	      loc = {
  	        source: firstLoc.source,
  	        start: {
  	          line: firstLoc.start.line,
  	          column: firstLoc.start.column
  	        },
  	        end: {
  	          line: lastLoc.end.line,
  	          column: lastLoc.end.column
  	        }
  	      };
  	    }
  	  }

  	  return {
  	    type: 'Program',
  	    body: statements,
  	    strip: {},
  	    loc: loc
  	  };
  	}

  	function preparePartialBlock(open, program, close, locInfo) {
  	  validateClose(open, close);

  	  return {
  	    type: 'PartialBlockStatement',
  	    name: open.path,
  	    params: open.params,
  	    hash: open.hash,
  	    program: program,
  	    openStrip: open.strip,
  	    closeStrip: close && close.strip,
  	    loc: this.locInfo(locInfo)
  	  };
  	}

  /***/ },
  /* 27 */
  /***/ function(module, exports, __webpack_require__) {

  	/* eslint-disable new-cap */

  	'use strict';

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;
  	exports.Compiler = Compiler;
  	exports.precompile = precompile;
  	exports.compile = compile;

  	var _exception = __webpack_require__(6);

  	var _exception2 = _interopRequireDefault(_exception);

  	var _utils = __webpack_require__(5);

  	var _ast = __webpack_require__(21);

  	var _ast2 = _interopRequireDefault(_ast);

  	var slice = [].slice;

  	function Compiler() {}

  	// the foundHelper register will disambiguate helper lookup from finding a
  	// function in a context. This is necessary for mustache compatibility, which
  	// requires that context functions in blocks are evaluated by blockHelperMissing,
  	// and then proceed as if the resulting value was provided to blockHelperMissing.

  	Compiler.prototype = {
  	  compiler: Compiler,

  	  equals: function equals(other) {
  	    var len = this.opcodes.length;
  	    if (other.opcodes.length !== len) {
  	      return false;
  	    }

  	    for (var i = 0; i < len; i++) {
  	      var opcode = this.opcodes[i],
  	          otherOpcode = other.opcodes[i];
  	      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
  	        return false;
  	      }
  	    }

  	    // We know that length is the same between the two arrays because they are directly tied
  	    // to the opcode behavior above.
  	    len = this.children.length;
  	    for (var i = 0; i < len; i++) {
  	      if (!this.children[i].equals(other.children[i])) {
  	        return false;
  	      }
  	    }

  	    return true;
  	  },

  	  guid: 0,

  	  compile: function compile(program, options) {
  	    this.sourceNode = [];
  	    this.opcodes = [];
  	    this.children = [];
  	    this.options = options;
  	    this.stringParams = options.stringParams;
  	    this.trackIds = options.trackIds;

  	    options.blockParams = options.blockParams || [];

  	    // These changes will propagate to the other compiler components
  	    var knownHelpers = options.knownHelpers;
  	    options.knownHelpers = {
  	      'helperMissing': true,
  	      'blockHelperMissing': true,
  	      'each': true,
  	      'if': true,
  	      'unless': true,
  	      'with': true,
  	      'log': true,
  	      'lookup': true
  	    };
  	    if (knownHelpers) {
  	      for (var _name in knownHelpers) {
  	        /* istanbul ignore else */
  	        if (_name in knownHelpers) {
  	          options.knownHelpers[_name] = knownHelpers[_name];
  	        }
  	      }
  	    }

  	    return this.accept(program);
  	  },

  	  compileProgram: function compileProgram(program) {
  	    var childCompiler = new this.compiler(),
  	        // eslint-disable-line new-cap
  	    result = childCompiler.compile(program, this.options),
  	        guid = this.guid++;

  	    this.usePartial = this.usePartial || result.usePartial;

  	    this.children[guid] = result;
  	    this.useDepths = this.useDepths || result.useDepths;

  	    return guid;
  	  },

  	  accept: function accept(node) {
  	    /* istanbul ignore next: Sanity code */
  	    if (!this[node.type]) {
  	      throw new _exception2['default']('Unknown type: ' + node.type, node);
  	    }

  	    this.sourceNode.unshift(node);
  	    var ret = this[node.type](node);
  	    this.sourceNode.shift();
  	    return ret;
  	  },

  	  Program: function Program(program) {
  	    this.options.blockParams.unshift(program.blockParams);

  	    var body = program.body,
  	        bodyLength = body.length;
  	    for (var i = 0; i < bodyLength; i++) {
  	      this.accept(body[i]);
  	    }

  	    this.options.blockParams.shift();

  	    this.isSimple = bodyLength === 1;
  	    this.blockParams = program.blockParams ? program.blockParams.length : 0;

  	    return this;
  	  },

  	  BlockStatement: function BlockStatement(block) {
  	    transformLiteralToPath(block);

  	    var program = block.program,
  	        inverse = block.inverse;

  	    program = program && this.compileProgram(program);
  	    inverse = inverse && this.compileProgram(inverse);

  	    var type = this.classifySexpr(block);

  	    if (type === 'helper') {
  	      this.helperSexpr(block, program, inverse);
  	    } else if (type === 'simple') {
  	      this.simpleSexpr(block);

  	      // now that the simple mustache is resolved, we need to
  	      // evaluate it by executing `blockHelperMissing`
  	      this.opcode('pushProgram', program);
  	      this.opcode('pushProgram', inverse);
  	      this.opcode('emptyHash');
  	      this.opcode('blockValue', block.path.original);
  	    } else {
  	      this.ambiguousSexpr(block, program, inverse);

  	      // now that the simple mustache is resolved, we need to
  	      // evaluate it by executing `blockHelperMissing`
  	      this.opcode('pushProgram', program);
  	      this.opcode('pushProgram', inverse);
  	      this.opcode('emptyHash');
  	      this.opcode('ambiguousBlockValue');
  	    }

  	    this.opcode('append');
  	  },

  	  DecoratorBlock: function DecoratorBlock(decorator) {
  	    var program = decorator.program && this.compileProgram(decorator.program);
  	    var params = this.setupFullMustacheParams(decorator, program, undefined),
  	        path = decorator.path;

  	    this.useDecorators = true;
  	    this.opcode('registerDecorator', params.length, path.original);
  	  },

  	  PartialStatement: function PartialStatement(partial) {
  	    this.usePartial = true;

  	    var program = partial.program;
  	    if (program) {
  	      program = this.compileProgram(partial.program);
  	    }

  	    var params = partial.params;
  	    if (params.length > 1) {
  	      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
  	    } else if (!params.length) {
  	      if (this.options.explicitPartialContext) {
  	        this.opcode('pushLiteral', 'undefined');
  	      } else {
  	        params.push({ type: 'PathExpression', parts: [], depth: 0 });
  	      }
  	    }

  	    var partialName = partial.name.original,
  	        isDynamic = partial.name.type === 'SubExpression';
  	    if (isDynamic) {
  	      this.accept(partial.name);
  	    }

  	    this.setupFullMustacheParams(partial, program, undefined, true);

  	    var indent = partial.indent || '';
  	    if (this.options.preventIndent && indent) {
  	      this.opcode('appendContent', indent);
  	      indent = '';
  	    }

  	    this.opcode('invokePartial', isDynamic, partialName, indent);
  	    this.opcode('append');
  	  },
  	  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
  	    this.PartialStatement(partialBlock);
  	  },

  	  MustacheStatement: function MustacheStatement(mustache) {
  	    this.SubExpression(mustache);

  	    if (mustache.escaped && !this.options.noEscape) {
  	      this.opcode('appendEscaped');
  	    } else {
  	      this.opcode('append');
  	    }
  	  },
  	  Decorator: function Decorator(decorator) {
  	    this.DecoratorBlock(decorator);
  	  },

  	  ContentStatement: function ContentStatement(content) {
  	    if (content.value) {
  	      this.opcode('appendContent', content.value);
  	    }
  	  },

  	  CommentStatement: function CommentStatement() {},

  	  SubExpression: function SubExpression(sexpr) {
  	    transformLiteralToPath(sexpr);
  	    var type = this.classifySexpr(sexpr);

  	    if (type === 'simple') {
  	      this.simpleSexpr(sexpr);
  	    } else if (type === 'helper') {
  	      this.helperSexpr(sexpr);
  	    } else {
  	      this.ambiguousSexpr(sexpr);
  	    }
  	  },
  	  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
  	    var path = sexpr.path,
  	        name = path.parts[0],
  	        isBlock = program != null || inverse != null;

  	    this.opcode('getContext', path.depth);

  	    this.opcode('pushProgram', program);
  	    this.opcode('pushProgram', inverse);

  	    path.strict = true;
  	    this.accept(path);

  	    this.opcode('invokeAmbiguous', name, isBlock);
  	  },

  	  simpleSexpr: function simpleSexpr(sexpr) {
  	    var path = sexpr.path;
  	    path.strict = true;
  	    this.accept(path);
  	    this.opcode('resolvePossibleLambda');
  	  },

  	  helperSexpr: function helperSexpr(sexpr, program, inverse) {
  	    var params = this.setupFullMustacheParams(sexpr, program, inverse),
  	        path = sexpr.path,
  	        name = path.parts[0];

  	    if (this.options.knownHelpers[name]) {
  	      this.opcode('invokeKnownHelper', params.length, name);
  	    } else if (this.options.knownHelpersOnly) {
  	      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
  	    } else {
  	      path.strict = true;
  	      path.falsy = true;

  	      this.accept(path);
  	      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
  	    }
  	  },

  	  PathExpression: function PathExpression(path) {
  	    this.addDepth(path.depth);
  	    this.opcode('getContext', path.depth);

  	    var name = path.parts[0],
  	        scoped = _ast2['default'].helpers.scopedId(path),
  	        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

  	    if (blockParamId) {
  	      this.opcode('lookupBlockParam', blockParamId, path.parts);
  	    } else if (!name) {
  	      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
  	      this.opcode('pushContext');
  	    } else if (path.data) {
  	      this.options.data = true;
  	      this.opcode('lookupData', path.depth, path.parts, path.strict);
  	    } else {
  	      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
  	    }
  	  },

  	  StringLiteral: function StringLiteral(string) {
  	    this.opcode('pushString', string.value);
  	  },

  	  NumberLiteral: function NumberLiteral(number) {
  	    this.opcode('pushLiteral', number.value);
  	  },

  	  BooleanLiteral: function BooleanLiteral(bool) {
  	    this.opcode('pushLiteral', bool.value);
  	  },

  	  UndefinedLiteral: function UndefinedLiteral() {
  	    this.opcode('pushLiteral', 'undefined');
  	  },

  	  NullLiteral: function NullLiteral() {
  	    this.opcode('pushLiteral', 'null');
  	  },

  	  Hash: function Hash(hash) {
  	    var pairs = hash.pairs,
  	        i = 0,
  	        l = pairs.length;

  	    this.opcode('pushHash');

  	    for (; i < l; i++) {
  	      this.pushParam(pairs[i].value);
  	    }
  	    while (i--) {
  	      this.opcode('assignToHash', pairs[i].key);
  	    }
  	    this.opcode('popHash');
  	  },

  	  // HELPERS
  	  opcode: function opcode(name) {
  	    this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
  	  },

  	  addDepth: function addDepth(depth) {
  	    if (!depth) {
  	      return;
  	    }

  	    this.useDepths = true;
  	  },

  	  classifySexpr: function classifySexpr(sexpr) {
  	    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

  	    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

  	    // a mustache is an eligible helper if:
  	    // * its id is simple (a single part, not `this` or `..`)
  	    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

  	    // if a mustache is an eligible helper but not a definite
  	    // helper, it is ambiguous, and will be resolved in a later
  	    // pass or at runtime.
  	    var isEligible = !isBlockParam && (isHelper || isSimple);

  	    // if ambiguous, we can possibly resolve the ambiguity now
  	    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
  	    if (isEligible && !isHelper) {
  	      var _name2 = sexpr.path.parts[0],
  	          options = this.options;

  	      if (options.knownHelpers[_name2]) {
  	        isHelper = true;
  	      } else if (options.knownHelpersOnly) {
  	        isEligible = false;
  	      }
  	    }

  	    if (isHelper) {
  	      return 'helper';
  	    } else if (isEligible) {
  	      return 'ambiguous';
  	    } else {
  	      return 'simple';
  	    }
  	  },

  	  pushParams: function pushParams(params) {
  	    for (var i = 0, l = params.length; i < l; i++) {
  	      this.pushParam(params[i]);
  	    }
  	  },

  	  pushParam: function pushParam(val) {
  	    var value = val.value != null ? val.value : val.original || '';

  	    if (this.stringParams) {
  	      if (value.replace) {
  	        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
  	      }

  	      if (val.depth) {
  	        this.addDepth(val.depth);
  	      }
  	      this.opcode('getContext', val.depth || 0);
  	      this.opcode('pushStringParam', value, val.type);

  	      if (val.type === 'SubExpression') {
  	        // SubExpressions get evaluated and passed in
  	        // in string params mode.
  	        this.accept(val);
  	      }
  	    } else {
  	      if (this.trackIds) {
  	        var blockParamIndex = undefined;
  	        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
  	          blockParamIndex = this.blockParamIndex(val.parts[0]);
  	        }
  	        if (blockParamIndex) {
  	          var blockParamChild = val.parts.slice(1).join('.');
  	          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
  	        } else {
  	          value = val.original || value;
  	          if (value.replace) {
  	            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
  	          }

  	          this.opcode('pushId', val.type, value);
  	        }
  	      }
  	      this.accept(val);
  	    }
  	  },

  	  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
  	    var params = sexpr.params;
  	    this.pushParams(params);

  	    this.opcode('pushProgram', program);
  	    this.opcode('pushProgram', inverse);

  	    if (sexpr.hash) {
  	      this.accept(sexpr.hash);
  	    } else {
  	      this.opcode('emptyHash', omitEmpty);
  	    }

  	    return params;
  	  },

  	  blockParamIndex: function blockParamIndex(name) {
  	    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
  	      var blockParams = this.options.blockParams[depth],
  	          param = blockParams && _utils.indexOf(blockParams, name);
  	      if (blockParams && param >= 0) {
  	        return [depth, param];
  	      }
  	    }
  	  }
  	};

  	function precompile(input, options, env) {
  	  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
  	    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
  	  }

  	  options = options || {};
  	  if (!('data' in options)) {
  	    options.data = true;
  	  }
  	  if (options.compat) {
  	    options.useDepths = true;
  	  }

  	  var ast = env.parse(input, options),
  	      environment = new env.Compiler().compile(ast, options);
  	  return new env.JavaScriptCompiler().compile(environment, options);
  	}

  	function compile(input, options, env) {
  	  if (options === undefined) options = {};

  	  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
  	    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
  	  }

  	  if (!('data' in options)) {
  	    options.data = true;
  	  }
  	  if (options.compat) {
  	    options.useDepths = true;
  	  }

  	  var compiled = undefined;

  	  function compileInput() {
  	    var ast = env.parse(input, options),
  	        environment = new env.Compiler().compile(ast, options),
  	        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
  	    return env.template(templateSpec);
  	  }

  	  // Template is only compiled on first use and cached after that point.
  	  function ret(context, execOptions) {
  	    if (!compiled) {
  	      compiled = compileInput();
  	    }
  	    return compiled.call(this, context, execOptions);
  	  }
  	  ret._setup = function (setupOptions) {
  	    if (!compiled) {
  	      compiled = compileInput();
  	    }
  	    return compiled._setup(setupOptions);
  	  };
  	  ret._child = function (i, data, blockParams, depths) {
  	    if (!compiled) {
  	      compiled = compileInput();
  	    }
  	    return compiled._child(i, data, blockParams, depths);
  	  };
  	  return ret;
  	}

  	function argEquals(a, b) {
  	  if (a === b) {
  	    return true;
  	  }

  	  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
  	    for (var i = 0; i < a.length; i++) {
  	      if (!argEquals(a[i], b[i])) {
  	        return false;
  	      }
  	    }
  	    return true;
  	  }
  	}

  	function transformLiteralToPath(sexpr) {
  	  if (!sexpr.path.parts) {
  	    var literal = sexpr.path;
  	    // Casting to string here to make false and 0 literal values play nicely with the rest
  	    // of the system.
  	    sexpr.path = {
  	      type: 'PathExpression',
  	      data: false,
  	      depth: 0,
  	      parts: [literal.original + ''],
  	      original: literal.original + '',
  	      loc: literal.loc
  	    };
  	  }
  	}

  /***/ },
  /* 28 */
  /***/ function(module, exports, __webpack_require__) {

  	'use strict';

  	var _interopRequireDefault = __webpack_require__(1)['default'];

  	exports.__esModule = true;

  	var _base = __webpack_require__(4);

  	var _exception = __webpack_require__(6);

  	var _exception2 = _interopRequireDefault(_exception);

  	var _utils = __webpack_require__(5);

  	var _codeGen = __webpack_require__(29);

  	var _codeGen2 = _interopRequireDefault(_codeGen);

  	function Literal(value) {
  	  this.value = value;
  	}

  	function JavaScriptCompiler() {}

  	JavaScriptCompiler.prototype = {
  	  // PUBLIC API: You can override these methods in a subclass to provide
  	  // alternative compiled forms for name lookup and buffering semantics
  	  nameLookup: function nameLookup(parent, name /* , type*/) {
  	    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
  	      return [parent, '.', name];
  	    } else {
  	      return [parent, '[', JSON.stringify(name), ']'];
  	    }
  	  },
  	  depthedLookup: function depthedLookup(name) {
  	    return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
  	  },

  	  compilerInfo: function compilerInfo() {
  	    var revision = _base.COMPILER_REVISION,
  	        versions = _base.REVISION_CHANGES[revision];
  	    return [revision, versions];
  	  },

  	  appendToBuffer: function appendToBuffer(source, location, explicit) {
  	    // Force a source as this simplifies the merge logic.
  	    if (!_utils.isArray(source)) {
  	      source = [source];
  	    }
  	    source = this.source.wrap(source, location);

  	    if (this.environment.isSimple) {
  	      return ['return ', source, ';'];
  	    } else if (explicit) {
  	      // This is a case where the buffer operation occurs as a child of another
  	      // construct, generally braces. We have to explicitly output these buffer
  	      // operations to ensure that the emitted code goes in the correct location.
  	      return ['buffer += ', source, ';'];
  	    } else {
  	      source.appendToBuffer = true;
  	      return source;
  	    }
  	  },

  	  initializeBuffer: function initializeBuffer() {
  	    return this.quotedString('');
  	  },
  	  // END PUBLIC API

  	  compile: function compile(environment, options, context, asObject) {
  	    this.environment = environment;
  	    this.options = options;
  	    this.stringParams = this.options.stringParams;
  	    this.trackIds = this.options.trackIds;
  	    this.precompile = !asObject;

  	    this.name = this.environment.name;
  	    this.isChild = !!context;
  	    this.context = context || {
  	      decorators: [],
  	      programs: [],
  	      environments: []
  	    };

  	    this.preamble();

  	    this.stackSlot = 0;
  	    this.stackVars = [];
  	    this.aliases = {};
  	    this.registers = { list: [] };
  	    this.hashes = [];
  	    this.compileStack = [];
  	    this.inlineStack = [];
  	    this.blockParams = [];

  	    this.compileChildren(environment, options);

  	    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
  	    this.useBlockParams = this.useBlockParams || environment.useBlockParams;

  	    var opcodes = environment.opcodes,
  	        opcode = undefined,
  	        firstLoc = undefined,
  	        i = undefined,
  	        l = undefined;

  	    for (i = 0, l = opcodes.length; i < l; i++) {
  	      opcode = opcodes[i];

  	      this.source.currentLocation = opcode.loc;
  	      firstLoc = firstLoc || opcode.loc;
  	      this[opcode.opcode].apply(this, opcode.args);
  	    }

  	    // Flush any trailing content that might be pending.
  	    this.source.currentLocation = firstLoc;
  	    this.pushSource('');

  	    /* istanbul ignore next */
  	    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
  	      throw new _exception2['default']('Compile completed with content left on stack');
  	    }

  	    if (!this.decorators.isEmpty()) {
  	      this.useDecorators = true;

  	      this.decorators.prepend('var decorators = container.decorators;\n');
  	      this.decorators.push('return fn;');

  	      if (asObject) {
  	        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
  	      } else {
  	        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
  	        this.decorators.push('}\n');
  	        this.decorators = this.decorators.merge();
  	      }
  	    } else {
  	      this.decorators = undefined;
  	    }

  	    var fn = this.createFunctionContext(asObject);
  	    if (!this.isChild) {
  	      var ret = {
  	        compiler: this.compilerInfo(),
  	        main: fn
  	      };

  	      if (this.decorators) {
  	        ret.main_d = this.decorators; // eslint-disable-line camelcase
  	        ret.useDecorators = true;
  	      }

  	      var _context = this.context;
  	      var programs = _context.programs;
  	      var decorators = _context.decorators;

  	      for (i = 0, l = programs.length; i < l; i++) {
  	        if (programs[i]) {
  	          ret[i] = programs[i];
  	          if (decorators[i]) {
  	            ret[i + '_d'] = decorators[i];
  	            ret.useDecorators = true;
  	          }
  	        }
  	      }

  	      if (this.environment.usePartial) {
  	        ret.usePartial = true;
  	      }
  	      if (this.options.data) {
  	        ret.useData = true;
  	      }
  	      if (this.useDepths) {
  	        ret.useDepths = true;
  	      }
  	      if (this.useBlockParams) {
  	        ret.useBlockParams = true;
  	      }
  	      if (this.options.compat) {
  	        ret.compat = true;
  	      }

  	      if (!asObject) {
  	        ret.compiler = JSON.stringify(ret.compiler);

  	        this.source.currentLocation = { start: { line: 1, column: 0 } };
  	        ret = this.objectLiteral(ret);

  	        if (options.srcName) {
  	          ret = ret.toStringWithSourceMap({ file: options.destName });
  	          ret.map = ret.map && ret.map.toString();
  	        } else {
  	          ret = ret.toString();
  	        }
  	      } else {
  	        ret.compilerOptions = this.options;
  	      }

  	      return ret;
  	    } else {
  	      return fn;
  	    }
  	  },

  	  preamble: function preamble() {
  	    // track the last context pushed into place to allow skipping the
  	    // getContext opcode when it would be a noop
  	    this.lastContext = 0;
  	    this.source = new _codeGen2['default'](this.options.srcName);
  	    this.decorators = new _codeGen2['default'](this.options.srcName);
  	  },

  	  createFunctionContext: function createFunctionContext(asObject) {
  	    var varDeclarations = '';

  	    var locals = this.stackVars.concat(this.registers.list);
  	    if (locals.length > 0) {
  	      varDeclarations += ', ' + locals.join(', ');
  	    }

  	    // Generate minimizer alias mappings
  	    //
  	    // When using true SourceNodes, this will update all references to the given alias
  	    // as the source nodes are reused in situ. For the non-source node compilation mode,
  	    // aliases will not be used, but this case is already being run on the client and
  	    // we aren't concern about minimizing the template size.
  	    var aliasCount = 0;
  	    for (var alias in this.aliases) {
  	      // eslint-disable-line guard-for-in
  	      var node = this.aliases[alias];

  	      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
  	        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
  	        node.children[0] = 'alias' + aliasCount;
  	      }
  	    }

  	    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

  	    if (this.useBlockParams || this.useDepths) {
  	      params.push('blockParams');
  	    }
  	    if (this.useDepths) {
  	      params.push('depths');
  	    }

  	    // Perform a second pass over the output to merge content when possible
  	    var source = this.mergeSource(varDeclarations);

  	    if (asObject) {
  	      params.push(source);

  	      return Function.apply(this, params);
  	    } else {
  	      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
  	    }
  	  },
  	  mergeSource: function mergeSource(varDeclarations) {
  	    var isSimple = this.environment.isSimple,
  	        appendOnly = !this.forceBuffer,
  	        appendFirst = undefined,
  	        sourceSeen = undefined,
  	        bufferStart = undefined,
  	        bufferEnd = undefined;
  	    this.source.each(function (line) {
  	      if (line.appendToBuffer) {
  	        if (bufferStart) {
  	          line.prepend('  + ');
  	        } else {
  	          bufferStart = line;
  	        }
  	        bufferEnd = line;
  	      } else {
  	        if (bufferStart) {
  	          if (!sourceSeen) {
  	            appendFirst = true;
  	          } else {
  	            bufferStart.prepend('buffer += ');
  	          }
  	          bufferEnd.add(';');
  	          bufferStart = bufferEnd = undefined;
  	        }

  	        sourceSeen = true;
  	        if (!isSimple) {
  	          appendOnly = false;
  	        }
  	      }
  	    });

  	    if (appendOnly) {
  	      if (bufferStart) {
  	        bufferStart.prepend('return ');
  	        bufferEnd.add(';');
  	      } else if (!sourceSeen) {
  	        this.source.push('return "";');
  	      }
  	    } else {
  	      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

  	      if (bufferStart) {
  	        bufferStart.prepend('return buffer + ');
  	        bufferEnd.add(';');
  	      } else {
  	        this.source.push('return buffer;');
  	      }
  	    }

  	    if (varDeclarations) {
  	      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
  	    }

  	    return this.source.merge();
  	  },

  	  // [blockValue]
  	  //
  	  // On stack, before: hash, inverse, program, value
  	  // On stack, after: return value of blockHelperMissing
  	  //
  	  // The purpose of this opcode is to take a block of the form
  	  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
  	  // replace it on the stack with the result of properly
  	  // invoking blockHelperMissing.
  	  blockValue: function blockValue(name) {
  	    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
  	        params = [this.contextName(0)];
  	    this.setupHelperArgs(name, 0, params);

  	    var blockName = this.popStack();
  	    params.splice(1, 0, blockName);

  	    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
  	  },

  	  // [ambiguousBlockValue]
  	  //
  	  // On stack, before: hash, inverse, program, value
  	  // Compiler value, before: lastHelper=value of last found helper, if any
  	  // On stack, after, if no lastHelper: same as [blockValue]
  	  // On stack, after, if lastHelper: value
  	  ambiguousBlockValue: function ambiguousBlockValue() {
  	    // We're being a bit cheeky and reusing the options value from the prior exec
  	    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
  	        params = [this.contextName(0)];
  	    this.setupHelperArgs('', 0, params, true);

  	    this.flushInline();

  	    var current = this.topStack();
  	    params.splice(1, 0, current);

  	    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
  	  },

  	  // [appendContent]
  	  //
  	  // On stack, before: ...
  	  // On stack, after: ...
  	  //
  	  // Appends the string value of `content` to the current buffer
  	  appendContent: function appendContent(content) {
  	    if (this.pendingContent) {
  	      content = this.pendingContent + content;
  	    } else {
  	      this.pendingLocation = this.source.currentLocation;
  	    }

  	    this.pendingContent = content;
  	  },

  	  // [append]
  	  //
  	  // On stack, before: value, ...
  	  // On stack, after: ...
  	  //
  	  // Coerces `value` to a String and appends it to the current buffer.
  	  //
  	  // If `value` is truthy, or 0, it is coerced into a string and appended
  	  // Otherwise, the empty string is appended
  	  append: function append() {
  	    if (this.isInline()) {
  	      this.replaceStack(function (current) {
  	        return [' != null ? ', current, ' : ""'];
  	      });

  	      this.pushSource(this.appendToBuffer(this.popStack()));
  	    } else {
  	      var local = this.popStack();
  	      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
  	      if (this.environment.isSimple) {
  	        this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
  	      }
  	    }
  	  },

  	  // [appendEscaped]
  	  //
  	  // On stack, before: value, ...
  	  // On stack, after: ...
  	  //
  	  // Escape `value` and append it to the buffer
  	  appendEscaped: function appendEscaped() {
  	    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
  	  },

  	  // [getContext]
  	  //
  	  // On stack, before: ...
  	  // On stack, after: ...
  	  // Compiler value, after: lastContext=depth
  	  //
  	  // Set the value of the `lastContext` compiler value to the depth
  	  getContext: function getContext(depth) {
  	    this.lastContext = depth;
  	  },

  	  // [pushContext]
  	  //
  	  // On stack, before: ...
  	  // On stack, after: currentContext, ...
  	  //
  	  // Pushes the value of the current context onto the stack.
  	  pushContext: function pushContext() {
  	    this.pushStackLiteral(this.contextName(this.lastContext));
  	  },

  	  // [lookupOnContext]
  	  //
  	  // On stack, before: ...
  	  // On stack, after: currentContext[name], ...
  	  //
  	  // Looks up the value of `name` on the current context and pushes
  	  // it onto the stack.
  	  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
  	    var i = 0;

  	    if (!scoped && this.options.compat && !this.lastContext) {
  	      // The depthed query is expected to handle the undefined logic for the root level that
  	      // is implemented below, so we evaluate that directly in compat mode
  	      this.push(this.depthedLookup(parts[i++]));
  	    } else {
  	      this.pushContext();
  	    }

  	    this.resolvePath('context', parts, i, falsy, strict);
  	  },

  	  // [lookupBlockParam]
  	  //
  	  // On stack, before: ...
  	  // On stack, after: blockParam[name], ...
  	  //
  	  // Looks up the value of `parts` on the given block param and pushes
  	  // it onto the stack.
  	  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
  	    this.useBlockParams = true;

  	    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
  	    this.resolvePath('context', parts, 1);
  	  },

  	  // [lookupData]
  	  //
  	  // On stack, before: ...
  	  // On stack, after: data, ...
  	  //
  	  // Push the data lookup operator
  	  lookupData: function lookupData(depth, parts, strict) {
  	    if (!depth) {
  	      this.pushStackLiteral('data');
  	    } else {
  	      this.pushStackLiteral('container.data(data, ' + depth + ')');
  	    }

  	    this.resolvePath('data', parts, 0, true, strict);
  	  },

  	  resolvePath: function resolvePath(type, parts, i, falsy, strict) {
  	    // istanbul ignore next

  	    var _this = this;

  	    if (this.options.strict || this.options.assumeObjects) {
  	      this.push(strictLookup(this.options.strict && strict, this, parts, type));
  	      return;
  	    }

  	    var len = parts.length;
  	    for (; i < len; i++) {
  	      /* eslint-disable no-loop-func */
  	      this.replaceStack(function (current) {
  	        var lookup = _this.nameLookup(current, parts[i], type);
  	        // We want to ensure that zero and false are handled properly if the context (falsy flag)
  	        // needs to have the special handling for these values.
  	        if (!falsy) {
  	          return [' != null ? ', lookup, ' : ', current];
  	        } else {
  	          // Otherwise we can use generic falsy handling
  	          return [' && ', lookup];
  	        }
  	      });
  	      /* eslint-enable no-loop-func */
  	    }
  	  },

  	  // [resolvePossibleLambda]
  	  //
  	  // On stack, before: value, ...
  	  // On stack, after: resolved value, ...
  	  //
  	  // If the `value` is a lambda, replace it on the stack by
  	  // the return value of the lambda
  	  resolvePossibleLambda: function resolvePossibleLambda() {
  	    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
  	  },

  	  // [pushStringParam]
  	  //
  	  // On stack, before: ...
  	  // On stack, after: string, currentContext, ...
  	  //
  	  // This opcode is designed for use in string mode, which
  	  // provides the string value of a parameter along with its
  	  // depth rather than resolving it immediately.
  	  pushStringParam: function pushStringParam(string, type) {
  	    this.pushContext();
  	    this.pushString(type);

  	    // If it's a subexpression, the string result
  	    // will be pushed after this opcode.
  	    if (type !== 'SubExpression') {
  	      if (typeof string === 'string') {
  	        this.pushString(string);
  	      } else {
  	        this.pushStackLiteral(string);
  	      }
  	    }
  	  },

  	  emptyHash: function emptyHash(omitEmpty) {
  	    if (this.trackIds) {
  	      this.push('{}'); // hashIds
  	    }
  	    if (this.stringParams) {
  	      this.push('{}'); // hashContexts
  	      this.push('{}'); // hashTypes
  	    }
  	    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
  	  },
  	  pushHash: function pushHash() {
  	    if (this.hash) {
  	      this.hashes.push(this.hash);
  	    }
  	    this.hash = { values: [], types: [], contexts: [], ids: [] };
  	  },
  	  popHash: function popHash() {
  	    var hash = this.hash;
  	    this.hash = this.hashes.pop();

  	    if (this.trackIds) {
  	      this.push(this.objectLiteral(hash.ids));
  	    }
  	    if (this.stringParams) {
  	      this.push(this.objectLiteral(hash.contexts));
  	      this.push(this.objectLiteral(hash.types));
  	    }

  	    this.push(this.objectLiteral(hash.values));
  	  },

  	  // [pushString]
  	  //
  	  // On stack, before: ...
  	  // On stack, after: quotedString(string), ...
  	  //
  	  // Push a quoted version of `string` onto the stack
  	  pushString: function pushString(string) {
  	    this.pushStackLiteral(this.quotedString(string));
  	  },

  	  // [pushLiteral]
  	  //
  	  // On stack, before: ...
  	  // On stack, after: value, ...
  	  //
  	  // Pushes a value onto the stack. This operation prevents
  	  // the compiler from creating a temporary variable to hold
  	  // it.
  	  pushLiteral: function pushLiteral(value) {
  	    this.pushStackLiteral(value);
  	  },

  	  // [pushProgram]
  	  //
  	  // On stack, before: ...
  	  // On stack, after: program(guid), ...
  	  //
  	  // Push a program expression onto the stack. This takes
  	  // a compile-time guid and converts it into a runtime-accessible
  	  // expression.
  	  pushProgram: function pushProgram(guid) {
  	    if (guid != null) {
  	      this.pushStackLiteral(this.programExpression(guid));
  	    } else {
  	      this.pushStackLiteral(null);
  	    }
  	  },

  	  // [registerDecorator]
  	  //
  	  // On stack, before: hash, program, params..., ...
  	  // On stack, after: ...
  	  //
  	  // Pops off the decorator's parameters, invokes the decorator,
  	  // and inserts the decorator into the decorators list.
  	  registerDecorator: function registerDecorator(paramSize, name) {
  	    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
  	        options = this.setupHelperArgs(name, paramSize);

  	    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
  	  },

  	  // [invokeHelper]
  	  //
  	  // On stack, before: hash, inverse, program, params..., ...
  	  // On stack, after: result of helper invocation
  	  //
  	  // Pops off the helper's parameters, invokes the helper,
  	  // and pushes the helper's return value onto the stack.
  	  //
  	  // If the helper is not found, `helperMissing` is called.
  	  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
  	    var nonHelper = this.popStack(),
  	        helper = this.setupHelper(paramSize, name),
  	        simple = isSimple ? [helper.name, ' || '] : '';

  	    var lookup = ['('].concat(simple, nonHelper);
  	    if (!this.options.strict) {
  	      lookup.push(' || ', this.aliasable('helpers.helperMissing'));
  	    }
  	    lookup.push(')');

  	    this.push(this.source.functionCall(lookup, 'call', helper.callParams));
  	  },

  	  // [invokeKnownHelper]
  	  //
  	  // On stack, before: hash, inverse, program, params..., ...
  	  // On stack, after: result of helper invocation
  	  //
  	  // This operation is used when the helper is known to exist,
  	  // so a `helperMissing` fallback is not required.
  	  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
  	    var helper = this.setupHelper(paramSize, name);
  	    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
  	  },

  	  // [invokeAmbiguous]
  	  //
  	  // On stack, before: hash, inverse, program, params..., ...
  	  // On stack, after: result of disambiguation
  	  //
  	  // This operation is used when an expression like `{{foo}}`
  	  // is provided, but we don't know at compile-time whether it
  	  // is a helper or a path.
  	  //
  	  // This operation emits more code than the other options,
  	  // and can be avoided by passing the `knownHelpers` and
  	  // `knownHelpersOnly` flags at compile-time.
  	  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
  	    this.useRegister('helper');

  	    var nonHelper = this.popStack();

  	    this.emptyHash();
  	    var helper = this.setupHelper(0, name, helperCall);

  	    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

  	    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
  	    if (!this.options.strict) {
  	      lookup[0] = '(helper = ';
  	      lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
  	    }

  	    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
  	  },

  	  // [invokePartial]
  	  //
  	  // On stack, before: context, ...
  	  // On stack after: result of partial invocation
  	  //
  	  // This operation pops off a context, invokes a partial with that context,
  	  // and pushes the result of the invocation back.
  	  invokePartial: function invokePartial(isDynamic, name, indent) {
  	    var params = [],
  	        options = this.setupParams(name, 1, params);

  	    if (isDynamic) {
  	      name = this.popStack();
  	      delete options.name;
  	    }

  	    if (indent) {
  	      options.indent = JSON.stringify(indent);
  	    }
  	    options.helpers = 'helpers';
  	    options.partials = 'partials';
  	    options.decorators = 'container.decorators';

  	    if (!isDynamic) {
  	      params.unshift(this.nameLookup('partials', name, 'partial'));
  	    } else {
  	      params.unshift(name);
  	    }

  	    if (this.options.compat) {
  	      options.depths = 'depths';
  	    }
  	    options = this.objectLiteral(options);
  	    params.push(options);

  	    this.push(this.source.functionCall('container.invokePartial', '', params));
  	  },

  	  // [assignToHash]
  	  //
  	  // On stack, before: value, ..., hash, ...
  	  // On stack, after: ..., hash, ...
  	  //
  	  // Pops a value off the stack and assigns it to the current hash
  	  assignToHash: function assignToHash(key) {
  	    var value = this.popStack(),
  	        context = undefined,
  	        type = undefined,
  	        id = undefined;

  	    if (this.trackIds) {
  	      id = this.popStack();
  	    }
  	    if (this.stringParams) {
  	      type = this.popStack();
  	      context = this.popStack();
  	    }

  	    var hash = this.hash;
  	    if (context) {
  	      hash.contexts[key] = context;
  	    }
  	    if (type) {
  	      hash.types[key] = type;
  	    }
  	    if (id) {
  	      hash.ids[key] = id;
  	    }
  	    hash.values[key] = value;
  	  },

  	  pushId: function pushId(type, name, child) {
  	    if (type === 'BlockParam') {
  	      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
  	    } else if (type === 'PathExpression') {
  	      this.pushString(name);
  	    } else if (type === 'SubExpression') {
  	      this.pushStackLiteral('true');
  	    } else {
  	      this.pushStackLiteral('null');
  	    }
  	  },

  	  // HELPERS

  	  compiler: JavaScriptCompiler,

  	  compileChildren: function compileChildren(environment, options) {
  	    var children = environment.children,
  	        child = undefined,
  	        compiler = undefined;

  	    for (var i = 0, l = children.length; i < l; i++) {
  	      child = children[i];
  	      compiler = new this.compiler(); // eslint-disable-line new-cap

  	      var index = this.matchExistingProgram(child);

  	      if (index == null) {
  	        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
  	        index = this.context.programs.length;
  	        child.index = index;
  	        child.name = 'program' + index;
  	        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
  	        this.context.decorators[index] = compiler.decorators;
  	        this.context.environments[index] = child;

  	        this.useDepths = this.useDepths || compiler.useDepths;
  	        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
  	      } else {
  	        child.index = index;
  	        child.name = 'program' + index;

  	        this.useDepths = this.useDepths || child.useDepths;
  	        this.useBlockParams = this.useBlockParams || child.useBlockParams;
  	      }
  	    }
  	  },
  	  matchExistingProgram: function matchExistingProgram(child) {
  	    for (var i = 0, len = this.context.environments.length; i < len; i++) {
  	      var environment = this.context.environments[i];
  	      if (environment && environment.equals(child)) {
  	        return i;
  	      }
  	    }
  	  },

  	  programExpression: function programExpression(guid) {
  	    var child = this.environment.children[guid],
  	        programParams = [child.index, 'data', child.blockParams];

  	    if (this.useBlockParams || this.useDepths) {
  	      programParams.push('blockParams');
  	    }
  	    if (this.useDepths) {
  	      programParams.push('depths');
  	    }

  	    return 'container.program(' + programParams.join(', ') + ')';
  	  },

  	  useRegister: function useRegister(name) {
  	    if (!this.registers[name]) {
  	      this.registers[name] = true;
  	      this.registers.list.push(name);
  	    }
  	  },

  	  push: function push(expr) {
  	    if (!(expr instanceof Literal)) {
  	      expr = this.source.wrap(expr);
  	    }

  	    this.inlineStack.push(expr);
  	    return expr;
  	  },

  	  pushStackLiteral: function pushStackLiteral(item) {
  	    this.push(new Literal(item));
  	  },

  	  pushSource: function pushSource(source) {
  	    if (this.pendingContent) {
  	      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
  	      this.pendingContent = undefined;
  	    }

  	    if (source) {
  	      this.source.push(source);
  	    }
  	  },

  	  replaceStack: function replaceStack(callback) {
  	    var prefix = ['('],
  	        stack = undefined,
  	        createdStack = undefined,
  	        usedLiteral = undefined;

  	    /* istanbul ignore next */
  	    if (!this.isInline()) {
  	      throw new _exception2['default']('replaceStack on non-inline');
  	    }

  	    // We want to merge the inline statement into the replacement statement via ','
  	    var top = this.popStack(true);

  	    if (top instanceof Literal) {
  	      // Literals do not need to be inlined
  	      stack = [top.value];
  	      prefix = ['(', stack];
  	      usedLiteral = true;
  	    } else {
  	      // Get or create the current stack name for use by the inline
  	      createdStack = true;
  	      var _name = this.incrStack();

  	      prefix = ['((', this.push(_name), ' = ', top, ')'];
  	      stack = this.topStack();
  	    }

  	    var item = callback.call(this, stack);

  	    if (!usedLiteral) {
  	      this.popStack();
  	    }
  	    if (createdStack) {
  	      this.stackSlot--;
  	    }
  	    this.push(prefix.concat(item, ')'));
  	  },

  	  incrStack: function incrStack() {
  	    this.stackSlot++;
  	    if (this.stackSlot > this.stackVars.length) {
  	      this.stackVars.push('stack' + this.stackSlot);
  	    }
  	    return this.topStackName();
  	  },
  	  topStackName: function topStackName() {
  	    return 'stack' + this.stackSlot;
  	  },
  	  flushInline: function flushInline() {
  	    var inlineStack = this.inlineStack;
  	    this.inlineStack = [];
  	    for (var i = 0, len = inlineStack.length; i < len; i++) {
  	      var entry = inlineStack[i];
  	      /* istanbul ignore if */
  	      if (entry instanceof Literal) {
  	        this.compileStack.push(entry);
  	      } else {
  	        var stack = this.incrStack();
  	        this.pushSource([stack, ' = ', entry, ';']);
  	        this.compileStack.push(stack);
  	      }
  	    }
  	  },
  	  isInline: function isInline() {
  	    return this.inlineStack.length;
  	  },

  	  popStack: function popStack(wrapped) {
  	    var inline = this.isInline(),
  	        item = (inline ? this.inlineStack : this.compileStack).pop();

  	    if (!wrapped && item instanceof Literal) {
  	      return item.value;
  	    } else {
  	      if (!inline) {
  	        /* istanbul ignore next */
  	        if (!this.stackSlot) {
  	          throw new _exception2['default']('Invalid stack pop');
  	        }
  	        this.stackSlot--;
  	      }
  	      return item;
  	    }
  	  },

  	  topStack: function topStack() {
  	    var stack = this.isInline() ? this.inlineStack : this.compileStack,
  	        item = stack[stack.length - 1];

  	    /* istanbul ignore if */
  	    if (item instanceof Literal) {
  	      return item.value;
  	    } else {
  	      return item;
  	    }
  	  },

  	  contextName: function contextName(context) {
  	    if (this.useDepths && context) {
  	      return 'depths[' + context + ']';
  	    } else {
  	      return 'depth' + context;
  	    }
  	  },

  	  quotedString: function quotedString(str) {
  	    return this.source.quotedString(str);
  	  },

  	  objectLiteral: function objectLiteral(obj) {
  	    return this.source.objectLiteral(obj);
  	  },

  	  aliasable: function aliasable(name) {
  	    var ret = this.aliases[name];
  	    if (ret) {
  	      ret.referenceCount++;
  	      return ret;
  	    }

  	    ret = this.aliases[name] = this.source.wrap(name);
  	    ret.aliasable = true;
  	    ret.referenceCount = 1;

  	    return ret;
  	  },

  	  setupHelper: function setupHelper(paramSize, name, blockHelper) {
  	    var params = [],
  	        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
  	    var foundHelper = this.nameLookup('helpers', name, 'helper'),
  	        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : {}');

  	    return {
  	      params: params,
  	      paramsInit: paramsInit,
  	      name: foundHelper,
  	      callParams: [callContext].concat(params)
  	    };
  	  },

  	  setupParams: function setupParams(helper, paramSize, params) {
  	    var options = {},
  	        contexts = [],
  	        types = [],
  	        ids = [],
  	        objectArgs = !params,
  	        param = undefined;

  	    if (objectArgs) {
  	      params = [];
  	    }

  	    options.name = this.quotedString(helper);
  	    options.hash = this.popStack();

  	    if (this.trackIds) {
  	      options.hashIds = this.popStack();
  	    }
  	    if (this.stringParams) {
  	      options.hashTypes = this.popStack();
  	      options.hashContexts = this.popStack();
  	    }

  	    var inverse = this.popStack(),
  	        program = this.popStack();

  	    // Avoid setting fn and inverse if neither are set. This allows
  	    // helpers to do a check for `if (options.fn)`
  	    if (program || inverse) {
  	      options.fn = program || 'container.noop';
  	      options.inverse = inverse || 'container.noop';
  	    }

  	    // The parameters go on to the stack in order (making sure that they are evaluated in order)
  	    // so we need to pop them off the stack in reverse order
  	    var i = paramSize;
  	    while (i--) {
  	      param = this.popStack();
  	      params[i] = param;

  	      if (this.trackIds) {
  	        ids[i] = this.popStack();
  	      }
  	      if (this.stringParams) {
  	        types[i] = this.popStack();
  	        contexts[i] = this.popStack();
  	      }
  	    }

  	    if (objectArgs) {
  	      options.args = this.source.generateArray(params);
  	    }

  	    if (this.trackIds) {
  	      options.ids = this.source.generateArray(ids);
  	    }
  	    if (this.stringParams) {
  	      options.types = this.source.generateArray(types);
  	      options.contexts = this.source.generateArray(contexts);
  	    }

  	    if (this.options.data) {
  	      options.data = 'data';
  	    }
  	    if (this.useBlockParams) {
  	      options.blockParams = 'blockParams';
  	    }
  	    return options;
  	  },

  	  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
  	    var options = this.setupParams(helper, paramSize, params);
  	    options = this.objectLiteral(options);
  	    if (useRegister) {
  	      this.useRegister('options');
  	      params.push('options');
  	      return ['options=', options];
  	    } else if (params) {
  	      params.push(options);
  	      return '';
  	    } else {
  	      return options;
  	    }
  	  }
  	};

  	(function () {
  	  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

  	  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

  	  for (var i = 0, l = reservedWords.length; i < l; i++) {
  	    compilerWords[reservedWords[i]] = true;
  	  }
  	})();

  	JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
  	  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
  	};

  	function strictLookup(requireTerminal, compiler, parts, type) {
  	  var stack = compiler.popStack(),
  	      i = 0,
  	      len = parts.length;
  	  if (requireTerminal) {
  	    len--;
  	  }

  	  for (; i < len; i++) {
  	    stack = compiler.nameLookup(stack, parts[i], type);
  	  }

  	  if (requireTerminal) {
  	    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
  	  } else {
  	    return stack;
  	  }
  	}

  	exports['default'] = JavaScriptCompiler;
  	module.exports = exports['default'];

  /***/ },
  /* 29 */
  /***/ function(module, exports, __webpack_require__) {

  	/* global define */
  	'use strict';

  	exports.__esModule = true;

  	var _utils = __webpack_require__(5);

  	var SourceNode = undefined;

  	try {
  	  /* istanbul ignore next */
  	  if (false) {
  	    // We don't support this in AMD environments. For these environments, we asusme that
  	    // they are running on the browser and thus have no need for the source-map library.
  	    var SourceMap = require('source-map');
  	    SourceNode = SourceMap.SourceNode;
  	  }
  	} catch (err) {}
  	/* NOP */

  	/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
  	if (!SourceNode) {
  	  SourceNode = function (line, column, srcFile, chunks) {
  	    this.src = '';
  	    if (chunks) {
  	      this.add(chunks);
  	    }
  	  };
  	  /* istanbul ignore next */
  	  SourceNode.prototype = {
  	    add: function add(chunks) {
  	      if (_utils.isArray(chunks)) {
  	        chunks = chunks.join('');
  	      }
  	      this.src += chunks;
  	    },
  	    prepend: function prepend(chunks) {
  	      if (_utils.isArray(chunks)) {
  	        chunks = chunks.join('');
  	      }
  	      this.src = chunks + this.src;
  	    },
  	    toStringWithSourceMap: function toStringWithSourceMap() {
  	      return { code: this.toString() };
  	    },
  	    toString: function toString() {
  	      return this.src;
  	    }
  	  };
  	}

  	function castChunk(chunk, codeGen, loc) {
  	  if (_utils.isArray(chunk)) {
  	    var ret = [];

  	    for (var i = 0, len = chunk.length; i < len; i++) {
  	      ret.push(codeGen.wrap(chunk[i], loc));
  	    }
  	    return ret;
  	  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
  	    // Handle primitives that the SourceNode will throw up on
  	    return chunk + '';
  	  }
  	  return chunk;
  	}

  	function CodeGen(srcFile) {
  	  this.srcFile = srcFile;
  	  this.source = [];
  	}

  	CodeGen.prototype = {
  	  isEmpty: function isEmpty() {
  	    return !this.source.length;
  	  },
  	  prepend: function prepend(source, loc) {
  	    this.source.unshift(this.wrap(source, loc));
  	  },
  	  push: function push(source, loc) {
  	    this.source.push(this.wrap(source, loc));
  	  },

  	  merge: function merge() {
  	    var source = this.empty();
  	    this.each(function (line) {
  	      source.add(['  ', line, '\n']);
  	    });
  	    return source;
  	  },

  	  each: function each(iter) {
  	    for (var i = 0, len = this.source.length; i < len; i++) {
  	      iter(this.source[i]);
  	    }
  	  },

  	  empty: function empty() {
  	    var loc = this.currentLocation || { start: {} };
  	    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
  	  },
  	  wrap: function wrap(chunk) {
  	    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

  	    if (chunk instanceof SourceNode) {
  	      return chunk;
  	    }

  	    chunk = castChunk(chunk, this, loc);

  	    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
  	  },

  	  functionCall: function functionCall(fn, type, params) {
  	    params = this.generateList(params);
  	    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
  	  },

  	  quotedString: function quotedString(str) {
  	    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
  	    .replace(/\u2029/g, '\\u2029') + '"';
  	  },

  	  objectLiteral: function objectLiteral(obj) {
  	    var pairs = [];

  	    for (var key in obj) {
  	      if (obj.hasOwnProperty(key)) {
  	        var value = castChunk(obj[key], this);
  	        if (value !== 'undefined') {
  	          pairs.push([this.quotedString(key), ':', value]);
  	        }
  	      }
  	    }

  	    var ret = this.generateList(pairs);
  	    ret.prepend('{');
  	    ret.add('}');
  	    return ret;
  	  },

  	  generateList: function generateList(entries) {
  	    var ret = this.empty();

  	    for (var i = 0, len = entries.length; i < len; i++) {
  	      if (i) {
  	        ret.add(',');
  	      }

  	      ret.add(castChunk(entries[i], this));
  	    }

  	    return ret;
  	  },

  	  generateArray: function generateArray(entries) {
  	    var ret = this.generateList(entries);
  	    ret.prepend('[');
  	    ret.add(']');

  	    return ret;
  	  }
  	};

  	exports['default'] = CodeGen;
  	module.exports = exports['default'];

  /***/ }
  /******/ ])
  });
  ;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(125).nextTick;
  var apply = Function.prototype.apply;
  var slice = Array.prototype.slice;
  var immediateIds = {};
  var nextImmediateId = 0;

  // DOM APIs, for completeness

  exports.setTimeout = function() {
    return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
  };
  exports.setInterval = function() {
    return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
  };
  exports.clearTimeout =
  exports.clearInterval = function(timeout) { timeout.close(); };

  function Timeout(id, clearFn) {
    this._id = id;
    this._clearFn = clearFn;
  }
  Timeout.prototype.unref = Timeout.prototype.ref = function() {};
  Timeout.prototype.close = function() {
    this._clearFn.call(window, this._id);
  };

  // Does not start the time, just sets up the members needed.
  exports.enroll = function(item, msecs) {
    clearTimeout(item._idleTimeoutId);
    item._idleTimeout = msecs;
  };

  exports.unenroll = function(item) {
    clearTimeout(item._idleTimeoutId);
    item._idleTimeout = -1;
  };

  exports._unrefActive = exports.active = function(item) {
    clearTimeout(item._idleTimeoutId);

    var msecs = item._idleTimeout;
    if (msecs >= 0) {
      item._idleTimeoutId = setTimeout(function onTimeout() {
        if (item._onTimeout)
          item._onTimeout();
      }, msecs);
    }
  };

  // That's not how node.js implements it but the exposed api is the same.
  exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
    var id = nextImmediateId++;
    var args = arguments.length < 2 ? false : slice.call(arguments, 1);

    immediateIds[id] = true;

    nextTick(function onNextTick() {
      if (immediateIds[id]) {
        // fn.call() is faster so we optimize for the common use-case
        // @see http://jsperf.com/call-apply-segu
        if (args) {
          fn.apply(null, args);
        } else {
          fn.call(null);
        }
        // Prevent ids from leaking
        exports.clearImmediate(id);
      }
    });

    return id;
  };

  exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
    delete immediateIds[id];
  };
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19).setImmediate, __webpack_require__(19).clearImmediate))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

  //var EverCookie = require("./3party/evercookie.js").EverCookie;
  //function newEverCookie() {
  //    return new EverCookie(
  //        {
  //            history: true, // CSS history knocking or not .. can be network intensive
  //            java: true, // Java applet on/off... may prompt users for permission to run.
  //            tests: 10,  // 1000 what is it, actually?
  //            silverlight: true, // you might want to turn it off https://github.com/samyk/evercookie/issues/45
  //            domain: '.' + window.location.host.replace(/:\d+/, ''), // Get current domain
  //            baseurl: '', // base url for php, flash and silverlight assets
  //            asseturi: '/css/evercookie', // assets = .fla, .jar, etc
  //            phpuri: '/php', // php file path or route
  //            authPath: false, //'/evercookie_auth.php', // set to false to disable Basic Authentication cache
  //            pngCookieName: 'evercookie_png',
  //            pngPath: '/evercookie_png.php',
  //            etagCookieName: 'evercookie_etag',
  //            etagPath: '/evercookie_etag.php',
  //            cacheCookieName: 'evercookie_cache',
  //            cachePath: '/evercookie_cache.php',
  //            hsts: false,
  //            hsts_domains: []
  //        }
  //    );
  //}
  "use strict";
  var store = __webpack_require__(184);
  function set(id, value) {
      //var ec = newEverCookie();
      //ec.set(id, value);
      store.set(id, value);
  }
  exports.set = set;
  function get(id, timeout) {
      //return new Promise<string>((resolve, reject) => {
      //    var timer = setTimeout(() => {
      //        timer = null;
      //        reject("Timeout");
      //    },timeout);
      //    var ec = newEverCookie();
      //    ec.get(id, value => {
      //        if (timer) {
      //            clearTimeout(timer);
      //            timer = null;
      //            resolve(value);
      //        }
      //    });
      //});
      if (timeout === void 0) { timeout = 3000; }
      return Promise.resolve(store.get(id));
  }
  exports.get = get;
  function setObjValues(id, obj) {
      return getObject(id).then(function (re) {
          if (obj) {
              for (var k in obj) {
                  var v = obj[k];
                  if (!v)
                      delete re[k];
                  else
                      re[k] = v;
              }
              set(id, JSON.stringify(re));
          }
          return re;
      });
  }
  exports.setObjValues = setObjValues;
  function getObject(id) {
      var cb = function (re) {
          var c;
          if (re)
              try {
                  c = JSON.parse(re);
              }
              catch (ex) { }
          if (!c)
              c = {};
          return c;
      };
      return get(id).then(cb, function () { return cb(null); });
  }
  exports.getObject = getObject;


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var time = __webpack_require__(4);
  function mapUseRecord(c) {
      var cc = {
          id: c.Id,
          name: c.Name,
          created: time.format(c.CreatedTime, "Y-MM-DD HH:mm"),
          srcDesc: c.SrcDesc,
          dstDesc: c.DstDesc,
          time: time.format(c.Time, "Y-MM-DD HH:mm"),
          count: c.Count
      };
      return cc;
  }
  exports.mapUseRecord = mapUseRecord;
  function mapRewardRecord(c) {
      var cc = {
          id: c.Id,
          name: c.Name,
          begin: time.format(c.BeginTime || c.CreatedTime, "Y-MM-DD HH:mm"),
          expire: time.formatEndDate(c.ExpiresTime),
          created: time.format(c.CreatedTime, "Y-MM-DD HH:mm"),
          lastUsed: c.LastUsedCount ? time.format(c.LastUsedTime, "Y-MM-DD HH:mm") + ("(" + c.LastUsedCount + "\u4E2A)") : "-",
          prefix: "",
          value: "",
          desc: "",
          postfix: "",
          type: "",
          discount: "",
          srcDesc: c.SrcDesc,
          //dstDesc: c.DstDesc,
          left: c.LeftCount || 0,
          count: c.Count,
          state: c.State == "Invalid" ? "无效" :
              c.State == "Valid" ? "有效" :
                  c.State == "Expired" ? "已过期" :
                      c.State == "NotReady" ? "未生效" :
                          c.State == "Used" ? "已使用" : "无效"
      };
      return cc;
  }
  exports.mapRewardRecord = mapRewardRecord;
  function mapCoupon(c) {
      var cc = {
          id: c.Id,
          desc: c.Desc,
          begin: time.format(c.BeginTime, "Y-MM-DD HH:mm"),
          expire: time.formatEndDate(c.ExpireTime),
          lastUsed: time.format(c.LastUseTime, "Y-MM-DD HH:mm"),
          name: c.Name,
          created: time.format(c.CreatedTime, "Y-MM-DD HH:mm"),
          prefix: "",
          value: "",
          postfix: "",
          type: "",
          discount: "",
          left: c.LeftCount || 0,
          count: c.Count,
      };
      if (c.Type != "DiscountCoupon") {
          cc.type = c.ConditionValue ? "满减抵价券" : "直减抵价券";
          cc.prefix = c.ConditionValue ? "\u6EE1" + c.ConditionValue + "\u51CF" : "直减";
          cc.value = Math.floor(c.AdjustValue) + "";
          cc.postfix = "云币";
      }
      else {
          cc.type = c.ConditionValue ? "满减折扣券" : "直减折扣券";
          cc.prefix = c.ConditionValue ? "\u6EE1" + c.ConditionValue : "";
          cc.value = Math.floor((100 - c.AdjustValue) / 10) + "";
          var left = Math.floor(100 - c.AdjustValue) % 10;
          cc.postfix = left ? "." + left + "\u6298" : '折';
      }
      return cc;
  }
  exports.mapCoupon = mapCoupon;
  function pickupCoupon(cs, cur, total) {
      if (cur && (!cur.ConditionValue || cur.ConditionValue <= total))
          return cur;
      if (!cs || !cs.length)
          return null;
      for (var i = 0; i < cs.length; i++) {
          var c = cs[i];
          if (!c.ConditionValue || c.ConditionValue <= total)
              return c;
      }
      return null;
  }
  exports.pickupCoupon = pickupCoupon;
  function applyCoupon(orgAmount, coupon, count, maxDiscountPercent) {
      if (coupon.Type == "DiscountCoupon" || count < 1)
          count = 1;
      else if (count > coupon.LeftCount)
          count = coupon.LeftCount;
      var maxDiscount = maxDiscountPercent ? Math.floor(orgAmount * Math.min(100, maxDiscountPercent) / 100) : orgAmount;
      var couponMinAmount = Math.ceil(100 / maxDiscountPercent);
      var couponMaxCount = 1;
      var total;
      var discountLimited = false;
      if (coupon.Type == "DiscountCoupon") {
          total = Math.round(orgAmount * coupon.AdjustValue / 100);
          if (total > maxDiscount) {
              total = maxDiscount;
          }
          discountLimited = true;
      }
      else {
          couponMaxCount = Math.min(coupon.LeftCount, Math.ceil(maxDiscount / coupon.AdjustValue));
          if (count > couponMaxCount)
              count = couponMaxCount;
          total = Math.min(maxDiscount, count * coupon.AdjustValue);
          discountLimited = count == couponMaxCount;
      }
      return {
          total: total,
          count: count,
          discountLimited: discountLimited,
          couponMinAmount: couponMinAmount,
          couponMaxCount: couponMaxCount,
          couponMaxAmount: maxDiscount
      };
  }
  exports.applyCoupon = applyCoupon;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var userTracking = __webpack_require__(13);
  var ec = __webpack_require__(20);
  var wx = window["wx"];
  var auth = __webpack_require__(7);
  var _UriConfiged = null;
  var _cfgInitPromise = null;
  var _initUri = window.location.href;
  function getCurUri() {
      var uri = window.location.href;
      var i = uri.indexOf('#');
      if (i != -1)
          uri = uri.substring(0, i);
      return uri;
  }
  var _curIgnoreError = true;
  var _curServerSignature = null;
  var _curServerSignExpires = 0;
  var _curConfigUri = null;
  function config(force, ignoreError) {
      var uri = getCurUri();
      if (_UriConfiged == uri && !force)
          return Promise.resolve(true);
      if (_cfgInitPromise && _curConfigUri == uri) {
          if (!ignoreError)
              _curIgnoreError = false;
          return _cfgInitPromise;
      }
      _curConfigUri = uri;
      _curIgnoreError = ignoreError;
      _cfgInitPromise = new Promise(function (resolve, reject) {
          //alert("sign:" + uri); 
          var config = function (re) {
              if (uri != _curConfigUri) {
                  reject({});
                  return;
              }
              if (window["settings"] &&
                  window["settings"].DebugMode &&
                  auth.user() &&
                  window["settings"].DebugId == auth.user().id)
                  re.debug = true;
              re.jsApiList = [
                  'checkJsApi',
                  'onMenuShareTimeline',
                  'onMenuShareAppMessage',
                  'onMenuShareQQ',
                  'chooseImage',
                  'uploadImage'
              ];
              //(re as any).debug = true;
              wx.config(re);
              wx.error(function (res) {
                  reject({});
                  if (uri != _curConfigUri)
                      return;
                  _cfgInitPromise = null;
                  if (_curIgnoreError)
                      return;
                  //如果配置失败，尝试刷新一次页面后，再试一次
                  ec.get("$wcReloadUri").then(function (re) {
                      if (re == uri)
                          return;
                      ec.set("$wcReloadUri", uri);
                      location.reload();
                  });
                  console.log(res);
              });
              wx.ready(function () {
                  if (uri != _curConfigUri) {
                      reject({});
                      return;
                  }
                  _UriConfiged = uri;
                  _cfgInitPromise = null;
                  resolve(true);
              });
          };
          if (_curServerSignature && _curServerSignExpires > Date.now())
              config(_curServerSignature);
          else
              api.WeiXin.GetJsApiSignature(_initUri)
                  .then(function (re) {
                  if (uri != _curConfigUri) {
                      reject({});
                      return;
                  }
                  _curServerSignature = re;
                  _curServerSignExpires = Date.now() + 1000 * 60 * 10;
                  config(re);
              }, function (e) {
                  if (uri == _curConfigUri)
                      _cfgInitPromise = null;
                  reject(e);
              });
      });
      return _cfgInitPromise;
  }
  exports.config = config;
  function isWeiChatBrowser() {
      var ua = window.navigator.userAgent.toLocaleLowerCase();
      return ua.indexOf("micromessenger") != -1;
  }
  exports.isWeiChatBrowser = isWeiChatBrowser;
  function Signin(redirect) {
      var provider = isWeiChatBrowser() ? "weichat" : "wcsite";
      userTracking.getUserTracking().then(function (utd) {
          var href = "/api/ExternalAuthorization/Start?provider=" + provider + "&clientType=web";
          if (utd.uc)
              href += "&source=" + utd.uc;
          if (utd.ui)
              href += "&inviter=" + utd.ui;
          href += "&callback=" + encodeURIComponent(redirect || " / ");
          window.location.href = href;
      });
  }
  exports.Signin = Signin;
  function startPay(args) {
      return new Promise(function (resolve, reject) {
          wx.chooseWXPay({
              timestamp: args.timeStamp,
              nonceStr: args.nonceStr,
              package: args.package,
              signType: args.signType,
              paySign: args.paySign,
              success: function (res) {
                  // 支付成功后的回调函数
                  resolve(res && res.err_msg == "get_brand_wcpay_request:ok");
              }
          });
      });
  }
  exports.startPay = startPay;
  function chooseImage() {
      return new Promise(function (resolve) {
          config().then(function (re) {
              // 选择张片
              wx.chooseImage({
                  count: 1,
                  sizeType: ['original', 'compressed'],
                  sourceType: ['album', 'camera'],
                  success: function (res) {
                      var localIds = res.localIds; // 返回选定照片的本地ID列表，localId可以作为img标签的src属性显示图片
                      // 上传照片
                      wx.uploadImage({
                          localId: '' + localIds,
                          isShowProgressTips: 1,
                          success: function (res) {
                              resolve(res.serverId);
                          }
                      });
                  }
              });
          });
      });
  }
  exports.chooseImage = chooseImage;
  var contentUri = null;
  var dstContentUri = null;
  function registerShareContent(args, replace, ignoreError) {
      if (!replace && location.href == contentUri)
          return;
      dstContentUri = location.href;
      config(false, ignoreError).then(function (re) {
          if (dstContentUri != location.href)
              return;
          contentUri = dstContentUri;
          //获取“分享到朋友圈”按钮点击状态及自定义分享内容接口
          wx.onMenuShareTimeline({
              title: args.title,
              link: args.link,
              desc: args.desc,
              imgUrl: args.imgUrl,
              success: function () {
                  // 用户确认分享后执行的回调函数
              },
              cancel: function () {
                  // 用户取消分享后执行的回调函数
              }
          });
          //获取“分享给朋友”按钮点击状态及自定义分享内容接口
          wx.onMenuShareAppMessage({
              title: args.title,
              desc: args.desc,
              link: args.link,
              imgUrl: args.imgUrl,
              //type: 'link', // 分享类型,music、video或link，不填默认为link
              //dataUrl: '', // 如果type是music或video，则要提供数据链接，默认为空
              success: function () {
                  // 用户确认分享后执行的回调函数
              },
              cancel: function () {
                  // 用户取消分享后执行的回调函数
              }
          });
          //获取“分享到QQ”按钮点击状态及自定义分享内容接口
          wx.onMenuShareQQ({
              title: args.title,
              desc: args.desc,
              link: args.link,
              imgUrl: args.imgUrl,
              success: function () {
                  // 用户确认分享后执行的回调函数
              },
              cancel: function () {
                  // 用户取消分享后执行的回调函数
              }
          });
          //获取“分享到腾讯微博”按钮点击状态及自定义分享内容接口
          wx.onMenuShareWeibo({
              title: args.title,
              desc: args.desc,
              link: args.link,
              imgUrl: args.imgUrl,
              success: function () {
                  // 用户确认分享后执行的回调函数
              },
              cancel: function () {
                  // 用户取消分享后执行的回调函数
              }
          });
          //获取“分享到QQ空间”按钮点击状态及自定义分享内容接口
          wx.onMenuShareQZone({
              title: args.title,
              desc: args.desc,
              link: args.link,
              imgUrl: args.imgUrl,
              success: function () {
                  // 用户确认分享后执行的回调函数
              },
              cancel: function () {
                  // 用户取消分享后执行的回调函数
              }
          });
      });
  }
  exports.registerShareContent = registerShareContent;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var auth = __webpack_require__(7);
  var Vue = __webpack_require__(3);
  var data_table_1 = __webpack_require__(8);
  var cfg = null;
  function config() { return cfg; }
  exports.config = config;
  var TradeItemListInited = false;
  function initTradeItemList() {
      if (TradeItemListInited)
          return;
      TradeItemListInited = true;
      var data = {
          items: [],
          version: 0,
          total: 0
      };
      var vm = new Vue({
          el: "#trade-item-records",
          data: data,
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  api.Round.GetRoundTradeItems(cfg.product, cfg.round, { paging: pg }).then(function (re) {
                      re.Items.forEach(function (i) { return i.Time = time.format(i.Time); });
                      data.items = re.Items;
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                  });
              }
          }
      });
  }
  exports.initTradeItemList = initTradeItemList;
  var ShowListInited = false;
  function initShareList() {
      if (ShowListInited)
          return;
      ShowListInited = true;
      var data = {
          items: [],
          version: 0,
          total: 0
      };
      var vm = new Vue({
          el: "#product-share-list",
          data: data,
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  api.CFWinShared.ListByTarget(cfg.product, { paging: pg }).then(function (re) {
                      re.Items.forEach(function (i) {
                          i.CreatedTime = time.format(i.CreatedTime);
                          i.Images = JSON.parse(i.Images);
                      });
                      data.items = re.Items;
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                  });
              }
          }
      });
  }
  exports.initShareList = initShareList;
  var allCodeGroups = null;
  function initUserCodes(product, round) {
      var u = auth.user();
      if (!u || !u.id)
          return;
      api.Trade.AllCodesInRound(product, round, parseInt(u.id)).then(function (re) {
          if (!re || !re.length) {
              $("#user-codes").html("您还没有参与本次夺宝哦！");
              return;
          }
          allCodeGroups = re;
          var all = re.reduce(function (c, g) { return c.concat(g.Codes); }, []);
          all.sort(function (a, b) { return a - b; });
          var codes = all.length > 8 ? all.slice(0, 8) : all;
          var html = "您的夺宝号码：<br/>" + codes.map(function (c) { return c + 10000001; }).join(" ");
          if (codes != all)
              html += "<br/><button class='btn btn-link' data-action='showAllCodes'>显示所有号码</button>";
          $("#user-codes").html(html);
      });
  }
  exports.initUserCodes = initUserCodes;
  function showAllCodes() {
      var html = allCodeGroups.map(function (g) { return ("\n    <li>\n    <div><b>\u593A\u5B9D\u65F6\u95F4\uFF1A" + time.format(g.Time) + "</b></div>\n    <div>" + g.Codes.map(function (c) { return c + 10000001; }).join(" ") + "</div>        \n    </li>\n"); }).join('');
      $('#allCodesContent').html(html);
      $('#allCodes').modal('show');
  }
  exports.showAllCodes = showAllCodes;
  function init(arg) {
      cfg = arg;
      actions.init({
          showAllCodes: showAllCodes
      });
      $('#records-tab').on('shown.bs.tab', function () { return initTradeItemList(); });
      $('#shares-tab').on('shown.bs.tab', function () { return initShareList(); });
  }
  exports.init = init;


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var auth = __webpack_require__(7);
  var api = __webpack_require__(2);
  function local_load() {
      if (!window.localStorage)
          return null;
      var str = window.localStorage["cart-items"];
      var items;
      if (str)
          try {
              items = JSON.parse(str);
          }
          catch (e) {
          }
      return items || {};
  }
  function local_save(items) {
      if (!window.localStorage)
          return false;
      window.localStorage["cart-items"] = JSON.stringify(items);
      return true;
  }
  function local_add(item, add) {
      var s = local_load();
      if (s === null)
          return 0;
      s[item] = (s[item] || 0) + add;
      var a = 0;
      for (var k in s)
          a += s[k];
      if (!local_save(s))
          return 0;
      return a;
  }
  function add(item) {
      var u = auth.user();
      var re = local_add(item, 1);
      if (!re && !u) {
          window.location.href = "/user/signin";
          return 0;
      }
      if (u)
          api.ShoppingCart.Add(1, [item]);
      return re;
  }
  exports.add = add;
  function buy(item, quantity) {
      var href = "/cart?add=" + item;
      if (quantity)
          href += "&q=" + quantity;
      window.location.href = href;
  }
  exports.buy = buy;


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : afrikaans (af)
  //! author : Werner Mollentze : https://github.com/wernerm

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var af = moment.defineLocale('af', {
          months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
          monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
          weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
          weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
          weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
          meridiemParse: /vm|nm/i,
          isPM : function (input) {
              return /^nm$/i.test(input);
          },
          meridiem : function (hours, minutes, isLower) {
              if (hours < 12) {
                  return isLower ? 'vm' : 'VM';
              } else {
                  return isLower ? 'nm' : 'NM';
              }
          },
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[Vandag om] LT',
              nextDay : '[Môre om] LT',
              nextWeek : 'dddd [om] LT',
              lastDay : '[Gister om] LT',
              lastWeek : '[Laas] dddd [om] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'oor %s',
              past : '%s gelede',
              s : '\'n paar sekondes',
              m : '\'n minuut',
              mm : '%d minute',
              h : '\'n uur',
              hh : '%d ure',
              d : '\'n dag',
              dd : '%d dae',
              M : '\'n maand',
              MM : '%d maande',
              y : '\'n jaar',
              yy : '%d jaar'
          },
          ordinalParse: /\d{1,2}(ste|de)/,
          ordinal : function (number) {
              return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
          },
          week : {
              dow : 1, // Maandag is die eerste dag van die week.
              doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
          }
      });

      return af;

  }));

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Moroccan Arabic (ar-ma)
  //! author : ElFadili Yassine : https://github.com/ElFadiliY
  //! author : Abdel Said : https://github.com/abdelsaid

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var ar_ma = moment.defineLocale('ar-ma', {
          months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
          monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
          weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
          weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
          weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[اليوم على الساعة] LT',
              nextDay: '[غدا على الساعة] LT',
              nextWeek: 'dddd [على الساعة] LT',
              lastDay: '[أمس على الساعة] LT',
              lastWeek: 'dddd [على الساعة] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'في %s',
              past : 'منذ %s',
              s : 'ثوان',
              m : 'دقيقة',
              mm : '%d دقائق',
              h : 'ساعة',
              hh : '%d ساعات',
              d : 'يوم',
              dd : '%d أيام',
              M : 'شهر',
              MM : '%d أشهر',
              y : 'سنة',
              yy : '%d سنوات'
          },
          week : {
              dow : 6, // Saturday is the first day of the week.
              doy : 12  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return ar_ma;

  }));

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Arabic Saudi Arabia (ar-sa)
  //! author : Suhail Alkowaileet : https://github.com/xsoh

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var symbolMap = {
          '1': '١',
          '2': '٢',
          '3': '٣',
          '4': '٤',
          '5': '٥',
          '6': '٦',
          '7': '٧',
          '8': '٨',
          '9': '٩',
          '0': '٠'
      }, numberMap = {
          '١': '1',
          '٢': '2',
          '٣': '3',
          '٤': '4',
          '٥': '5',
          '٦': '6',
          '٧': '7',
          '٨': '8',
          '٩': '9',
          '٠': '0'
      };

      var ar_sa = moment.defineLocale('ar-sa', {
          months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
          monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
          weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
          weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
          weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D MMMM YYYY HH:mm'
          },
          meridiemParse: /ص|م/,
          isPM : function (input) {
              return 'م' === input;
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 12) {
                  return 'ص';
              } else {
                  return 'م';
              }
          },
          calendar : {
              sameDay: '[اليوم على الساعة] LT',
              nextDay: '[غدا على الساعة] LT',
              nextWeek: 'dddd [على الساعة] LT',
              lastDay: '[أمس على الساعة] LT',
              lastWeek: 'dddd [على الساعة] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'في %s',
              past : 'منذ %s',
              s : 'ثوان',
              m : 'دقيقة',
              mm : '%d دقائق',
              h : 'ساعة',
              hh : '%d ساعات',
              d : 'يوم',
              dd : '%d أيام',
              M : 'شهر',
              MM : '%d أشهر',
              y : 'سنة',
              yy : '%d سنوات'
          },
          preparse: function (string) {
              return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                  return numberMap[match];
              }).replace(/،/g, ',');
          },
          postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                  return symbolMap[match];
              }).replace(/,/g, '،');
          },
          week : {
              dow : 6, // Saturday is the first day of the week.
              doy : 12  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return ar_sa;

  }));

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale  : Tunisian Arabic (ar-tn)

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var ar_tn = moment.defineLocale('ar-tn', {
          months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
          monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
          weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
          weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
          weekdaysParseExact : true,
          longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
              sameDay: '[اليوم على الساعة] LT',
              nextDay: '[غدا على الساعة] LT',
              nextWeek: 'dddd [على الساعة] LT',
              lastDay: '[أمس على الساعة] LT',
              lastWeek: 'dddd [على الساعة] LT',
              sameElse: 'L'
          },
          relativeTime: {
              future: 'في %s',
              past: 'منذ %s',
              s: 'ثوان',
              m: 'دقيقة',
              mm: '%d دقائق',
              h: 'ساعة',
              hh: '%d ساعات',
              d: 'يوم',
              dd: '%d أيام',
              M: 'شهر',
              MM: '%d أشهر',
              y: 'سنة',
              yy: '%d سنوات'
          },
          week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
          }
      });

      return ar_tn;

  }));

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! Locale: Arabic (ar)
  //! Author: Abdel Said: https://github.com/abdelsaid
  //! Changes in months, weekdays: Ahmed Elkhatib
  //! Native plural forms: forabi https://github.com/forabi

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var symbolMap = {
          '1': '١',
          '2': '٢',
          '3': '٣',
          '4': '٤',
          '5': '٥',
          '6': '٦',
          '7': '٧',
          '8': '٨',
          '9': '٩',
          '0': '٠'
      }, numberMap = {
          '١': '1',
          '٢': '2',
          '٣': '3',
          '٤': '4',
          '٥': '5',
          '٦': '6',
          '٧': '7',
          '٨': '8',
          '٩': '9',
          '٠': '0'
      }, pluralForm = function (n) {
          return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
      }, plurals = {
          s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
          m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
          h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
          d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
          M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
          y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
      }, pluralize = function (u) {
          return function (number, withoutSuffix, string, isFuture) {
              var f = pluralForm(number),
                  str = plurals[u][pluralForm(number)];
              if (f === 2) {
                  str = str[withoutSuffix ? 0 : 1];
              }
              return str.replace(/%d/i, number);
          };
      }, months = [
          'كانون الثاني يناير',
          'شباط فبراير',
          'آذار مارس',
          'نيسان أبريل',
          'أيار مايو',
          'حزيران يونيو',
          'تموز يوليو',
          'آب أغسطس',
          'أيلول سبتمبر',
          'تشرين الأول أكتوبر',
          'تشرين الثاني نوفمبر',
          'كانون الأول ديسمبر'
      ];

      var ar = moment.defineLocale('ar', {
          months : months,
          monthsShort : months,
          weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
          weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
          weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'D/\u200FM/\u200FYYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D MMMM YYYY HH:mm'
          },
          meridiemParse: /ص|م/,
          isPM : function (input) {
              return 'م' === input;
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 12) {
                  return 'ص';
              } else {
                  return 'م';
              }
          },
          calendar : {
              sameDay: '[اليوم عند الساعة] LT',
              nextDay: '[غدًا عند الساعة] LT',
              nextWeek: 'dddd [عند الساعة] LT',
              lastDay: '[أمس عند الساعة] LT',
              lastWeek: 'dddd [عند الساعة] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'بعد %s',
              past : 'منذ %s',
              s : pluralize('s'),
              m : pluralize('m'),
              mm : pluralize('m'),
              h : pluralize('h'),
              hh : pluralize('h'),
              d : pluralize('d'),
              dd : pluralize('d'),
              M : pluralize('M'),
              MM : pluralize('M'),
              y : pluralize('y'),
              yy : pluralize('y')
          },
          preparse: function (string) {
              return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                  return numberMap[match];
              }).replace(/،/g, ',');
          },
          postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                  return symbolMap[match];
              }).replace(/,/g, '،');
          },
          week : {
              dow : 6, // Saturday is the first day of the week.
              doy : 12  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return ar;

  }));

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : azerbaijani (az)
  //! author : topchiyev : https://github.com/topchiyev

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var suffixes = {
          1: '-inci',
          5: '-inci',
          8: '-inci',
          70: '-inci',
          80: '-inci',
          2: '-nci',
          7: '-nci',
          20: '-nci',
          50: '-nci',
          3: '-üncü',
          4: '-üncü',
          100: '-üncü',
          6: '-ncı',
          9: '-uncu',
          10: '-uncu',
          30: '-uncu',
          60: '-ıncı',
          90: '-ıncı'
      };

      var az = moment.defineLocale('az', {
          months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
          monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
          weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
          weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
          weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[bugün saat] LT',
              nextDay : '[sabah saat] LT',
              nextWeek : '[gələn həftə] dddd [saat] LT',
              lastDay : '[dünən] LT',
              lastWeek : '[keçən həftə] dddd [saat] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s sonra',
              past : '%s əvvəl',
              s : 'birneçə saniyyə',
              m : 'bir dəqiqə',
              mm : '%d dəqiqə',
              h : 'bir saat',
              hh : '%d saat',
              d : 'bir gün',
              dd : '%d gün',
              M : 'bir ay',
              MM : '%d ay',
              y : 'bir il',
              yy : '%d il'
          },
          meridiemParse: /gecə|səhər|gündüz|axşam/,
          isPM : function (input) {
              return /^(gündüz|axşam)$/.test(input);
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 4) {
                  return 'gecə';
              } else if (hour < 12) {
                  return 'səhər';
              } else if (hour < 17) {
                  return 'gündüz';
              } else {
                  return 'axşam';
              }
          },
          ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
          ordinal : function (number) {
              if (number === 0) {  // special case for zero
                  return number + '-ıncı';
              }
              var a = number % 10,
                  b = number % 100 - a,
                  c = number >= 100 ? 100 : null;
              return number + (suffixes[a] || suffixes[b] || suffixes[c]);
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return az;

  }));

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : belarusian (be)
  //! author : Dmitry Demidov : https://github.com/demidov91
  //! author: Praleska: http://praleska.pro/
  //! Author : Menelion Elensúle : https://github.com/Oire

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function plural(word, num) {
          var forms = word.split('_');
          return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
      }
      function relativeTimeWithPlural(number, withoutSuffix, key) {
          var format = {
              'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
              'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
              'dd': 'дзень_дні_дзён',
              'MM': 'месяц_месяцы_месяцаў',
              'yy': 'год_гады_гадоў'
          };
          if (key === 'm') {
              return withoutSuffix ? 'хвіліна' : 'хвіліну';
          }
          else if (key === 'h') {
              return withoutSuffix ? 'гадзіна' : 'гадзіну';
          }
          else {
              return number + ' ' + plural(format[key], +number);
          }
      }

      var be = moment.defineLocale('be', {
          months : {
              format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
              standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
          },
          monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
          weekdays : {
              format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
              standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
              isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
          },
          weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
          weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY г.',
              LLL : 'D MMMM YYYY г., HH:mm',
              LLLL : 'dddd, D MMMM YYYY г., HH:mm'
          },
          calendar : {
              sameDay: '[Сёння ў] LT',
              nextDay: '[Заўтра ў] LT',
              lastDay: '[Учора ў] LT',
              nextWeek: function () {
                  return '[У] dddd [ў] LT';
              },
              lastWeek: function () {
                  switch (this.day()) {
                  case 0:
                  case 3:
                  case 5:
                  case 6:
                      return '[У мінулую] dddd [ў] LT';
                  case 1:
                  case 2:
                  case 4:
                      return '[У мінулы] dddd [ў] LT';
                  }
              },
              sameElse: 'L'
          },
          relativeTime : {
              future : 'праз %s',
              past : '%s таму',
              s : 'некалькі секунд',
              m : relativeTimeWithPlural,
              mm : relativeTimeWithPlural,
              h : relativeTimeWithPlural,
              hh : relativeTimeWithPlural,
              d : 'дзень',
              dd : relativeTimeWithPlural,
              M : 'месяц',
              MM : relativeTimeWithPlural,
              y : 'год',
              yy : relativeTimeWithPlural
          },
          meridiemParse: /ночы|раніцы|дня|вечара/,
          isPM : function (input) {
              return /^(дня|вечара)$/.test(input);
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 4) {
                  return 'ночы';
              } else if (hour < 12) {
                  return 'раніцы';
              } else if (hour < 17) {
                  return 'дня';
              } else {
                  return 'вечара';
              }
          },
          ordinalParse: /\d{1,2}-(і|ы|га)/,
          ordinal: function (number, period) {
              switch (period) {
              case 'M':
              case 'd':
              case 'DDD':
              case 'w':
              case 'W':
                  return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
              case 'D':
                  return number + '-га';
              default:
                  return number;
              }
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return be;

  }));

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : bulgarian (bg)
  //! author : Krasen Borisov : https://github.com/kraz

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var bg = moment.defineLocale('bg', {
          months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
          monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
          weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
          weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
          weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
          longDateFormat : {
              LT : 'H:mm',
              LTS : 'H:mm:ss',
              L : 'D.MM.YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY H:mm',
              LLLL : 'dddd, D MMMM YYYY H:mm'
          },
          calendar : {
              sameDay : '[Днес в] LT',
              nextDay : '[Утре в] LT',
              nextWeek : 'dddd [в] LT',
              lastDay : '[Вчера в] LT',
              lastWeek : function () {
                  switch (this.day()) {
                  case 0:
                  case 3:
                  case 6:
                      return '[В изминалата] dddd [в] LT';
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                      return '[В изминалия] dddd [в] LT';
                  }
              },
              sameElse : 'L'
          },
          relativeTime : {
              future : 'след %s',
              past : 'преди %s',
              s : 'няколко секунди',
              m : 'минута',
              mm : '%d минути',
              h : 'час',
              hh : '%d часа',
              d : 'ден',
              dd : '%d дни',
              M : 'месец',
              MM : '%d месеца',
              y : 'година',
              yy : '%d години'
          },
          ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
          ordinal : function (number) {
              var lastDigit = number % 10,
                  last2Digits = number % 100;
              if (number === 0) {
                  return number + '-ев';
              } else if (last2Digits === 0) {
                  return number + '-ен';
              } else if (last2Digits > 10 && last2Digits < 20) {
                  return number + '-ти';
              } else if (lastDigit === 1) {
                  return number + '-ви';
              } else if (lastDigit === 2) {
                  return number + '-ри';
              } else if (lastDigit === 7 || lastDigit === 8) {
                  return number + '-ми';
              } else {
                  return number + '-ти';
              }
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return bg;

  }));

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Bengali (bn)
  //! author : Kaushik Gandhi : https://github.com/kaushikgandhi

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var symbolMap = {
          '1': '১',
          '2': '২',
          '3': '৩',
          '4': '৪',
          '5': '৫',
          '6': '৬',
          '7': '৭',
          '8': '৮',
          '9': '৯',
          '0': '০'
      },
      numberMap = {
          '১': '1',
          '২': '2',
          '৩': '3',
          '৪': '4',
          '৫': '5',
          '৬': '6',
          '৭': '7',
          '৮': '8',
          '৯': '9',
          '০': '0'
      };

      var bn = moment.defineLocale('bn', {
          months : 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
          monthsShort : 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split('_'),
          weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রবার_শনিবার'.split('_'),
          weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্র_শনি'.split('_'),
          weekdaysMin : 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split('_'),
          longDateFormat : {
              LT : 'A h:mm সময়',
              LTS : 'A h:mm:ss সময়',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY, A h:mm সময়',
              LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
          },
          calendar : {
              sameDay : '[আজ] LT',
              nextDay : '[আগামীকাল] LT',
              nextWeek : 'dddd, LT',
              lastDay : '[গতকাল] LT',
              lastWeek : '[গত] dddd, LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s পরে',
              past : '%s আগে',
              s : 'কয়েক সেকেন্ড',
              m : 'এক মিনিট',
              mm : '%d মিনিট',
              h : 'এক ঘন্টা',
              hh : '%d ঘন্টা',
              d : 'এক দিন',
              dd : '%d দিন',
              M : 'এক মাস',
              MM : '%d মাস',
              y : 'এক বছর',
              yy : '%d বছর'
          },
          preparse: function (string) {
              return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                  return numberMap[match];
              });
          },
          postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                  return symbolMap[match];
              });
          },
          meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if ((meridiem === 'রাত' && hour >= 4) ||
                      (meridiem === 'দুপুর' && hour < 5) ||
                      meridiem === 'বিকাল') {
                  return hour + 12;
              } else {
                  return hour;
              }
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 4) {
                  return 'রাত';
              } else if (hour < 10) {
                  return 'সকাল';
              } else if (hour < 17) {
                  return 'দুপুর';
              } else if (hour < 20) {
                  return 'বিকাল';
              } else {
                  return 'রাত';
              }
          },
          week : {
              dow : 0, // Sunday is the first day of the week.
              doy : 6  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return bn;

  }));

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : tibetan (bo)
  //! author : Thupten N. Chakrishar : https://github.com/vajradog

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var symbolMap = {
          '1': '༡',
          '2': '༢',
          '3': '༣',
          '4': '༤',
          '5': '༥',
          '6': '༦',
          '7': '༧',
          '8': '༨',
          '9': '༩',
          '0': '༠'
      },
      numberMap = {
          '༡': '1',
          '༢': '2',
          '༣': '3',
          '༤': '4',
          '༥': '5',
          '༦': '6',
          '༧': '7',
          '༨': '8',
          '༩': '9',
          '༠': '0'
      };

      var bo = moment.defineLocale('bo', {
          months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
          monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
          weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
          weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
          weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
          longDateFormat : {
              LT : 'A h:mm',
              LTS : 'A h:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY, A h:mm',
              LLLL : 'dddd, D MMMM YYYY, A h:mm'
          },
          calendar : {
              sameDay : '[དི་རིང] LT',
              nextDay : '[སང་ཉིན] LT',
              nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
              lastDay : '[ཁ་སང] LT',
              lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s ལ་',
              past : '%s སྔན་ལ',
              s : 'ལམ་སང',
              m : 'སྐར་མ་གཅིག',
              mm : '%d སྐར་མ',
              h : 'ཆུ་ཚོད་གཅིག',
              hh : '%d ཆུ་ཚོད',
              d : 'ཉིན་གཅིག',
              dd : '%d ཉིན་',
              M : 'ཟླ་བ་གཅིག',
              MM : '%d ཟླ་བ',
              y : 'ལོ་གཅིག',
              yy : '%d ལོ'
          },
          preparse: function (string) {
              return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                  return numberMap[match];
              });
          },
          postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                  return symbolMap[match];
              });
          },
          meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
                      (meridiem === 'ཉིན་གུང' && hour < 5) ||
                      meridiem === 'དགོང་དག') {
                  return hour + 12;
              } else {
                  return hour;
              }
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 4) {
                  return 'མཚན་མོ';
              } else if (hour < 10) {
                  return 'ཞོགས་ཀས';
              } else if (hour < 17) {
                  return 'ཉིན་གུང';
              } else if (hour < 20) {
                  return 'དགོང་དག';
              } else {
                  return 'མཚན་མོ';
              }
          },
          week : {
              dow : 0, // Sunday is the first day of the week.
              doy : 6  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return bo;

  }));

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : breton (br)
  //! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function relativeTimeWithMutation(number, withoutSuffix, key) {
          var format = {
              'mm': 'munutenn',
              'MM': 'miz',
              'dd': 'devezh'
          };
          return number + ' ' + mutation(format[key], number);
      }
      function specialMutationForYears(number) {
          switch (lastNumber(number)) {
          case 1:
          case 3:
          case 4:
          case 5:
          case 9:
              return number + ' bloaz';
          default:
              return number + ' vloaz';
          }
      }
      function lastNumber(number) {
          if (number > 9) {
              return lastNumber(number % 10);
          }
          return number;
      }
      function mutation(text, number) {
          if (number === 2) {
              return softMutation(text);
          }
          return text;
      }
      function softMutation(text) {
          var mutationTable = {
              'm': 'v',
              'b': 'v',
              'd': 'z'
          };
          if (mutationTable[text.charAt(0)] === undefined) {
              return text;
          }
          return mutationTable[text.charAt(0)] + text.substring(1);
      }

      var br = moment.defineLocale('br', {
          months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
          monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
          weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
          weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
          weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'h[e]mm A',
              LTS : 'h[e]mm:ss A',
              L : 'DD/MM/YYYY',
              LL : 'D [a viz] MMMM YYYY',
              LLL : 'D [a viz] MMMM YYYY h[e]mm A',
              LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
          },
          calendar : {
              sameDay : '[Hiziv da] LT',
              nextDay : '[Warc\'hoazh da] LT',
              nextWeek : 'dddd [da] LT',
              lastDay : '[Dec\'h da] LT',
              lastWeek : 'dddd [paset da] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'a-benn %s',
              past : '%s \'zo',
              s : 'un nebeud segondennoù',
              m : 'ur vunutenn',
              mm : relativeTimeWithMutation,
              h : 'un eur',
              hh : '%d eur',
              d : 'un devezh',
              dd : relativeTimeWithMutation,
              M : 'ur miz',
              MM : relativeTimeWithMutation,
              y : 'ur bloaz',
              yy : specialMutationForYears
          },
          ordinalParse: /\d{1,2}(añ|vet)/,
          ordinal : function (number) {
              var output = (number === 1) ? 'añ' : 'vet';
              return number + output;
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return br;

  }));

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : bosnian (bs)
  //! author : Nedim Cholich : https://github.com/frontyard
  //! based on (hr) translation by Bojan Marković

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function translate(number, withoutSuffix, key) {
          var result = number + ' ';
          switch (key) {
          case 'm':
              return withoutSuffix ? 'jedna minuta' : 'jedne minute';
          case 'mm':
              if (number === 1) {
                  result += 'minuta';
              } else if (number === 2 || number === 3 || number === 4) {
                  result += 'minute';
              } else {
                  result += 'minuta';
              }
              return result;
          case 'h':
              return withoutSuffix ? 'jedan sat' : 'jednog sata';
          case 'hh':
              if (number === 1) {
                  result += 'sat';
              } else if (number === 2 || number === 3 || number === 4) {
                  result += 'sata';
              } else {
                  result += 'sati';
              }
              return result;
          case 'dd':
              if (number === 1) {
                  result += 'dan';
              } else {
                  result += 'dana';
              }
              return result;
          case 'MM':
              if (number === 1) {
                  result += 'mjesec';
              } else if (number === 2 || number === 3 || number === 4) {
                  result += 'mjeseca';
              } else {
                  result += 'mjeseci';
              }
              return result;
          case 'yy':
              if (number === 1) {
                  result += 'godina';
              } else if (number === 2 || number === 3 || number === 4) {
                  result += 'godine';
              } else {
                  result += 'godina';
              }
              return result;
          }
      }

      var bs = moment.defineLocale('bs', {
          months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
          monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
          monthsParseExact: true,
          weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
          weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
          weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'H:mm',
              LTS : 'H:mm:ss',
              L : 'DD. MM. YYYY',
              LL : 'D. MMMM YYYY',
              LLL : 'D. MMMM YYYY H:mm',
              LLLL : 'dddd, D. MMMM YYYY H:mm'
          },
          calendar : {
              sameDay  : '[danas u] LT',
              nextDay  : '[sutra u] LT',
              nextWeek : function () {
                  switch (this.day()) {
                  case 0:
                      return '[u] [nedjelju] [u] LT';
                  case 3:
                      return '[u] [srijedu] [u] LT';
                  case 6:
                      return '[u] [subotu] [u] LT';
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                      return '[u] dddd [u] LT';
                  }
              },
              lastDay  : '[jučer u] LT',
              lastWeek : function () {
                  switch (this.day()) {
                  case 0:
                  case 3:
                      return '[prošlu] dddd [u] LT';
                  case 6:
                      return '[prošle] [subote] [u] LT';
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                      return '[prošli] dddd [u] LT';
                  }
              },
              sameElse : 'L'
          },
          relativeTime : {
              future : 'za %s',
              past   : 'prije %s',
              s      : 'par sekundi',
              m      : translate,
              mm     : translate,
              h      : translate,
              hh     : translate,
              d      : 'dan',
              dd     : translate,
              M      : 'mjesec',
              MM     : translate,
              y      : 'godinu',
              yy     : translate
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return bs;

  }));

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : catalan (ca)
  //! author : Juan G. Hurtado : https://github.com/juanghurtado

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var ca = moment.defineLocale('ca', {
          months : 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
          monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
          monthsParseExact : true,
          weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
          weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
          weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'H:mm',
              LTS : 'H:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY H:mm',
              LLLL : 'dddd D MMMM YYYY H:mm'
          },
          calendar : {
              sameDay : function () {
                  return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
              },
              nextDay : function () {
                  return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
              },
              nextWeek : function () {
                  return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
              },
              lastDay : function () {
                  return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
              },
              lastWeek : function () {
                  return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
              },
              sameElse : 'L'
          },
          relativeTime : {
              future : 'en %s',
              past : 'fa %s',
              s : 'uns segons',
              m : 'un minut',
              mm : '%d minuts',
              h : 'una hora',
              hh : '%d hores',
              d : 'un dia',
              dd : '%d dies',
              M : 'un mes',
              MM : '%d mesos',
              y : 'un any',
              yy : '%d anys'
          },
          ordinalParse: /\d{1,2}(r|n|t|è|a)/,
          ordinal : function (number, period) {
              var output = (number === 1) ? 'r' :
                  (number === 2) ? 'n' :
                  (number === 3) ? 'r' :
                  (number === 4) ? 't' : 'è';
              if (period === 'w' || period === 'W') {
                  output = 'a';
              }
              return number + output;
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return ca;

  }));

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : czech (cs)
  //! author : petrbela : https://github.com/petrbela

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
          monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
      function plural(n) {
          return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
      }
      function translate(number, withoutSuffix, key, isFuture) {
          var result = number + ' ';
          switch (key) {
          case 's':  // a few seconds / in a few seconds / a few seconds ago
              return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
          case 'm':  // a minute / in a minute / a minute ago
              return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
          case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
              if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? 'minuty' : 'minut');
              } else {
                  return result + 'minutami';
              }
              break;
          case 'h':  // an hour / in an hour / an hour ago
              return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
          case 'hh': // 9 hours / in 9 hours / 9 hours ago
              if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? 'hodiny' : 'hodin');
              } else {
                  return result + 'hodinami';
              }
              break;
          case 'd':  // a day / in a day / a day ago
              return (withoutSuffix || isFuture) ? 'den' : 'dnem';
          case 'dd': // 9 days / in 9 days / 9 days ago
              if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? 'dny' : 'dní');
              } else {
                  return result + 'dny';
              }
              break;
          case 'M':  // a month / in a month / a month ago
              return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
          case 'MM': // 9 months / in 9 months / 9 months ago
              if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? 'měsíce' : 'měsíců');
              } else {
                  return result + 'měsíci';
              }
              break;
          case 'y':  // a year / in a year / a year ago
              return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
          case 'yy': // 9 years / in 9 years / 9 years ago
              if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? 'roky' : 'let');
              } else {
                  return result + 'lety';
              }
              break;
          }
      }

      var cs = moment.defineLocale('cs', {
          months : months,
          monthsShort : monthsShort,
          monthsParse : (function (months, monthsShort) {
              var i, _monthsParse = [];
              for (i = 0; i < 12; i++) {
                  // use custom parser to solve problem with July (červenec)
                  _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
              }
              return _monthsParse;
          }(months, monthsShort)),
          shortMonthsParse : (function (monthsShort) {
              var i, _shortMonthsParse = [];
              for (i = 0; i < 12; i++) {
                  _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
              }
              return _shortMonthsParse;
          }(monthsShort)),
          longMonthsParse : (function (months) {
              var i, _longMonthsParse = [];
              for (i = 0; i < 12; i++) {
                  _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
              }
              return _longMonthsParse;
          }(months)),
          weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
          weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
          weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
          longDateFormat : {
              LT: 'H:mm',
              LTS : 'H:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D. MMMM YYYY',
              LLL : 'D. MMMM YYYY H:mm',
              LLLL : 'dddd D. MMMM YYYY H:mm'
          },
          calendar : {
              sameDay: '[dnes v] LT',
              nextDay: '[zítra v] LT',
              nextWeek: function () {
                  switch (this.day()) {
                  case 0:
                      return '[v neděli v] LT';
                  case 1:
                  case 2:
                      return '[v] dddd [v] LT';
                  case 3:
                      return '[ve středu v] LT';
                  case 4:
                      return '[ve čtvrtek v] LT';
                  case 5:
                      return '[v pátek v] LT';
                  case 6:
                      return '[v sobotu v] LT';
                  }
              },
              lastDay: '[včera v] LT',
              lastWeek: function () {
                  switch (this.day()) {
                  case 0:
                      return '[minulou neděli v] LT';
                  case 1:
                  case 2:
                      return '[minulé] dddd [v] LT';
                  case 3:
                      return '[minulou středu v] LT';
                  case 4:
                  case 5:
                      return '[minulý] dddd [v] LT';
                  case 6:
                      return '[minulou sobotu v] LT';
                  }
              },
              sameElse: 'L'
          },
          relativeTime : {
              future : 'za %s',
              past : 'před %s',
              s : translate,
              m : translate,
              mm : translate,
              h : translate,
              hh : translate,
              d : translate,
              dd : translate,
              M : translate,
              MM : translate,
              y : translate,
              yy : translate
          },
          ordinalParse : /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return cs;

  }));

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : chuvash (cv)
  //! author : Anatoly Mironov : https://github.com/mirontoli

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var cv = moment.defineLocale('cv', {
          months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
          monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
          weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
          weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
          weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD-MM-YYYY',
              LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
              LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
              LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
          },
          calendar : {
              sameDay: '[Паян] LT [сехетре]',
              nextDay: '[Ыран] LT [сехетре]',
              lastDay: '[Ӗнер] LT [сехетре]',
              nextWeek: '[Ҫитес] dddd LT [сехетре]',
              lastWeek: '[Иртнӗ] dddd LT [сехетре]',
              sameElse: 'L'
          },
          relativeTime : {
              future : function (output) {
                  var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
                  return output + affix;
              },
              past : '%s каялла',
              s : 'пӗр-ик ҫеккунт',
              m : 'пӗр минут',
              mm : '%d минут',
              h : 'пӗр сехет',
              hh : '%d сехет',
              d : 'пӗр кун',
              dd : '%d кун',
              M : 'пӗр уйӑх',
              MM : '%d уйӑх',
              y : 'пӗр ҫул',
              yy : '%d ҫул'
          },
          ordinalParse: /\d{1,2}-мӗш/,
          ordinal : '%d-мӗш',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return cv;

  }));

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Welsh (cy)
  //! author : Robert Allen

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var cy = moment.defineLocale('cy', {
          months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
          monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
          weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
          weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
          weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
          weekdaysParseExact : true,
          // time formats are the same as en-gb
          longDateFormat: {
              LT: 'HH:mm',
              LTS : 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
              sameDay: '[Heddiw am] LT',
              nextDay: '[Yfory am] LT',
              nextWeek: 'dddd [am] LT',
              lastDay: '[Ddoe am] LT',
              lastWeek: 'dddd [diwethaf am] LT',
              sameElse: 'L'
          },
          relativeTime: {
              future: 'mewn %s',
              past: '%s yn ôl',
              s: 'ychydig eiliadau',
              m: 'munud',
              mm: '%d munud',
              h: 'awr',
              hh: '%d awr',
              d: 'diwrnod',
              dd: '%d diwrnod',
              M: 'mis',
              MM: '%d mis',
              y: 'blwyddyn',
              yy: '%d flynedd'
          },
          ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
          // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
          ordinal: function (number) {
              var b = number,
                  output = '',
                  lookup = [
                      '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                      'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
                  ];
              if (b > 20) {
                  if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                      output = 'fed'; // not 30ain, 70ain or 90ain
                  } else {
                      output = 'ain';
                  }
              } else if (b > 0) {
                  output = lookup[b];
              }
              return number + output;
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return cy;

  }));

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : danish (da)
  //! author : Ulrik Nielsen : https://github.com/mrbase

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var da = moment.defineLocale('da', {
          months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
          monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
          weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
          weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
          weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D. MMMM YYYY',
              LLL : 'D. MMMM YYYY HH:mm',
              LLLL : 'dddd [d.] D. MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[I dag kl.] LT',
              nextDay : '[I morgen kl.] LT',
              nextWeek : 'dddd [kl.] LT',
              lastDay : '[I går kl.] LT',
              lastWeek : '[sidste] dddd [kl] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'om %s',
              past : '%s siden',
              s : 'få sekunder',
              m : 'et minut',
              mm : '%d minutter',
              h : 'en time',
              hh : '%d timer',
              d : 'en dag',
              dd : '%d dage',
              M : 'en måned',
              MM : '%d måneder',
              y : 'et år',
              yy : '%d år'
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return da;

  }));

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : austrian german (de-at)
  //! author : lluchs : https://github.com/lluchs
  //! author: Menelion Elensúle: https://github.com/Oire
  //! author : Martin Groller : https://github.com/MadMG
  //! author : Mikolaj Dadela : https://github.com/mik01aj

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
              'm': ['eine Minute', 'einer Minute'],
              'h': ['eine Stunde', 'einer Stunde'],
              'd': ['ein Tag', 'einem Tag'],
              'dd': [number + ' Tage', number + ' Tagen'],
              'M': ['ein Monat', 'einem Monat'],
              'MM': [number + ' Monate', number + ' Monaten'],
              'y': ['ein Jahr', 'einem Jahr'],
              'yy': [number + ' Jahre', number + ' Jahren']
          };
          return withoutSuffix ? format[key][0] : format[key][1];
      }

      var de_at = moment.defineLocale('de-at', {
          months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
          monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
          monthsParseExact : true,
          weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
          weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
          weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D. MMMM YYYY',
              LLL : 'D. MMMM YYYY HH:mm',
              LLLL : 'dddd, D. MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[heute um] LT [Uhr]',
              sameElse: 'L',
              nextDay: '[morgen um] LT [Uhr]',
              nextWeek: 'dddd [um] LT [Uhr]',
              lastDay: '[gestern um] LT [Uhr]',
              lastWeek: '[letzten] dddd [um] LT [Uhr]'
          },
          relativeTime : {
              future : 'in %s',
              past : 'vor %s',
              s : 'ein paar Sekunden',
              m : processRelativeTime,
              mm : '%d Minuten',
              h : processRelativeTime,
              hh : '%d Stunden',
              d : processRelativeTime,
              dd : processRelativeTime,
              M : processRelativeTime,
              MM : processRelativeTime,
              y : processRelativeTime,
              yy : processRelativeTime
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return de_at;

  }));

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : german (de)
  //! author : lluchs : https://github.com/lluchs
  //! author: Menelion Elensúle: https://github.com/Oire
  //! author : Mikolaj Dadela : https://github.com/mik01aj

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
              'm': ['eine Minute', 'einer Minute'],
              'h': ['eine Stunde', 'einer Stunde'],
              'd': ['ein Tag', 'einem Tag'],
              'dd': [number + ' Tage', number + ' Tagen'],
              'M': ['ein Monat', 'einem Monat'],
              'MM': [number + ' Monate', number + ' Monaten'],
              'y': ['ein Jahr', 'einem Jahr'],
              'yy': [number + ' Jahre', number + ' Jahren']
          };
          return withoutSuffix ? format[key][0] : format[key][1];
      }

      var de = moment.defineLocale('de', {
          months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
          monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
          monthsParseExact : true,
          weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
          weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
          weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D. MMMM YYYY',
              LLL : 'D. MMMM YYYY HH:mm',
              LLLL : 'dddd, D. MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[heute um] LT [Uhr]',
              sameElse: 'L',
              nextDay: '[morgen um] LT [Uhr]',
              nextWeek: 'dddd [um] LT [Uhr]',
              lastDay: '[gestern um] LT [Uhr]',
              lastWeek: '[letzten] dddd [um] LT [Uhr]'
          },
          relativeTime : {
              future : 'in %s',
              past : 'vor %s',
              s : 'ein paar Sekunden',
              m : processRelativeTime,
              mm : '%d Minuten',
              h : processRelativeTime,
              hh : '%d Stunden',
              d : processRelativeTime,
              dd : processRelativeTime,
              M : processRelativeTime,
              MM : processRelativeTime,
              y : processRelativeTime,
              yy : processRelativeTime
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return de;

  }));

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : dhivehi (dv)
  //! author : Jawish Hameed : https://github.com/jawish

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var months = [
          'ޖެނުއަރީ',
          'ފެބްރުއަރީ',
          'މާރިޗު',
          'އޭޕްރީލު',
          'މޭ',
          'ޖޫން',
          'ޖުލައި',
          'އޯގަސްޓު',
          'ސެޕްޓެމްބަރު',
          'އޮކްޓޯބަރު',
          'ނޮވެމްބަރު',
          'ޑިސެމްބަރު'
      ], weekdays = [
          'އާދިއްތަ',
          'ހޯމަ',
          'އަންގާރަ',
          'ބުދަ',
          'ބުރާސްފަތި',
          'ހުކުރު',
          'ހޮނިހިރު'
      ];

      var dv = moment.defineLocale('dv', {
          months : months,
          monthsShort : months,
          weekdays : weekdays,
          weekdaysShort : weekdays,
          weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
          longDateFormat : {

              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'D/M/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D MMMM YYYY HH:mm'
          },
          meridiemParse: /މކ|މފ/,
          isPM : function (input) {
              return 'މފ' === input;
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 12) {
                  return 'މކ';
              } else {
                  return 'މފ';
              }
          },
          calendar : {
              sameDay : '[މިއަދު] LT',
              nextDay : '[މާދަމާ] LT',
              nextWeek : 'dddd LT',
              lastDay : '[އިއްޔެ] LT',
              lastWeek : '[ފާއިތުވި] dddd LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'ތެރޭގައި %s',
              past : 'ކުރިން %s',
              s : 'ސިކުންތުކޮޅެއް',
              m : 'މިނިޓެއް',
              mm : 'މިނިޓު %d',
              h : 'ގަޑިއިރެއް',
              hh : 'ގަޑިއިރު %d',
              d : 'ދުވަހެއް',
              dd : 'ދުވަސް %d',
              M : 'މަހެއް',
              MM : 'މަސް %d',
              y : 'އަހަރެއް',
              yy : 'އަހަރު %d'
          },
          preparse: function (string) {
              return string.replace(/،/g, ',');
          },
          postformat: function (string) {
              return string.replace(/,/g, '،');
          },
          week : {
              dow : 7,  // Sunday is the first day of the week.
              doy : 12  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return dv;

  }));

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : modern greek (el)
  //! author : Aggelos Karalias : https://github.com/mehiel

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';

      function isFunction(input) {
          return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
      }


      var el = moment.defineLocale('el', {
          monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
          monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
          months : function (momentToFormat, format) {
              if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
                  return this._monthsGenitiveEl[momentToFormat.month()];
              } else {
                  return this._monthsNominativeEl[momentToFormat.month()];
              }
          },
          monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
          weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
          weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
          weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
          meridiem : function (hours, minutes, isLower) {
              if (hours > 11) {
                  return isLower ? 'μμ' : 'ΜΜ';
              } else {
                  return isLower ? 'πμ' : 'ΠΜ';
              }
          },
          isPM : function (input) {
              return ((input + '').toLowerCase()[0] === 'μ');
          },
          meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
          longDateFormat : {
              LT : 'h:mm A',
              LTS : 'h:mm:ss A',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY h:mm A',
              LLLL : 'dddd, D MMMM YYYY h:mm A'
          },
          calendarEl : {
              sameDay : '[Σήμερα {}] LT',
              nextDay : '[Αύριο {}] LT',
              nextWeek : 'dddd [{}] LT',
              lastDay : '[Χθες {}] LT',
              lastWeek : function () {
                  switch (this.day()) {
                      case 6:
                          return '[το προηγούμενο] dddd [{}] LT';
                      default:
                          return '[την προηγούμενη] dddd [{}] LT';
                  }
              },
              sameElse : 'L'
          },
          calendar : function (key, mom) {
              var output = this._calendarEl[key],
                  hours = mom && mom.hours();
              if (isFunction(output)) {
                  output = output.apply(mom);
              }
              return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
          },
          relativeTime : {
              future : 'σε %s',
              past : '%s πριν',
              s : 'λίγα δευτερόλεπτα',
              m : 'ένα λεπτό',
              mm : '%d λεπτά',
              h : 'μία ώρα',
              hh : '%d ώρες',
              d : 'μία μέρα',
              dd : '%d μέρες',
              M : 'ένας μήνας',
              MM : '%d μήνες',
              y : 'ένας χρόνος',
              yy : '%d χρόνια'
          },
          ordinalParse: /\d{1,2}η/,
          ordinal: '%dη',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4st is the first week of the year.
          }
      });

      return el;

  }));

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : australian english (en-au)

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var en_au = moment.defineLocale('en-au', {
          months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat : {
              LT : 'h:mm A',
              LTS : 'h:mm:ss A',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY h:mm A',
              LLLL : 'dddd, D MMMM YYYY h:mm A'
          },
          calendar : {
              sameDay : '[Today at] LT',
              nextDay : '[Tomorrow at] LT',
              nextWeek : 'dddd [at] LT',
              lastDay : '[Yesterday at] LT',
              lastWeek : '[Last] dddd [at] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'in %s',
              past : '%s ago',
              s : 'a few seconds',
              m : 'a minute',
              mm : '%d minutes',
              h : 'an hour',
              hh : '%d hours',
              d : 'a day',
              dd : '%d days',
              M : 'a month',
              MM : '%d months',
              y : 'a year',
              yy : '%d years'
          },
          ordinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal : function (number) {
              var b = number % 10,
                  output = (~~(number % 100 / 10) === 1) ? 'th' :
                  (b === 1) ? 'st' :
                  (b === 2) ? 'nd' :
                  (b === 3) ? 'rd' : 'th';
              return number + output;
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return en_au;

  }));

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : canadian english (en-ca)
  //! author : Jonathan Abourbih : https://github.com/jonbca

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var en_ca = moment.defineLocale('en-ca', {
          months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat : {
              LT : 'h:mm A',
              LTS : 'h:mm:ss A',
              L : 'YYYY-MM-DD',
              LL : 'MMMM D, YYYY',
              LLL : 'MMMM D, YYYY h:mm A',
              LLLL : 'dddd, MMMM D, YYYY h:mm A'
          },
          calendar : {
              sameDay : '[Today at] LT',
              nextDay : '[Tomorrow at] LT',
              nextWeek : 'dddd [at] LT',
              lastDay : '[Yesterday at] LT',
              lastWeek : '[Last] dddd [at] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'in %s',
              past : '%s ago',
              s : 'a few seconds',
              m : 'a minute',
              mm : '%d minutes',
              h : 'an hour',
              hh : '%d hours',
              d : 'a day',
              dd : '%d days',
              M : 'a month',
              MM : '%d months',
              y : 'a year',
              yy : '%d years'
          },
          ordinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal : function (number) {
              var b = number % 10,
                  output = (~~(number % 100 / 10) === 1) ? 'th' :
                  (b === 1) ? 'st' :
                  (b === 2) ? 'nd' :
                  (b === 3) ? 'rd' : 'th';
              return number + output;
          }
      });

      return en_ca;

  }));

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : great britain english (en-gb)
  //! author : Chris Gedrim : https://github.com/chrisgedrim

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var en_gb = moment.defineLocale('en-gb', {
          months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[Today at] LT',
              nextDay : '[Tomorrow at] LT',
              nextWeek : 'dddd [at] LT',
              lastDay : '[Yesterday at] LT',
              lastWeek : '[Last] dddd [at] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'in %s',
              past : '%s ago',
              s : 'a few seconds',
              m : 'a minute',
              mm : '%d minutes',
              h : 'an hour',
              hh : '%d hours',
              d : 'a day',
              dd : '%d days',
              M : 'a month',
              MM : '%d months',
              y : 'a year',
              yy : '%d years'
          },
          ordinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal : function (number) {
              var b = number % 10,
                  output = (~~(number % 100 / 10) === 1) ? 'th' :
                  (b === 1) ? 'st' :
                  (b === 2) ? 'nd' :
                  (b === 3) ? 'rd' : 'th';
              return number + output;
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return en_gb;

  }));

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Irish english (en-ie)
  //! author : Chris Cartlidge : https://github.com/chriscartlidge

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var en_ie = moment.defineLocale('en-ie', {
          months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD-MM-YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[Today at] LT',
              nextDay : '[Tomorrow at] LT',
              nextWeek : 'dddd [at] LT',
              lastDay : '[Yesterday at] LT',
              lastWeek : '[Last] dddd [at] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'in %s',
              past : '%s ago',
              s : 'a few seconds',
              m : 'a minute',
              mm : '%d minutes',
              h : 'an hour',
              hh : '%d hours',
              d : 'a day',
              dd : '%d days',
              M : 'a month',
              MM : '%d months',
              y : 'a year',
              yy : '%d years'
          },
          ordinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal : function (number) {
              var b = number % 10,
                  output = (~~(number % 100 / 10) === 1) ? 'th' :
                  (b === 1) ? 'st' :
                  (b === 2) ? 'nd' :
                  (b === 3) ? 'rd' : 'th';
              return number + output;
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return en_ie;

  }));

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : New Zealand english (en-nz)

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var en_nz = moment.defineLocale('en-nz', {
          months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
          monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
          weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
          weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
          longDateFormat : {
              LT : 'h:mm A',
              LTS : 'h:mm:ss A',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY h:mm A',
              LLLL : 'dddd, D MMMM YYYY h:mm A'
          },
          calendar : {
              sameDay : '[Today at] LT',
              nextDay : '[Tomorrow at] LT',
              nextWeek : 'dddd [at] LT',
              lastDay : '[Yesterday at] LT',
              lastWeek : '[Last] dddd [at] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'in %s',
              past : '%s ago',
              s : 'a few seconds',
              m : 'a minute',
              mm : '%d minutes',
              h : 'an hour',
              hh : '%d hours',
              d : 'a day',
              dd : '%d days',
              M : 'a month',
              MM : '%d months',
              y : 'a year',
              yy : '%d years'
          },
          ordinalParse: /\d{1,2}(st|nd|rd|th)/,
          ordinal : function (number) {
              var b = number % 10,
                  output = (~~(number % 100 / 10) === 1) ? 'th' :
                  (b === 1) ? 'st' :
                  (b === 2) ? 'nd' :
                  (b === 3) ? 'rd' : 'th';
              return number + output;
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return en_nz;

  }));

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : esperanto (eo)
  //! author : Colin Dean : https://github.com/colindean
  //! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
  //!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var eo = moment.defineLocale('eo', {
          months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
          monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
          weekdays : 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
          weekdaysShort : 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
          weekdaysMin : 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'YYYY-MM-DD',
              LL : 'D[-an de] MMMM, YYYY',
              LLL : 'D[-an de] MMMM, YYYY HH:mm',
              LLLL : 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
          },
          meridiemParse: /[ap]\.t\.m/i,
          isPM: function (input) {
              return input.charAt(0).toLowerCase() === 'p';
          },
          meridiem : function (hours, minutes, isLower) {
              if (hours > 11) {
                  return isLower ? 'p.t.m.' : 'P.T.M.';
              } else {
                  return isLower ? 'a.t.m.' : 'A.T.M.';
              }
          },
          calendar : {
              sameDay : '[Hodiaŭ je] LT',
              nextDay : '[Morgaŭ je] LT',
              nextWeek : 'dddd [je] LT',
              lastDay : '[Hieraŭ je] LT',
              lastWeek : '[pasinta] dddd [je] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'je %s',
              past : 'antaŭ %s',
              s : 'sekundoj',
              m : 'minuto',
              mm : '%d minutoj',
              h : 'horo',
              hh : '%d horoj',
              d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
              dd : '%d tagoj',
              M : 'monato',
              MM : '%d monatoj',
              y : 'jaro',
              yy : '%d jaroj'
          },
          ordinalParse: /\d{1,2}a/,
          ordinal : '%da',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return eo;

  }));

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : spanish (es)
  //! author : Julio Napurí : https://github.com/julionc

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
          monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

      var es = moment.defineLocale('es', {
          months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
          monthsShort : function (m, format) {
              if (/-MMM-/.test(format)) {
                  return monthsShort[m.month()];
              } else {
                  return monthsShortDot[m.month()];
              }
          },
          monthsParseExact : true,
          weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
          weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
          weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'H:mm',
              LTS : 'H:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D [de] MMMM [de] YYYY',
              LLL : 'D [de] MMMM [de] YYYY H:mm',
              LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
          },
          calendar : {
              sameDay : function () {
                  return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              nextDay : function () {
                  return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              nextWeek : function () {
                  return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              lastDay : function () {
                  return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              lastWeek : function () {
                  return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
              },
              sameElse : 'L'
          },
          relativeTime : {
              future : 'en %s',
              past : 'hace %s',
              s : 'unos segundos',
              m : 'un minuto',
              mm : '%d minutos',
              h : 'una hora',
              hh : '%d horas',
              d : 'un día',
              dd : '%d días',
              M : 'un mes',
              MM : '%d meses',
              y : 'un año',
              yy : '%d años'
          },
          ordinalParse : /\d{1,2}º/,
          ordinal : '%dº',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return es;

  }));

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : estonian (et)
  //! author : Henry Kehlmann : https://github.com/madhenry
  //! improvements : Illimar Tambek : https://github.com/ragulka

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
              's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
              'm' : ['ühe minuti', 'üks minut'],
              'mm': [number + ' minuti', number + ' minutit'],
              'h' : ['ühe tunni', 'tund aega', 'üks tund'],
              'hh': [number + ' tunni', number + ' tundi'],
              'd' : ['ühe päeva', 'üks päev'],
              'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
              'MM': [number + ' kuu', number + ' kuud'],
              'y' : ['ühe aasta', 'aasta', 'üks aasta'],
              'yy': [number + ' aasta', number + ' aastat']
          };
          if (withoutSuffix) {
              return format[key][2] ? format[key][2] : format[key][1];
          }
          return isFuture ? format[key][0] : format[key][1];
      }

      var et = moment.defineLocale('et', {
          months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
          monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
          weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
          weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
          weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
          longDateFormat : {
              LT   : 'H:mm',
              LTS : 'H:mm:ss',
              L    : 'DD.MM.YYYY',
              LL   : 'D. MMMM YYYY',
              LLL  : 'D. MMMM YYYY H:mm',
              LLLL : 'dddd, D. MMMM YYYY H:mm'
          },
          calendar : {
              sameDay  : '[Täna,] LT',
              nextDay  : '[Homme,] LT',
              nextWeek : '[Järgmine] dddd LT',
              lastDay  : '[Eile,] LT',
              lastWeek : '[Eelmine] dddd LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s pärast',
              past   : '%s tagasi',
              s      : processRelativeTime,
              m      : processRelativeTime,
              mm     : processRelativeTime,
              h      : processRelativeTime,
              hh     : processRelativeTime,
              d      : processRelativeTime,
              dd     : '%d päeva',
              M      : processRelativeTime,
              MM     : processRelativeTime,
              y      : processRelativeTime,
              yy     : processRelativeTime
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return et;

  }));

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : euskara (eu)
  //! author : Eneko Illarramendi : https://github.com/eillarra

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var eu = moment.defineLocale('eu', {
          months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
          monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
          monthsParseExact : true,
          weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
          weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
          weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'YYYY-MM-DD',
              LL : 'YYYY[ko] MMMM[ren] D[a]',
              LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
              LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
              l : 'YYYY-M-D',
              ll : 'YYYY[ko] MMM D[a]',
              lll : 'YYYY[ko] MMM D[a] HH:mm',
              llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
          },
          calendar : {
              sameDay : '[gaur] LT[etan]',
              nextDay : '[bihar] LT[etan]',
              nextWeek : 'dddd LT[etan]',
              lastDay : '[atzo] LT[etan]',
              lastWeek : '[aurreko] dddd LT[etan]',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s barru',
              past : 'duela %s',
              s : 'segundo batzuk',
              m : 'minutu bat',
              mm : '%d minutu',
              h : 'ordu bat',
              hh : '%d ordu',
              d : 'egun bat',
              dd : '%d egun',
              M : 'hilabete bat',
              MM : '%d hilabete',
              y : 'urte bat',
              yy : '%d urte'
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return eu;

  }));

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Persian (fa)
  //! author : Ebrahim Byagowi : https://github.com/ebraminio

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var symbolMap = {
          '1': '۱',
          '2': '۲',
          '3': '۳',
          '4': '۴',
          '5': '۵',
          '6': '۶',
          '7': '۷',
          '8': '۸',
          '9': '۹',
          '0': '۰'
      }, numberMap = {
          '۱': '1',
          '۲': '2',
          '۳': '3',
          '۴': '4',
          '۵': '5',
          '۶': '6',
          '۷': '7',
          '۸': '8',
          '۹': '9',
          '۰': '0'
      };

      var fa = moment.defineLocale('fa', {
          months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
          monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
          weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
          weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
          weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          meridiemParse: /قبل از ظهر|بعد از ظهر/,
          isPM: function (input) {
              return /بعد از ظهر/.test(input);
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 12) {
                  return 'قبل از ظهر';
              } else {
                  return 'بعد از ظهر';
              }
          },
          calendar : {
              sameDay : '[امروز ساعت] LT',
              nextDay : '[فردا ساعت] LT',
              nextWeek : 'dddd [ساعت] LT',
              lastDay : '[دیروز ساعت] LT',
              lastWeek : 'dddd [پیش] [ساعت] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'در %s',
              past : '%s پیش',
              s : 'چندین ثانیه',
              m : 'یک دقیقه',
              mm : '%d دقیقه',
              h : 'یک ساعت',
              hh : '%d ساعت',
              d : 'یک روز',
              dd : '%d روز',
              M : 'یک ماه',
              MM : '%d ماه',
              y : 'یک سال',
              yy : '%d سال'
          },
          preparse: function (string) {
              return string.replace(/[۰-۹]/g, function (match) {
                  return numberMap[match];
              }).replace(/،/g, ',');
          },
          postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                  return symbolMap[match];
              }).replace(/,/g, '،');
          },
          ordinalParse: /\d{1,2}م/,
          ordinal : '%dم',
          week : {
              dow : 6, // Saturday is the first day of the week.
              doy : 12 // The week that contains Jan 1st is the first week of the year.
          }
      });

      return fa;

  }));

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : finnish (fi)
  //! author : Tarmo Aidantausta : https://github.com/bleadof

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
          numbersFuture = [
              'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
              numbersPast[7], numbersPast[8], numbersPast[9]
          ];
      function translate(number, withoutSuffix, key, isFuture) {
          var result = '';
          switch (key) {
          case 's':
              return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
          case 'm':
              return isFuture ? 'minuutin' : 'minuutti';
          case 'mm':
              result = isFuture ? 'minuutin' : 'minuuttia';
              break;
          case 'h':
              return isFuture ? 'tunnin' : 'tunti';
          case 'hh':
              result = isFuture ? 'tunnin' : 'tuntia';
              break;
          case 'd':
              return isFuture ? 'päivän' : 'päivä';
          case 'dd':
              result = isFuture ? 'päivän' : 'päivää';
              break;
          case 'M':
              return isFuture ? 'kuukauden' : 'kuukausi';
          case 'MM':
              result = isFuture ? 'kuukauden' : 'kuukautta';
              break;
          case 'y':
              return isFuture ? 'vuoden' : 'vuosi';
          case 'yy':
              result = isFuture ? 'vuoden' : 'vuotta';
              break;
          }
          result = verbalNumber(number, isFuture) + ' ' + result;
          return result;
      }
      function verbalNumber(number, isFuture) {
          return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
      }

      var fi = moment.defineLocale('fi', {
          months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
          monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
          weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
          weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
          weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
          longDateFormat : {
              LT : 'HH.mm',
              LTS : 'HH.mm.ss',
              L : 'DD.MM.YYYY',
              LL : 'Do MMMM[ta] YYYY',
              LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
              LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
              l : 'D.M.YYYY',
              ll : 'Do MMM YYYY',
              lll : 'Do MMM YYYY, [klo] HH.mm',
              llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
          },
          calendar : {
              sameDay : '[tänään] [klo] LT',
              nextDay : '[huomenna] [klo] LT',
              nextWeek : 'dddd [klo] LT',
              lastDay : '[eilen] [klo] LT',
              lastWeek : '[viime] dddd[na] [klo] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s päästä',
              past : '%s sitten',
              s : translate,
              m : translate,
              mm : translate,
              h : translate,
              hh : translate,
              d : translate,
              dd : translate,
              M : translate,
              MM : translate,
              y : translate,
              yy : translate
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return fi;

  }));

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : faroese (fo)
  //! author : Ragnar Johannesen : https://github.com/ragnar123

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var fo = moment.defineLocale('fo', {
          months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
          monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
          weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
          weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
          weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D. MMMM, YYYY HH:mm'
          },
          calendar : {
              sameDay : '[Í dag kl.] LT',
              nextDay : '[Í morgin kl.] LT',
              nextWeek : 'dddd [kl.] LT',
              lastDay : '[Í gjár kl.] LT',
              lastWeek : '[síðstu] dddd [kl] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'um %s',
              past : '%s síðani',
              s : 'fá sekund',
              m : 'ein minutt',
              mm : '%d minuttir',
              h : 'ein tími',
              hh : '%d tímar',
              d : 'ein dagur',
              dd : '%d dagar',
              M : 'ein mánaði',
              MM : '%d mánaðir',
              y : 'eitt ár',
              yy : '%d ár'
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return fo;

  }));

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : canadian french (fr-ca)
  //! author : Jonathan Abourbih : https://github.com/jonbca

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var fr_ca = moment.defineLocale('fr-ca', {
          months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
          monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
          monthsParseExact : true,
          weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
          weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
          weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'YYYY-MM-DD',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[Aujourd\'hui à] LT',
              nextDay: '[Demain à] LT',
              nextWeek: 'dddd [à] LT',
              lastDay: '[Hier à] LT',
              lastWeek: 'dddd [dernier à] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'dans %s',
              past : 'il y a %s',
              s : 'quelques secondes',
              m : 'une minute',
              mm : '%d minutes',
              h : 'une heure',
              hh : '%d heures',
              d : 'un jour',
              dd : '%d jours',
              M : 'un mois',
              MM : '%d mois',
              y : 'un an',
              yy : '%d ans'
          },
          ordinalParse: /\d{1,2}(er|e)/,
          ordinal : function (number) {
              return number + (number === 1 ? 'er' : 'e');
          }
      });

      return fr_ca;

  }));

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : swiss french (fr)
  //! author : Gaspard Bucher : https://github.com/gaspard

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var fr_ch = moment.defineLocale('fr-ch', {
          months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
          monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
          monthsParseExact : true,
          weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
          weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
          weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[Aujourd\'hui à] LT',
              nextDay: '[Demain à] LT',
              nextWeek: 'dddd [à] LT',
              lastDay: '[Hier à] LT',
              lastWeek: 'dddd [dernier à] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'dans %s',
              past : 'il y a %s',
              s : 'quelques secondes',
              m : 'une minute',
              mm : '%d minutes',
              h : 'une heure',
              hh : '%d heures',
              d : 'un jour',
              dd : '%d jours',
              M : 'un mois',
              MM : '%d mois',
              y : 'un an',
              yy : '%d ans'
          },
          ordinalParse: /\d{1,2}(er|e)/,
          ordinal : function (number) {
              return number + (number === 1 ? 'er' : 'e');
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return fr_ch;

  }));

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : french (fr)
  //! author : John Fischer : https://github.com/jfroffice

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var fr = moment.defineLocale('fr', {
          months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
          monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
          monthsParseExact : true,
          weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
          weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
          weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[Aujourd\'hui à] LT',
              nextDay: '[Demain à] LT',
              nextWeek: 'dddd [à] LT',
              lastDay: '[Hier à] LT',
              lastWeek: 'dddd [dernier à] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'dans %s',
              past : 'il y a %s',
              s : 'quelques secondes',
              m : 'une minute',
              mm : '%d minutes',
              h : 'une heure',
              hh : '%d heures',
              d : 'un jour',
              dd : '%d jours',
              M : 'un mois',
              MM : '%d mois',
              y : 'un an',
              yy : '%d ans'
          },
          ordinalParse: /\d{1,2}(er|)/,
          ordinal : function (number) {
              return number + (number === 1 ? 'er' : '');
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return fr;

  }));

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : frisian (fy)
  //! author : Robin van der Vliet : https://github.com/robin0van0der0v

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
          monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

      var fy = moment.defineLocale('fy', {
          months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
          monthsShort : function (m, format) {
              if (/-MMM-/.test(format)) {
                  return monthsShortWithoutDots[m.month()];
              } else {
                  return monthsShortWithDots[m.month()];
              }
          },
          monthsParseExact : true,
          weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
          weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
          weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD-MM-YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[hjoed om] LT',
              nextDay: '[moarn om] LT',
              nextWeek: 'dddd [om] LT',
              lastDay: '[juster om] LT',
              lastWeek: '[ôfrûne] dddd [om] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'oer %s',
              past : '%s lyn',
              s : 'in pear sekonden',
              m : 'ien minút',
              mm : '%d minuten',
              h : 'ien oere',
              hh : '%d oeren',
              d : 'ien dei',
              dd : '%d dagen',
              M : 'ien moanne',
              MM : '%d moannen',
              y : 'ien jier',
              yy : '%d jierren'
          },
          ordinalParse: /\d{1,2}(ste|de)/,
          ordinal : function (number) {
              return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return fy;

  }));

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : great britain scottish gealic (gd)
  //! author : Jon Ashdown : https://github.com/jonashdown

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var months = [
          'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
      ];

      var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

      var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

      var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

      var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

      var gd = moment.defineLocale('gd', {
          months : months,
          monthsShort : monthsShort,
          monthsParseExact : true,
          weekdays : weekdays,
          weekdaysShort : weekdaysShort,
          weekdaysMin : weekdaysMin,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[An-diugh aig] LT',
              nextDay : '[A-màireach aig] LT',
              nextWeek : 'dddd [aig] LT',
              lastDay : '[An-dè aig] LT',
              lastWeek : 'dddd [seo chaidh] [aig] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'ann an %s',
              past : 'bho chionn %s',
              s : 'beagan diogan',
              m : 'mionaid',
              mm : '%d mionaidean',
              h : 'uair',
              hh : '%d uairean',
              d : 'latha',
              dd : '%d latha',
              M : 'mìos',
              MM : '%d mìosan',
              y : 'bliadhna',
              yy : '%d bliadhna'
          },
          ordinalParse : /\d{1,2}(d|na|mh)/,
          ordinal : function (number) {
              var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
              return number + output;
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return gd;

  }));

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : galician (gl)
  //! author : Juan G. Hurtado : https://github.com/juanghurtado

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var gl = moment.defineLocale('gl', {
          months : 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),
          monthsShort : 'Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),
          monthsParseExact: true,
          weekdays : 'Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado'.split('_'),
          weekdaysShort : 'Dom._Lun._Mar._Mér._Xov._Ven._Sáb.'.split('_'),
          weekdaysMin : 'Do_Lu_Ma_Mé_Xo_Ve_Sá'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'H:mm',
              LTS : 'H:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY H:mm',
              LLLL : 'dddd D MMMM YYYY H:mm'
          },
          calendar : {
              sameDay : function () {
                  return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
              },
              nextDay : function () {
                  return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
              },
              nextWeek : function () {
                  return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
              },
              lastDay : function () {
                  return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
              },
              lastWeek : function () {
                  return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
              },
              sameElse : 'L'
          },
          relativeTime : {
              future : function (str) {
                  if (str === 'uns segundos') {
                      return 'nuns segundos';
                  }
                  return 'en ' + str;
              },
              past : 'hai %s',
              s : 'uns segundos',
              m : 'un minuto',
              mm : '%d minutos',
              h : 'unha hora',
              hh : '%d horas',
              d : 'un día',
              dd : '%d días',
              M : 'un mes',
              MM : '%d meses',
              y : 'un ano',
              yy : '%d anos'
          },
          ordinalParse : /\d{1,2}º/,
          ordinal : '%dº',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return gl;

  }));

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Hebrew (he)
  //! author : Tomer Cohen : https://github.com/tomer
  //! author : Moshe Simantov : https://github.com/DevelopmentIL
  //! author : Tal Ater : https://github.com/TalAter

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var he = moment.defineLocale('he', {
          months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
          monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
          weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
          weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
          weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D [ב]MMMM YYYY',
              LLL : 'D [ב]MMMM YYYY HH:mm',
              LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
              l : 'D/M/YYYY',
              ll : 'D MMM YYYY',
              lll : 'D MMM YYYY HH:mm',
              llll : 'ddd, D MMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[היום ב־]LT',
              nextDay : '[מחר ב־]LT',
              nextWeek : 'dddd [בשעה] LT',
              lastDay : '[אתמול ב־]LT',
              lastWeek : '[ביום] dddd [האחרון בשעה] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'בעוד %s',
              past : 'לפני %s',
              s : 'מספר שניות',
              m : 'דקה',
              mm : '%d דקות',
              h : 'שעה',
              hh : function (number) {
                  if (number === 2) {
                      return 'שעתיים';
                  }
                  return number + ' שעות';
              },
              d : 'יום',
              dd : function (number) {
                  if (number === 2) {
                      return 'יומיים';
                  }
                  return number + ' ימים';
              },
              M : 'חודש',
              MM : function (number) {
                  if (number === 2) {
                      return 'חודשיים';
                  }
                  return number + ' חודשים';
              },
              y : 'שנה',
              yy : function (number) {
                  if (number === 2) {
                      return 'שנתיים';
                  } else if (number % 10 === 0 && number !== 10) {
                      return number + ' שנה';
                  }
                  return number + ' שנים';
              }
          },
          meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
          isPM : function (input) {
              return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 5) {
                  return 'לפנות בוקר';
              } else if (hour < 10) {
                  return 'בבוקר';
              } else if (hour < 12) {
                  return isLower ? 'לפנה"צ' : 'לפני הצהריים';
              } else if (hour < 18) {
                  return isLower ? 'אחה"צ' : 'אחרי הצהריים';
              } else {
                  return 'בערב';
              }
          }
      });

      return he;

  }));

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : hindi (hi)
  //! author : Mayank Singhal : https://github.com/mayanksinghal

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var symbolMap = {
          '1': '१',
          '2': '२',
          '3': '३',
          '4': '४',
          '5': '५',
          '6': '६',
          '7': '७',
          '8': '८',
          '9': '९',
          '0': '०'
      },
      numberMap = {
          '१': '1',
          '२': '2',
          '३': '3',
          '४': '4',
          '५': '5',
          '६': '6',
          '७': '7',
          '८': '8',
          '९': '9',
          '०': '0'
      };

      var hi = moment.defineLocale('hi', {
          months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
          monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
          monthsParseExact: true,
          weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
          weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
          weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
          longDateFormat : {
              LT : 'A h:mm बजे',
              LTS : 'A h:mm:ss बजे',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY, A h:mm बजे',
              LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
          },
          calendar : {
              sameDay : '[आज] LT',
              nextDay : '[कल] LT',
              nextWeek : 'dddd, LT',
              lastDay : '[कल] LT',
              lastWeek : '[पिछले] dddd, LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s में',
              past : '%s पहले',
              s : 'कुछ ही क्षण',
              m : 'एक मिनट',
              mm : '%d मिनट',
              h : 'एक घंटा',
              hh : '%d घंटे',
              d : 'एक दिन',
              dd : '%d दिन',
              M : 'एक महीने',
              MM : '%d महीने',
              y : 'एक वर्ष',
              yy : '%d वर्ष'
          },
          preparse: function (string) {
              return string.replace(/[१२३४५६७८९०]/g, function (match) {
                  return numberMap[match];
              });
          },
          postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                  return symbolMap[match];
              });
          },
          // Hindi notation for meridiems are quite fuzzy in practice. While there exists
          // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
          meridiemParse: /रात|सुबह|दोपहर|शाम/,
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === 'रात') {
                  return hour < 4 ? hour : hour + 12;
              } else if (meridiem === 'सुबह') {
                  return hour;
              } else if (meridiem === 'दोपहर') {
                  return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === 'शाम') {
                  return hour + 12;
              }
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 4) {
                  return 'रात';
              } else if (hour < 10) {
                  return 'सुबह';
              } else if (hour < 17) {
                  return 'दोपहर';
              } else if (hour < 20) {
                  return 'शाम';
              } else {
                  return 'रात';
              }
          },
          week : {
              dow : 0, // Sunday is the first day of the week.
              doy : 6  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return hi;

  }));

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : hrvatski (hr)
  //! author : Bojan Marković : https://github.com/bmarkovic

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function translate(number, withoutSuffix, key) {
          var result = number + ' ';
          switch (key) {
          case 'm':
              return withoutSuffix ? 'jedna minuta' : 'jedne minute';
          case 'mm':
              if (number === 1) {
                  result += 'minuta';
              } else if (number === 2 || number === 3 || number === 4) {
                  result += 'minute';
              } else {
                  result += 'minuta';
              }
              return result;
          case 'h':
              return withoutSuffix ? 'jedan sat' : 'jednog sata';
          case 'hh':
              if (number === 1) {
                  result += 'sat';
              } else if (number === 2 || number === 3 || number === 4) {
                  result += 'sata';
              } else {
                  result += 'sati';
              }
              return result;
          case 'dd':
              if (number === 1) {
                  result += 'dan';
              } else {
                  result += 'dana';
              }
              return result;
          case 'MM':
              if (number === 1) {
                  result += 'mjesec';
              } else if (number === 2 || number === 3 || number === 4) {
                  result += 'mjeseca';
              } else {
                  result += 'mjeseci';
              }
              return result;
          case 'yy':
              if (number === 1) {
                  result += 'godina';
              } else if (number === 2 || number === 3 || number === 4) {
                  result += 'godine';
              } else {
                  result += 'godina';
              }
              return result;
          }
      }

      var hr = moment.defineLocale('hr', {
          months : {
              format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
              standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
          },
          monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
          monthsParseExact: true,
          weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
          weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
          weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'H:mm',
              LTS : 'H:mm:ss',
              L : 'DD. MM. YYYY',
              LL : 'D. MMMM YYYY',
              LLL : 'D. MMMM YYYY H:mm',
              LLLL : 'dddd, D. MMMM YYYY H:mm'
          },
          calendar : {
              sameDay  : '[danas u] LT',
              nextDay  : '[sutra u] LT',
              nextWeek : function () {
                  switch (this.day()) {
                  case 0:
                      return '[u] [nedjelju] [u] LT';
                  case 3:
                      return '[u] [srijedu] [u] LT';
                  case 6:
                      return '[u] [subotu] [u] LT';
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                      return '[u] dddd [u] LT';
                  }
              },
              lastDay  : '[jučer u] LT',
              lastWeek : function () {
                  switch (this.day()) {
                  case 0:
                  case 3:
                      return '[prošlu] dddd [u] LT';
                  case 6:
                      return '[prošle] [subote] [u] LT';
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                      return '[prošli] dddd [u] LT';
                  }
              },
              sameElse : 'L'
          },
          relativeTime : {
              future : 'za %s',
              past   : 'prije %s',
              s      : 'par sekundi',
              m      : translate,
              mm     : translate,
              h      : translate,
              hh     : translate,
              d      : 'dan',
              dd     : translate,
              M      : 'mjesec',
              MM     : translate,
              y      : 'godinu',
              yy     : translate
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return hr;

  }));

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : hungarian (hu)
  //! author : Adam Brunner : https://github.com/adambrunner

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
      function translate(number, withoutSuffix, key, isFuture) {
          var num = number,
              suffix;
          switch (key) {
          case 's':
              return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
          case 'm':
              return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
          case 'mm':
              return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
          case 'h':
              return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
          case 'hh':
              return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
          case 'd':
              return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
          case 'dd':
              return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
          case 'M':
              return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
          case 'MM':
              return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
          case 'y':
              return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
          case 'yy':
              return num + (isFuture || withoutSuffix ? ' év' : ' éve');
          }
          return '';
      }
      function week(isFuture) {
          return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
      }

      var hu = moment.defineLocale('hu', {
          months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
          monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
          weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
          weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
          weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
          longDateFormat : {
              LT : 'H:mm',
              LTS : 'H:mm:ss',
              L : 'YYYY.MM.DD.',
              LL : 'YYYY. MMMM D.',
              LLL : 'YYYY. MMMM D. H:mm',
              LLLL : 'YYYY. MMMM D., dddd H:mm'
          },
          meridiemParse: /de|du/i,
          isPM: function (input) {
              return input.charAt(1).toLowerCase() === 'u';
          },
          meridiem : function (hours, minutes, isLower) {
              if (hours < 12) {
                  return isLower === true ? 'de' : 'DE';
              } else {
                  return isLower === true ? 'du' : 'DU';
              }
          },
          calendar : {
              sameDay : '[ma] LT[-kor]',
              nextDay : '[holnap] LT[-kor]',
              nextWeek : function () {
                  return week.call(this, true);
              },
              lastDay : '[tegnap] LT[-kor]',
              lastWeek : function () {
                  return week.call(this, false);
              },
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s múlva',
              past : '%s',
              s : translate,
              m : translate,
              mm : translate,
              h : translate,
              hh : translate,
              d : translate,
              dd : translate,
              M : translate,
              MM : translate,
              y : translate,
              yy : translate
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return hu;

  }));

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Armenian (hy-am)
  //! author : Armendarabyan : https://github.com/armendarabyan

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var hy_am = moment.defineLocale('hy-am', {
          months : {
              format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
              standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
          },
          monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
          weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
          weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
          weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY թ.',
              LLL : 'D MMMM YYYY թ., HH:mm',
              LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
          },
          calendar : {
              sameDay: '[այսօր] LT',
              nextDay: '[վաղը] LT',
              lastDay: '[երեկ] LT',
              nextWeek: function () {
                  return 'dddd [օրը ժամը] LT';
              },
              lastWeek: function () {
                  return '[անցած] dddd [օրը ժամը] LT';
              },
              sameElse: 'L'
          },
          relativeTime : {
              future : '%s հետո',
              past : '%s առաջ',
              s : 'մի քանի վայրկյան',
              m : 'րոպե',
              mm : '%d րոպե',
              h : 'ժամ',
              hh : '%d ժամ',
              d : 'օր',
              dd : '%d օր',
              M : 'ամիս',
              MM : '%d ամիս',
              y : 'տարի',
              yy : '%d տարի'
          },
          meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
          isPM: function (input) {
              return /^(ցերեկվա|երեկոյան)$/.test(input);
          },
          meridiem : function (hour) {
              if (hour < 4) {
                  return 'գիշերվա';
              } else if (hour < 12) {
                  return 'առավոտվա';
              } else if (hour < 17) {
                  return 'ցերեկվա';
              } else {
                  return 'երեկոյան';
              }
          },
          ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
          ordinal: function (number, period) {
              switch (period) {
              case 'DDD':
              case 'w':
              case 'W':
              case 'DDDo':
                  if (number === 1) {
                      return number + '-ին';
                  }
                  return number + '-րդ';
              default:
                  return number;
              }
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return hy_am;

  }));

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Bahasa Indonesia (id)
  //! author : Mohammad Satrio Utomo : https://github.com/tyok
  //! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var id = moment.defineLocale('id', {
          months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
          monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
          weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
          weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
          weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
          longDateFormat : {
              LT : 'HH.mm',
              LTS : 'HH.mm.ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY [pukul] HH.mm',
              LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
          },
          meridiemParse: /pagi|siang|sore|malam/,
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === 'pagi') {
                  return hour;
              } else if (meridiem === 'siang') {
                  return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === 'sore' || meridiem === 'malam') {
                  return hour + 12;
              }
          },
          meridiem : function (hours, minutes, isLower) {
              if (hours < 11) {
                  return 'pagi';
              } else if (hours < 15) {
                  return 'siang';
              } else if (hours < 19) {
                  return 'sore';
              } else {
                  return 'malam';
              }
          },
          calendar : {
              sameDay : '[Hari ini pukul] LT',
              nextDay : '[Besok pukul] LT',
              nextWeek : 'dddd [pukul] LT',
              lastDay : '[Kemarin pukul] LT',
              lastWeek : 'dddd [lalu pukul] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'dalam %s',
              past : '%s yang lalu',
              s : 'beberapa detik',
              m : 'semenit',
              mm : '%d menit',
              h : 'sejam',
              hh : '%d jam',
              d : 'sehari',
              dd : '%d hari',
              M : 'sebulan',
              MM : '%d bulan',
              y : 'setahun',
              yy : '%d tahun'
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return id;

  }));

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : icelandic (is)
  //! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function plural(n) {
          if (n % 100 === 11) {
              return true;
          } else if (n % 10 === 1) {
              return false;
          }
          return true;
      }
      function translate(number, withoutSuffix, key, isFuture) {
          var result = number + ' ';
          switch (key) {
          case 's':
              return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
          case 'm':
              return withoutSuffix ? 'mínúta' : 'mínútu';
          case 'mm':
              if (plural(number)) {
                  return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
              } else if (withoutSuffix) {
                  return result + 'mínúta';
              }
              return result + 'mínútu';
          case 'hh':
              if (plural(number)) {
                  return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
              }
              return result + 'klukkustund';
          case 'd':
              if (withoutSuffix) {
                  return 'dagur';
              }
              return isFuture ? 'dag' : 'degi';
          case 'dd':
              if (plural(number)) {
                  if (withoutSuffix) {
                      return result + 'dagar';
                  }
                  return result + (isFuture ? 'daga' : 'dögum');
              } else if (withoutSuffix) {
                  return result + 'dagur';
              }
              return result + (isFuture ? 'dag' : 'degi');
          case 'M':
              if (withoutSuffix) {
                  return 'mánuður';
              }
              return isFuture ? 'mánuð' : 'mánuði';
          case 'MM':
              if (plural(number)) {
                  if (withoutSuffix) {
                      return result + 'mánuðir';
                  }
                  return result + (isFuture ? 'mánuði' : 'mánuðum');
              } else if (withoutSuffix) {
                  return result + 'mánuður';
              }
              return result + (isFuture ? 'mánuð' : 'mánuði');
          case 'y':
              return withoutSuffix || isFuture ? 'ár' : 'ári';
          case 'yy':
              if (plural(number)) {
                  return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
              }
              return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
          }
      }

      var is = moment.defineLocale('is', {
          months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
          monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
          weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
          weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
          weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
          longDateFormat : {
              LT : 'H:mm',
              LTS : 'H:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D. MMMM YYYY',
              LLL : 'D. MMMM YYYY [kl.] H:mm',
              LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
          },
          calendar : {
              sameDay : '[í dag kl.] LT',
              nextDay : '[á morgun kl.] LT',
              nextWeek : 'dddd [kl.] LT',
              lastDay : '[í gær kl.] LT',
              lastWeek : '[síðasta] dddd [kl.] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'eftir %s',
              past : 'fyrir %s síðan',
              s : translate,
              m : translate,
              mm : translate,
              h : 'klukkustund',
              hh : translate,
              d : translate,
              dd : translate,
              M : translate,
              MM : translate,
              y : translate,
              yy : translate
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return is;

  }));

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : italian (it)
  //! author : Lorenzo : https://github.com/aliem
  //! author: Mattia Larentis: https://github.com/nostalgiaz

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var it = moment.defineLocale('it', {
          months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
          monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
          weekdays : 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
          weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
          weekdaysMin : 'Do_Lu_Ma_Me_Gi_Ve_Sa'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[Oggi alle] LT',
              nextDay: '[Domani alle] LT',
              nextWeek: 'dddd [alle] LT',
              lastDay: '[Ieri alle] LT',
              lastWeek: function () {
                  switch (this.day()) {
                      case 0:
                          return '[la scorsa] dddd [alle] LT';
                      default:
                          return '[lo scorso] dddd [alle] LT';
                  }
              },
              sameElse: 'L'
          },
          relativeTime : {
              future : function (s) {
                  return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
              },
              past : '%s fa',
              s : 'alcuni secondi',
              m : 'un minuto',
              mm : '%d minuti',
              h : 'un\'ora',
              hh : '%d ore',
              d : 'un giorno',
              dd : '%d giorni',
              M : 'un mese',
              MM : '%d mesi',
              y : 'un anno',
              yy : '%d anni'
          },
          ordinalParse : /\d{1,2}º/,
          ordinal: '%dº',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return it;

  }));

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : japanese (ja)
  //! author : LI Long : https://github.com/baryon

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var ja = moment.defineLocale('ja', {
          months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
          monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
          weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
          weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
          weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
          longDateFormat : {
              LT : 'Ah時m分',
              LTS : 'Ah時m分s秒',
              L : 'YYYY/MM/DD',
              LL : 'YYYY年M月D日',
              LLL : 'YYYY年M月D日Ah時m分',
              LLLL : 'YYYY年M月D日Ah時m分 dddd'
          },
          meridiemParse: /午前|午後/i,
          isPM : function (input) {
              return input === '午後';
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 12) {
                  return '午前';
              } else {
                  return '午後';
              }
          },
          calendar : {
              sameDay : '[今日] LT',
              nextDay : '[明日] LT',
              nextWeek : '[来週]dddd LT',
              lastDay : '[昨日] LT',
              lastWeek : '[前週]dddd LT',
              sameElse : 'L'
          },
          ordinalParse : /\d{1,2}日/,
          ordinal : function (number, period) {
              switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                  return number + '日';
              default:
                  return number;
              }
          },
          relativeTime : {
              future : '%s後',
              past : '%s前',
              s : '数秒',
              m : '1分',
              mm : '%d分',
              h : '1時間',
              hh : '%d時間',
              d : '1日',
              dd : '%d日',
              M : '1ヶ月',
              MM : '%dヶ月',
              y : '1年',
              yy : '%d年'
          }
      });

      return ja;

  }));

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Boso Jowo (jv)
  //! author : Rony Lantip : https://github.com/lantip
  //! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var jv = moment.defineLocale('jv', {
          months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
          monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
          weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
          weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
          weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
          longDateFormat : {
              LT : 'HH.mm',
              LTS : 'HH.mm.ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY [pukul] HH.mm',
              LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
          },
          meridiemParse: /enjing|siyang|sonten|ndalu/,
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === 'enjing') {
                  return hour;
              } else if (meridiem === 'siyang') {
                  return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                  return hour + 12;
              }
          },
          meridiem : function (hours, minutes, isLower) {
              if (hours < 11) {
                  return 'enjing';
              } else if (hours < 15) {
                  return 'siyang';
              } else if (hours < 19) {
                  return 'sonten';
              } else {
                  return 'ndalu';
              }
          },
          calendar : {
              sameDay : '[Dinten puniko pukul] LT',
              nextDay : '[Mbenjang pukul] LT',
              nextWeek : 'dddd [pukul] LT',
              lastDay : '[Kala wingi pukul] LT',
              lastWeek : 'dddd [kepengker pukul] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'wonten ing %s',
              past : '%s ingkang kepengker',
              s : 'sawetawis detik',
              m : 'setunggal menit',
              mm : '%d menit',
              h : 'setunggal jam',
              hh : '%d jam',
              d : 'sedinten',
              dd : '%d dinten',
              M : 'sewulan',
              MM : '%d wulan',
              y : 'setaun',
              yy : '%d taun'
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return jv;

  }));

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Georgian (ka)
  //! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var ka = moment.defineLocale('ka', {
          months : {
              standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
              format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
          },
          monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
          weekdays : {
              standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
              format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
              isFormat: /(წინა|შემდეგ)/
          },
          weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
          weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
          longDateFormat : {
              LT : 'h:mm A',
              LTS : 'h:mm:ss A',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY h:mm A',
              LLLL : 'dddd, D MMMM YYYY h:mm A'
          },
          calendar : {
              sameDay : '[დღეს] LT[-ზე]',
              nextDay : '[ხვალ] LT[-ზე]',
              lastDay : '[გუშინ] LT[-ზე]',
              nextWeek : '[შემდეგ] dddd LT[-ზე]',
              lastWeek : '[წინა] dddd LT-ზე',
              sameElse : 'L'
          },
          relativeTime : {
              future : function (s) {
                  return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                      s.replace(/ი$/, 'ში') :
                      s + 'ში';
              },
              past : function (s) {
                  if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                      return s.replace(/(ი|ე)$/, 'ის წინ');
                  }
                  if ((/წელი/).test(s)) {
                      return s.replace(/წელი$/, 'წლის წინ');
                  }
              },
              s : 'რამდენიმე წამი',
              m : 'წუთი',
              mm : '%d წუთი',
              h : 'საათი',
              hh : '%d საათი',
              d : 'დღე',
              dd : '%d დღე',
              M : 'თვე',
              MM : '%d თვე',
              y : 'წელი',
              yy : '%d წელი'
          },
          ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
          ordinal : function (number) {
              if (number === 0) {
                  return number;
              }
              if (number === 1) {
                  return number + '-ლი';
              }
              if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
                  return 'მე-' + number;
              }
              return number + '-ე';
          },
          week : {
              dow : 1,
              doy : 7
          }
      });

      return ka;

  }));

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : kazakh (kk)
  //! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var suffixes = {
          0: '-ші',
          1: '-ші',
          2: '-ші',
          3: '-ші',
          4: '-ші',
          5: '-ші',
          6: '-шы',
          7: '-ші',
          8: '-ші',
          9: '-шы',
          10: '-шы',
          20: '-шы',
          30: '-шы',
          40: '-шы',
          50: '-ші',
          60: '-шы',
          70: '-ші',
          80: '-ші',
          90: '-шы',
          100: '-ші'
      };

      var kk = moment.defineLocale('kk', {
          months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
          monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
          weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
          weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
          weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[Бүгін сағат] LT',
              nextDay : '[Ертең сағат] LT',
              nextWeek : 'dddd [сағат] LT',
              lastDay : '[Кеше сағат] LT',
              lastWeek : '[Өткен аптаның] dddd [сағат] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s ішінде',
              past : '%s бұрын',
              s : 'бірнеше секунд',
              m : 'бір минут',
              mm : '%d минут',
              h : 'бір сағат',
              hh : '%d сағат',
              d : 'бір күн',
              dd : '%d күн',
              M : 'бір ай',
              MM : '%d ай',
              y : 'бір жыл',
              yy : '%d жыл'
          },
          ordinalParse: /\d{1,2}-(ші|шы)/,
          ordinal : function (number) {
              var a = number % 10,
                  b = number >= 100 ? 100 : null;
              return number + (suffixes[number] || suffixes[a] || suffixes[b]);
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return kk;

  }));

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : khmer (km)
  //! author : Kruy Vanna : https://github.com/kruyvanna

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var km = moment.defineLocale('km', {
          months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
          monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
          weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
          weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
          weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
          longDateFormat: {
              LT: 'HH:mm',
              LTS : 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd, D MMMM YYYY HH:mm'
          },
          calendar: {
              sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
              nextDay: '[ស្អែក ម៉ោង] LT',
              nextWeek: 'dddd [ម៉ោង] LT',
              lastDay: '[ម្សិលមិញ ម៉ោង] LT',
              lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
              sameElse: 'L'
          },
          relativeTime: {
              future: '%sទៀត',
              past: '%sមុន',
              s: 'ប៉ុន្មានវិនាទី',
              m: 'មួយនាទី',
              mm: '%d នាទី',
              h: 'មួយម៉ោង',
              hh: '%d ម៉ោង',
              d: 'មួយថ្ងៃ',
              dd: '%d ថ្ងៃ',
              M: 'មួយខែ',
              MM: '%d ខែ',
              y: 'មួយឆ្នាំ',
              yy: '%d ឆ្នាំ'
          },
          week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 4th is the first week of the year.
          }
      });

      return km;

  }));

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : korean (ko)
  //!
  //! authors
  //!
  //! - Kyungwook, Park : https://github.com/kyungw00k
  //! - Jeeeyul Lee <jeeeyul@gmail.com>

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var ko = moment.defineLocale('ko', {
          months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
          monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
          weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
          weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
          weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
          longDateFormat : {
              LT : 'A h시 m분',
              LTS : 'A h시 m분 s초',
              L : 'YYYY.MM.DD',
              LL : 'YYYY년 MMMM D일',
              LLL : 'YYYY년 MMMM D일 A h시 m분',
              LLLL : 'YYYY년 MMMM D일 dddd A h시 m분'
          },
          calendar : {
              sameDay : '오늘 LT',
              nextDay : '내일 LT',
              nextWeek : 'dddd LT',
              lastDay : '어제 LT',
              lastWeek : '지난주 dddd LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s 후',
              past : '%s 전',
              s : '몇 초',
              ss : '%d초',
              m : '일분',
              mm : '%d분',
              h : '한 시간',
              hh : '%d시간',
              d : '하루',
              dd : '%d일',
              M : '한 달',
              MM : '%d달',
              y : '일 년',
              yy : '%d년'
          },
          ordinalParse : /\d{1,2}일/,
          ordinal : '%d일',
          meridiemParse : /오전|오후/,
          isPM : function (token) {
              return token === '오후';
          },
          meridiem : function (hour, minute, isUpper) {
              return hour < 12 ? '오전' : '오후';
          }
      });

      return ko;

  }));

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : kyrgyz (ky)
  //! author : Chyngyz Arystan uulu : https://github.com/chyngyz

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';



      var suffixes = {
          0: '-чү',
          1: '-чи',
          2: '-чи',
          3: '-чү',
          4: '-чү',
          5: '-чи',
          6: '-чы',
          7: '-чи',
          8: '-чи',
          9: '-чу',
          10: '-чу',
          20: '-чы',
          30: '-чу',
          40: '-чы',
          50: '-чү',
          60: '-чы',
          70: '-чи',
          80: '-чи',
          90: '-чу',
          100: '-чү'
      };

      var ky = moment.defineLocale('ky', {
          months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
          monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
          weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
          weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
          weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[Бүгүн саат] LT',
              nextDay : '[Эртең саат] LT',
              nextWeek : 'dddd [саат] LT',
              lastDay : '[Кече саат] LT',
              lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s ичинде',
              past : '%s мурун',
              s : 'бирнече секунд',
              m : 'бир мүнөт',
              mm : '%d мүнөт',
              h : 'бир саат',
              hh : '%d саат',
              d : 'бир күн',
              dd : '%d күн',
              M : 'бир ай',
              MM : '%d ай',
              y : 'бир жыл',
              yy : '%d жыл'
          },
          ordinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
          ordinal : function (number) {
              var a = number % 10,
                  b = number >= 100 ? 100 : null;
              return number + (suffixes[number] || suffixes[a] || suffixes[b]);
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return ky;

  }));

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Luxembourgish (lb)
  //! author : mweimerskirch : https://github.com/mweimerskirch, David Raison : https://github.com/kwisatz

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
              'm': ['eng Minutt', 'enger Minutt'],
              'h': ['eng Stonn', 'enger Stonn'],
              'd': ['een Dag', 'engem Dag'],
              'M': ['ee Mount', 'engem Mount'],
              'y': ['ee Joer', 'engem Joer']
          };
          return withoutSuffix ? format[key][0] : format[key][1];
      }
      function processFutureTime(string) {
          var number = string.substr(0, string.indexOf(' '));
          if (eifelerRegelAppliesToNumber(number)) {
              return 'a ' + string;
          }
          return 'an ' + string;
      }
      function processPastTime(string) {
          var number = string.substr(0, string.indexOf(' '));
          if (eifelerRegelAppliesToNumber(number)) {
              return 'viru ' + string;
          }
          return 'virun ' + string;
      }
      /**
       * Returns true if the word before the given number loses the '-n' ending.
       * e.g. 'an 10 Deeg' but 'a 5 Deeg'
       *
       * @param number {integer}
       * @returns {boolean}
       */
      function eifelerRegelAppliesToNumber(number) {
          number = parseInt(number, 10);
          if (isNaN(number)) {
              return false;
          }
          if (number < 0) {
              // Negative Number --> always true
              return true;
          } else if (number < 10) {
              // Only 1 digit
              if (4 <= number && number <= 7) {
                  return true;
              }
              return false;
          } else if (number < 100) {
              // 2 digits
              var lastDigit = number % 10, firstDigit = number / 10;
              if (lastDigit === 0) {
                  return eifelerRegelAppliesToNumber(firstDigit);
              }
              return eifelerRegelAppliesToNumber(lastDigit);
          } else if (number < 10000) {
              // 3 or 4 digits --> recursively check first digit
              while (number >= 10) {
                  number = number / 10;
              }
              return eifelerRegelAppliesToNumber(number);
          } else {
              // Anything larger than 4 digits: recursively check first n-3 digits
              number = number / 1000;
              return eifelerRegelAppliesToNumber(number);
          }
      }

      var lb = moment.defineLocale('lb', {
          months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
          monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
          monthsParseExact : true,
          weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
          weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
          weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
          weekdaysParseExact : true,
          longDateFormat: {
              LT: 'H:mm [Auer]',
              LTS: 'H:mm:ss [Auer]',
              L: 'DD.MM.YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm [Auer]',
              LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
          },
          calendar: {
              sameDay: '[Haut um] LT',
              sameElse: 'L',
              nextDay: '[Muer um] LT',
              nextWeek: 'dddd [um] LT',
              lastDay: '[Gëschter um] LT',
              lastWeek: function () {
                  // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                  switch (this.day()) {
                      case 2:
                      case 4:
                          return '[Leschten] dddd [um] LT';
                      default:
                          return '[Leschte] dddd [um] LT';
                  }
              }
          },
          relativeTime : {
              future : processFutureTime,
              past : processPastTime,
              s : 'e puer Sekonnen',
              m : processRelativeTime,
              mm : '%d Minutten',
              h : processRelativeTime,
              hh : '%d Stonnen',
              d : processRelativeTime,
              dd : '%d Deeg',
              M : processRelativeTime,
              MM : '%d Méint',
              y : processRelativeTime,
              yy : '%d Joer'
          },
          ordinalParse: /\d{1,2}\./,
          ordinal: '%d.',
          week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return lb;

  }));

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : lao (lo)
  //! author : Ryan Hart : https://github.com/ryanhart2

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var lo = moment.defineLocale('lo', {
          months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
          monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
          weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
          weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
          weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
          },
          meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
          isPM: function (input) {
              return input === 'ຕອນແລງ';
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 12) {
                  return 'ຕອນເຊົ້າ';
              } else {
                  return 'ຕອນແລງ';
              }
          },
          calendar : {
              sameDay : '[ມື້ນີ້ເວລາ] LT',
              nextDay : '[ມື້ອື່ນເວລາ] LT',
              nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
              lastDay : '[ມື້ວານນີ້ເວລາ] LT',
              lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'ອີກ %s',
              past : '%sຜ່ານມາ',
              s : 'ບໍ່ເທົ່າໃດວິນາທີ',
              m : '1 ນາທີ',
              mm : '%d ນາທີ',
              h : '1 ຊົ່ວໂມງ',
              hh : '%d ຊົ່ວໂມງ',
              d : '1 ມື້',
              dd : '%d ມື້',
              M : '1 ເດືອນ',
              MM : '%d ເດືອນ',
              y : '1 ປີ',
              yy : '%d ປີ'
          },
          ordinalParse: /(ທີ່)\d{1,2}/,
          ordinal : function (number) {
              return 'ທີ່' + number;
          }
      });

      return lo;

  }));

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Lithuanian (lt)
  //! author : Mindaugas Mozūras : https://github.com/mmozuras

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var units = {
          'm' : 'minutė_minutės_minutę',
          'mm': 'minutės_minučių_minutes',
          'h' : 'valanda_valandos_valandą',
          'hh': 'valandos_valandų_valandas',
          'd' : 'diena_dienos_dieną',
          'dd': 'dienos_dienų_dienas',
          'M' : 'mėnuo_mėnesio_mėnesį',
          'MM': 'mėnesiai_mėnesių_mėnesius',
          'y' : 'metai_metų_metus',
          'yy': 'metai_metų_metus'
      };
      function translateSeconds(number, withoutSuffix, key, isFuture) {
          if (withoutSuffix) {
              return 'kelios sekundės';
          } else {
              return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
          }
      }
      function translateSingular(number, withoutSuffix, key, isFuture) {
          return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
      }
      function special(number) {
          return number % 10 === 0 || (number > 10 && number < 20);
      }
      function forms(key) {
          return units[key].split('_');
      }
      function translate(number, withoutSuffix, key, isFuture) {
          var result = number + ' ';
          if (number === 1) {
              return result + translateSingular(number, withoutSuffix, key[0], isFuture);
          } else if (withoutSuffix) {
              return result + (special(number) ? forms(key)[1] : forms(key)[0]);
          } else {
              if (isFuture) {
                  return result + forms(key)[1];
              } else {
                  return result + (special(number) ? forms(key)[1] : forms(key)[2]);
              }
          }
      }
      var lt = moment.defineLocale('lt', {
          months : {
              format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
              standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_')
          },
          monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
          weekdays : {
              format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
              standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
              isFormat: /dddd HH:mm/
          },
          weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
          weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'YYYY-MM-DD',
              LL : 'YYYY [m.] MMMM D [d.]',
              LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
              LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
              l : 'YYYY-MM-DD',
              ll : 'YYYY [m.] MMMM D [d.]',
              lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
              llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
          },
          calendar : {
              sameDay : '[Šiandien] LT',
              nextDay : '[Rytoj] LT',
              nextWeek : 'dddd LT',
              lastDay : '[Vakar] LT',
              lastWeek : '[Praėjusį] dddd LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'po %s',
              past : 'prieš %s',
              s : translateSeconds,
              m : translateSingular,
              mm : translate,
              h : translateSingular,
              hh : translate,
              d : translateSingular,
              dd : translate,
              M : translateSingular,
              MM : translate,
              y : translateSingular,
              yy : translate
          },
          ordinalParse: /\d{1,2}-oji/,
          ordinal : function (number) {
              return number + '-oji';
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return lt;

  }));

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : latvian (lv)
  //! author : Kristaps Karlsons : https://github.com/skakri
  //! author : Jānis Elmeris : https://github.com/JanisE

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var units = {
          'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
          'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
          'h': 'stundas_stundām_stunda_stundas'.split('_'),
          'hh': 'stundas_stundām_stunda_stundas'.split('_'),
          'd': 'dienas_dienām_diena_dienas'.split('_'),
          'dd': 'dienas_dienām_diena_dienas'.split('_'),
          'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
          'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
          'y': 'gada_gadiem_gads_gadi'.split('_'),
          'yy': 'gada_gadiem_gads_gadi'.split('_')
      };
      /**
       * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
       */
      function format(forms, number, withoutSuffix) {
          if (withoutSuffix) {
              // E.g. "21 minūte", "3 minūtes".
              return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
          } else {
              // E.g. "21 minūtes" as in "pēc 21 minūtes".
              // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
              return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
          }
      }
      function relativeTimeWithPlural(number, withoutSuffix, key) {
          return number + ' ' + format(units[key], number, withoutSuffix);
      }
      function relativeTimeWithSingular(number, withoutSuffix, key) {
          return format(units[key], number, withoutSuffix);
      }
      function relativeSeconds(number, withoutSuffix) {
          return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
      }

      var lv = moment.defineLocale('lv', {
          months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
          monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
          weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
          weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
          weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY.',
              LL : 'YYYY. [gada] D. MMMM',
              LLL : 'YYYY. [gada] D. MMMM, HH:mm',
              LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
          },
          calendar : {
              sameDay : '[Šodien pulksten] LT',
              nextDay : '[Rīt pulksten] LT',
              nextWeek : 'dddd [pulksten] LT',
              lastDay : '[Vakar pulksten] LT',
              lastWeek : '[Pagājušā] dddd [pulksten] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'pēc %s',
              past : 'pirms %s',
              s : relativeSeconds,
              m : relativeTimeWithSingular,
              mm : relativeTimeWithPlural,
              h : relativeTimeWithSingular,
              hh : relativeTimeWithPlural,
              d : relativeTimeWithSingular,
              dd : relativeTimeWithPlural,
              M : relativeTimeWithSingular,
              MM : relativeTimeWithPlural,
              y : relativeTimeWithSingular,
              yy : relativeTimeWithPlural
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return lv;

  }));

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Montenegrin (me)
  //! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var translator = {
          words: { //Different grammatical cases
              m: ['jedan minut', 'jednog minuta'],
              mm: ['minut', 'minuta', 'minuta'],
              h: ['jedan sat', 'jednog sata'],
              hh: ['sat', 'sata', 'sati'],
              dd: ['dan', 'dana', 'dana'],
              MM: ['mjesec', 'mjeseca', 'mjeseci'],
              yy: ['godina', 'godine', 'godina']
          },
          correctGrammaticalCase: function (number, wordKey) {
              return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
          },
          translate: function (number, withoutSuffix, key) {
              var wordKey = translator.words[key];
              if (key.length === 1) {
                  return withoutSuffix ? wordKey[0] : wordKey[1];
              } else {
                  return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
              }
          }
      };

      var me = moment.defineLocale('me', {
          months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
          monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
          monthsParseExact : true,
          weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
          weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
          weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
          weekdaysParseExact : true,
          longDateFormat: {
              LT: 'H:mm',
              LTS : 'H:mm:ss',
              L: 'DD. MM. YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm',
              LLLL: 'dddd, D. MMMM YYYY H:mm'
          },
          calendar: {
              sameDay: '[danas u] LT',
              nextDay: '[sjutra u] LT',

              nextWeek: function () {
                  switch (this.day()) {
                  case 0:
                      return '[u] [nedjelju] [u] LT';
                  case 3:
                      return '[u] [srijedu] [u] LT';
                  case 6:
                      return '[u] [subotu] [u] LT';
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                      return '[u] dddd [u] LT';
                  }
              },
              lastDay  : '[juče u] LT',
              lastWeek : function () {
                  var lastWeekDays = [
                      '[prošle] [nedjelje] [u] LT',
                      '[prošlog] [ponedjeljka] [u] LT',
                      '[prošlog] [utorka] [u] LT',
                      '[prošle] [srijede] [u] LT',
                      '[prošlog] [četvrtka] [u] LT',
                      '[prošlog] [petka] [u] LT',
                      '[prošle] [subote] [u] LT'
                  ];
                  return lastWeekDays[this.day()];
              },
              sameElse : 'L'
          },
          relativeTime : {
              future : 'za %s',
              past   : 'prije %s',
              s      : 'nekoliko sekundi',
              m      : translator.translate,
              mm     : translator.translate,
              h      : translator.translate,
              hh     : translator.translate,
              d      : 'dan',
              dd     : translator.translate,
              M      : 'mjesec',
              MM     : translator.translate,
              y      : 'godinu',
              yy     : translator.translate
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return me;

  }));

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : macedonian (mk)
  //! author : Borislav Mickov : https://github.com/B0k0

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var mk = moment.defineLocale('mk', {
          months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
          monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
          weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
          weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
          weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
          longDateFormat : {
              LT : 'H:mm',
              LTS : 'H:mm:ss',
              L : 'D.MM.YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY H:mm',
              LLLL : 'dddd, D MMMM YYYY H:mm'
          },
          calendar : {
              sameDay : '[Денес во] LT',
              nextDay : '[Утре во] LT',
              nextWeek : '[Во] dddd [во] LT',
              lastDay : '[Вчера во] LT',
              lastWeek : function () {
                  switch (this.day()) {
                  case 0:
                  case 3:
                  case 6:
                      return '[Изминатата] dddd [во] LT';
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                      return '[Изминатиот] dddd [во] LT';
                  }
              },
              sameElse : 'L'
          },
          relativeTime : {
              future : 'после %s',
              past : 'пред %s',
              s : 'неколку секунди',
              m : 'минута',
              mm : '%d минути',
              h : 'час',
              hh : '%d часа',
              d : 'ден',
              dd : '%d дена',
              M : 'месец',
              MM : '%d месеци',
              y : 'година',
              yy : '%d години'
          },
          ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
          ordinal : function (number) {
              var lastDigit = number % 10,
                  last2Digits = number % 100;
              if (number === 0) {
                  return number + '-ев';
              } else if (last2Digits === 0) {
                  return number + '-ен';
              } else if (last2Digits > 10 && last2Digits < 20) {
                  return number + '-ти';
              } else if (lastDigit === 1) {
                  return number + '-ви';
              } else if (lastDigit === 2) {
                  return number + '-ри';
              } else if (lastDigit === 7 || lastDigit === 8) {
                  return number + '-ми';
              } else {
                  return number + '-ти';
              }
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return mk;

  }));

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : malayalam (ml)
  //! author : Floyd Pink : https://github.com/floydpink

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var ml = moment.defineLocale('ml', {
          months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
          monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
          monthsParseExact : true,
          weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
          weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
          weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
          longDateFormat : {
              LT : 'A h:mm -നു',
              LTS : 'A h:mm:ss -നു',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY, A h:mm -നു',
              LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
          },
          calendar : {
              sameDay : '[ഇന്ന്] LT',
              nextDay : '[നാളെ] LT',
              nextWeek : 'dddd, LT',
              lastDay : '[ഇന്നലെ] LT',
              lastWeek : '[കഴിഞ്ഞ] dddd, LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s കഴിഞ്ഞ്',
              past : '%s മുൻപ്',
              s : 'അൽപ നിമിഷങ്ങൾ',
              m : 'ഒരു മിനിറ്റ്',
              mm : '%d മിനിറ്റ്',
              h : 'ഒരു മണിക്കൂർ',
              hh : '%d മണിക്കൂർ',
              d : 'ഒരു ദിവസം',
              dd : '%d ദിവസം',
              M : 'ഒരു മാസം',
              MM : '%d മാസം',
              y : 'ഒരു വർഷം',
              yy : '%d വർഷം'
          },
          meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if ((meridiem === 'രാത്രി' && hour >= 4) ||
                      meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
                      meridiem === 'വൈകുന്നേരം') {
                  return hour + 12;
              } else {
                  return hour;
              }
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 4) {
                  return 'രാത്രി';
              } else if (hour < 12) {
                  return 'രാവിലെ';
              } else if (hour < 17) {
                  return 'ഉച്ച കഴിഞ്ഞ്';
              } else if (hour < 20) {
                  return 'വൈകുന്നേരം';
              } else {
                  return 'രാത്രി';
              }
          }
      });

      return ml;

  }));

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Marathi (mr)
  //! author : Harshad Kale : https://github.com/kalehv
  //! author : Vivek Athalye : https://github.com/vnathalye

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var symbolMap = {
          '1': '१',
          '2': '२',
          '3': '३',
          '4': '४',
          '5': '५',
          '6': '६',
          '7': '७',
          '8': '८',
          '9': '९',
          '0': '०'
      },
      numberMap = {
          '१': '1',
          '२': '2',
          '३': '3',
          '४': '4',
          '५': '5',
          '६': '6',
          '७': '7',
          '८': '8',
          '९': '9',
          '०': '0'
      };

      function relativeTimeMr(number, withoutSuffix, string, isFuture)
      {
          var output = '';
          if (withoutSuffix) {
              switch (string) {
                  case 's': output = 'काही सेकंद'; break;
                  case 'm': output = 'एक मिनिट'; break;
                  case 'mm': output = '%d मिनिटे'; break;
                  case 'h': output = 'एक तास'; break;
                  case 'hh': output = '%d तास'; break;
                  case 'd': output = 'एक दिवस'; break;
                  case 'dd': output = '%d दिवस'; break;
                  case 'M': output = 'एक महिना'; break;
                  case 'MM': output = '%d महिने'; break;
                  case 'y': output = 'एक वर्ष'; break;
                  case 'yy': output = '%d वर्षे'; break;
              }
          }
          else {
              switch (string) {
                  case 's': output = 'काही सेकंदां'; break;
                  case 'm': output = 'एका मिनिटा'; break;
                  case 'mm': output = '%d मिनिटां'; break;
                  case 'h': output = 'एका तासा'; break;
                  case 'hh': output = '%d तासां'; break;
                  case 'd': output = 'एका दिवसा'; break;
                  case 'dd': output = '%d दिवसां'; break;
                  case 'M': output = 'एका महिन्या'; break;
                  case 'MM': output = '%d महिन्यां'; break;
                  case 'y': output = 'एका वर्षा'; break;
                  case 'yy': output = '%d वर्षां'; break;
              }
          }
          return output.replace(/%d/i, number);
      }

      var mr = moment.defineLocale('mr', {
          months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
          monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
          monthsParseExact : true,
          weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
          weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
          weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
          longDateFormat : {
              LT : 'A h:mm वाजता',
              LTS : 'A h:mm:ss वाजता',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY, A h:mm वाजता',
              LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
          },
          calendar : {
              sameDay : '[आज] LT',
              nextDay : '[उद्या] LT',
              nextWeek : 'dddd, LT',
              lastDay : '[काल] LT',
              lastWeek: '[मागील] dddd, LT',
              sameElse : 'L'
          },
          relativeTime : {
              future: '%sमध्ये',
              past: '%sपूर्वी',
              s: relativeTimeMr,
              m: relativeTimeMr,
              mm: relativeTimeMr,
              h: relativeTimeMr,
              hh: relativeTimeMr,
              d: relativeTimeMr,
              dd: relativeTimeMr,
              M: relativeTimeMr,
              MM: relativeTimeMr,
              y: relativeTimeMr,
              yy: relativeTimeMr
          },
          preparse: function (string) {
              return string.replace(/[१२३४५६७८९०]/g, function (match) {
                  return numberMap[match];
              });
          },
          postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                  return symbolMap[match];
              });
          },
          meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === 'रात्री') {
                  return hour < 4 ? hour : hour + 12;
              } else if (meridiem === 'सकाळी') {
                  return hour;
              } else if (meridiem === 'दुपारी') {
                  return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === 'सायंकाळी') {
                  return hour + 12;
              }
          },
          meridiem: function (hour, minute, isLower) {
              if (hour < 4) {
                  return 'रात्री';
              } else if (hour < 10) {
                  return 'सकाळी';
              } else if (hour < 17) {
                  return 'दुपारी';
              } else if (hour < 20) {
                  return 'सायंकाळी';
              } else {
                  return 'रात्री';
              }
          },
          week : {
              dow : 0, // Sunday is the first day of the week.
              doy : 6  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return mr;

  }));

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Bahasa Malaysia (ms-MY)
  //! author : Weldan Jamili : https://github.com/weldan

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var ms_my = moment.defineLocale('ms-my', {
          months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
          monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
          weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
          weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
          weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
          longDateFormat : {
              LT : 'HH.mm',
              LTS : 'HH.mm.ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY [pukul] HH.mm',
              LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
          },
          meridiemParse: /pagi|tengahari|petang|malam/,
          meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === 'pagi') {
                  return hour;
              } else if (meridiem === 'tengahari') {
                  return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === 'petang' || meridiem === 'malam') {
                  return hour + 12;
              }
          },
          meridiem : function (hours, minutes, isLower) {
              if (hours < 11) {
                  return 'pagi';
              } else if (hours < 15) {
                  return 'tengahari';
              } else if (hours < 19) {
                  return 'petang';
              } else {
                  return 'malam';
              }
          },
          calendar : {
              sameDay : '[Hari ini pukul] LT',
              nextDay : '[Esok pukul] LT',
              nextWeek : 'dddd [pukul] LT',
              lastDay : '[Kelmarin pukul] LT',
              lastWeek : 'dddd [lepas pukul] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'dalam %s',
              past : '%s yang lepas',
              s : 'beberapa saat',
              m : 'seminit',
              mm : '%d minit',
              h : 'sejam',
              hh : '%d jam',
              d : 'sehari',
              dd : '%d hari',
              M : 'sebulan',
              MM : '%d bulan',
              y : 'setahun',
              yy : '%d tahun'
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return ms_my;

  }));

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Bahasa Malaysia (ms-MY)
  //! author : Weldan Jamili : https://github.com/weldan

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var ms = moment.defineLocale('ms', {
          months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
          monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
          weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
          weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
          weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
          longDateFormat : {
              LT : 'HH.mm',
              LTS : 'HH.mm.ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY [pukul] HH.mm',
              LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
          },
          meridiemParse: /pagi|tengahari|petang|malam/,
          meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === 'pagi') {
                  return hour;
              } else if (meridiem === 'tengahari') {
                  return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === 'petang' || meridiem === 'malam') {
                  return hour + 12;
              }
          },
          meridiem : function (hours, minutes, isLower) {
              if (hours < 11) {
                  return 'pagi';
              } else if (hours < 15) {
                  return 'tengahari';
              } else if (hours < 19) {
                  return 'petang';
              } else {
                  return 'malam';
              }
          },
          calendar : {
              sameDay : '[Hari ini pukul] LT',
              nextDay : '[Esok pukul] LT',
              nextWeek : 'dddd [pukul] LT',
              lastDay : '[Kelmarin pukul] LT',
              lastWeek : 'dddd [lepas pukul] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'dalam %s',
              past : '%s yang lepas',
              s : 'beberapa saat',
              m : 'seminit',
              mm : '%d minit',
              h : 'sejam',
              hh : '%d jam',
              d : 'sehari',
              dd : '%d hari',
              M : 'sebulan',
              MM : '%d bulan',
              y : 'setahun',
              yy : '%d tahun'
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return ms;

  }));

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Burmese (my)
  //! author : Squar team, mysquar.com

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var symbolMap = {
          '1': '၁',
          '2': '၂',
          '3': '၃',
          '4': '၄',
          '5': '၅',
          '6': '၆',
          '7': '၇',
          '8': '၈',
          '9': '၉',
          '0': '၀'
      }, numberMap = {
          '၁': '1',
          '၂': '2',
          '၃': '3',
          '၄': '4',
          '၅': '5',
          '၆': '6',
          '၇': '7',
          '၈': '8',
          '၉': '9',
          '၀': '0'
      };

      var my = moment.defineLocale('my', {
          months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
          monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
          weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
          weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
          weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

          longDateFormat: {
              LT: 'HH:mm',
              LTS: 'HH:mm:ss',
              L: 'DD/MM/YYYY',
              LL: 'D MMMM YYYY',
              LLL: 'D MMMM YYYY HH:mm',
              LLLL: 'dddd D MMMM YYYY HH:mm'
          },
          calendar: {
              sameDay: '[ယနေ.] LT [မှာ]',
              nextDay: '[မနက်ဖြန်] LT [မှာ]',
              nextWeek: 'dddd LT [မှာ]',
              lastDay: '[မနေ.က] LT [မှာ]',
              lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
              sameElse: 'L'
          },
          relativeTime: {
              future: 'လာမည့် %s မှာ',
              past: 'လွန်ခဲ့သော %s က',
              s: 'စက္ကန်.အနည်းငယ်',
              m: 'တစ်မိနစ်',
              mm: '%d မိနစ်',
              h: 'တစ်နာရီ',
              hh: '%d နာရီ',
              d: 'တစ်ရက်',
              dd: '%d ရက်',
              M: 'တစ်လ',
              MM: '%d လ',
              y: 'တစ်နှစ်',
              yy: '%d နှစ်'
          },
          preparse: function (string) {
              return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                  return numberMap[match];
              });
          },
          postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                  return symbolMap[match];
              });
          },
          week: {
              dow: 1, // Monday is the first day of the week.
              doy: 4 // The week that contains Jan 1st is the first week of the year.
          }
      });

      return my;

  }));

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : norwegian bokmål (nb)
  //! authors : Espen Hovlandsdal : https://github.com/rexxars
  //!           Sigurd Gartmann : https://github.com/sigurdga

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var nb = moment.defineLocale('nb', {
          months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
          monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
          monthsParseExact : true,
          weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
          weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
          weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D. MMMM YYYY',
              LLL : 'D. MMMM YYYY [kl.] HH:mm',
              LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
          },
          calendar : {
              sameDay: '[i dag kl.] LT',
              nextDay: '[i morgen kl.] LT',
              nextWeek: 'dddd [kl.] LT',
              lastDay: '[i går kl.] LT',
              lastWeek: '[forrige] dddd [kl.] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'om %s',
              past : '%s siden',
              s : 'noen sekunder',
              m : 'ett minutt',
              mm : '%d minutter',
              h : 'en time',
              hh : '%d timer',
              d : 'en dag',
              dd : '%d dager',
              M : 'en måned',
              MM : '%d måneder',
              y : 'ett år',
              yy : '%d år'
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return nb;

  }));

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : nepali/nepalese
  //! author : suvash : https://github.com/suvash

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var symbolMap = {
          '1': '१',
          '2': '२',
          '3': '३',
          '4': '४',
          '5': '५',
          '6': '६',
          '7': '७',
          '8': '८',
          '9': '९',
          '0': '०'
      },
      numberMap = {
          '१': '1',
          '२': '2',
          '३': '3',
          '४': '4',
          '५': '5',
          '६': '6',
          '७': '7',
          '८': '8',
          '९': '9',
          '०': '0'
      };

      var ne = moment.defineLocale('ne', {
          months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
          monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
          monthsParseExact : true,
          weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
          weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
          weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'Aको h:mm बजे',
              LTS : 'Aको h:mm:ss बजे',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY, Aको h:mm बजे',
              LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
          },
          preparse: function (string) {
              return string.replace(/[१२३४५६७८९०]/g, function (match) {
                  return numberMap[match];
              });
          },
          postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                  return symbolMap[match];
              });
          },
          meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === 'राति') {
                  return hour < 4 ? hour : hour + 12;
              } else if (meridiem === 'बिहान') {
                  return hour;
              } else if (meridiem === 'दिउँसो') {
                  return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === 'साँझ') {
                  return hour + 12;
              }
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 3) {
                  return 'राति';
              } else if (hour < 12) {
                  return 'बिहान';
              } else if (hour < 16) {
                  return 'दिउँसो';
              } else if (hour < 20) {
                  return 'साँझ';
              } else {
                  return 'राति';
              }
          },
          calendar : {
              sameDay : '[आज] LT',
              nextDay : '[भोलि] LT',
              nextWeek : '[आउँदो] dddd[,] LT',
              lastDay : '[हिजो] LT',
              lastWeek : '[गएको] dddd[,] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%sमा',
              past : '%s अगाडि',
              s : 'केही क्षण',
              m : 'एक मिनेट',
              mm : '%d मिनेट',
              h : 'एक घण्टा',
              hh : '%d घण्टा',
              d : 'एक दिन',
              dd : '%d दिन',
              M : 'एक महिना',
              MM : '%d महिना',
              y : 'एक बर्ष',
              yy : '%d बर्ष'
          },
          week : {
              dow : 0, // Sunday is the first day of the week.
              doy : 6  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return ne;

  }));

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : dutch (nl)
  //! author : Joris Röling : https://github.com/jjupiter

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
          monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

      var nl = moment.defineLocale('nl', {
          months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
          monthsShort : function (m, format) {
              if (/-MMM-/.test(format)) {
                  return monthsShortWithoutDots[m.month()];
              } else {
                  return monthsShortWithDots[m.month()];
              }
          },
          monthsParseExact : true,
          weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
          weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
          weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD-MM-YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[vandaag om] LT',
              nextDay: '[morgen om] LT',
              nextWeek: 'dddd [om] LT',
              lastDay: '[gisteren om] LT',
              lastWeek: '[afgelopen] dddd [om] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'over %s',
              past : '%s geleden',
              s : 'een paar seconden',
              m : 'één minuut',
              mm : '%d minuten',
              h : 'één uur',
              hh : '%d uur',
              d : 'één dag',
              dd : '%d dagen',
              M : 'één maand',
              MM : '%d maanden',
              y : 'één jaar',
              yy : '%d jaar'
          },
          ordinalParse: /\d{1,2}(ste|de)/,
          ordinal : function (number) {
              return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return nl;

  }));

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : norwegian nynorsk (nn)
  //! author : https://github.com/mechuwind

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var nn = moment.defineLocale('nn', {
          months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
          monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
          weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
          weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
          weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D. MMMM YYYY',
              LLL : 'D. MMMM YYYY [kl.] H:mm',
              LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
          },
          calendar : {
              sameDay: '[I dag klokka] LT',
              nextDay: '[I morgon klokka] LT',
              nextWeek: 'dddd [klokka] LT',
              lastDay: '[I går klokka] LT',
              lastWeek: '[Føregåande] dddd [klokka] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'om %s',
              past : '%s sidan',
              s : 'nokre sekund',
              m : 'eit minutt',
              mm : '%d minutt',
              h : 'ein time',
              hh : '%d timar',
              d : 'ein dag',
              dd : '%d dagar',
              M : 'ein månad',
              MM : '%d månader',
              y : 'eit år',
              yy : '%d år'
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return nn;

  }));

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : punjabi india (pa-in)
  //! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var symbolMap = {
          '1': '੧',
          '2': '੨',
          '3': '੩',
          '4': '੪',
          '5': '੫',
          '6': '੬',
          '7': '੭',
          '8': '੮',
          '9': '੯',
          '0': '੦'
      },
      numberMap = {
          '੧': '1',
          '੨': '2',
          '੩': '3',
          '੪': '4',
          '੫': '5',
          '੬': '6',
          '੭': '7',
          '੮': '8',
          '੯': '9',
          '੦': '0'
      };

      var pa_in = moment.defineLocale('pa-in', {
          // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
          months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
          monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
          weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
          weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
          weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
          longDateFormat : {
              LT : 'A h:mm ਵਜੇ',
              LTS : 'A h:mm:ss ਵਜੇ',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
              LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
          },
          calendar : {
              sameDay : '[ਅਜ] LT',
              nextDay : '[ਕਲ] LT',
              nextWeek : 'dddd, LT',
              lastDay : '[ਕਲ] LT',
              lastWeek : '[ਪਿਛਲੇ] dddd, LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s ਵਿੱਚ',
              past : '%s ਪਿਛਲੇ',
              s : 'ਕੁਝ ਸਕਿੰਟ',
              m : 'ਇਕ ਮਿੰਟ',
              mm : '%d ਮਿੰਟ',
              h : 'ਇੱਕ ਘੰਟਾ',
              hh : '%d ਘੰਟੇ',
              d : 'ਇੱਕ ਦਿਨ',
              dd : '%d ਦਿਨ',
              M : 'ਇੱਕ ਮਹੀਨਾ',
              MM : '%d ਮਹੀਨੇ',
              y : 'ਇੱਕ ਸਾਲ',
              yy : '%d ਸਾਲ'
          },
          preparse: function (string) {
              return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
                  return numberMap[match];
              });
          },
          postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                  return symbolMap[match];
              });
          },
          // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
          // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
          meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === 'ਰਾਤ') {
                  return hour < 4 ? hour : hour + 12;
              } else if (meridiem === 'ਸਵੇਰ') {
                  return hour;
              } else if (meridiem === 'ਦੁਪਹਿਰ') {
                  return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === 'ਸ਼ਾਮ') {
                  return hour + 12;
              }
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 4) {
                  return 'ਰਾਤ';
              } else if (hour < 10) {
                  return 'ਸਵੇਰ';
              } else if (hour < 17) {
                  return 'ਦੁਪਹਿਰ';
              } else if (hour < 20) {
                  return 'ਸ਼ਾਮ';
              } else {
                  return 'ਰਾਤ';
              }
          },
          week : {
              dow : 0, // Sunday is the first day of the week.
              doy : 6  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return pa_in;

  }));

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : polish (pl)
  //! author : Rafal Hirsz : https://github.com/evoL

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
          monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
      function plural(n) {
          return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
      }
      function translate(number, withoutSuffix, key) {
          var result = number + ' ';
          switch (key) {
          case 'm':
              return withoutSuffix ? 'minuta' : 'minutę';
          case 'mm':
              return result + (plural(number) ? 'minuty' : 'minut');
          case 'h':
              return withoutSuffix  ? 'godzina'  : 'godzinę';
          case 'hh':
              return result + (plural(number) ? 'godziny' : 'godzin');
          case 'MM':
              return result + (plural(number) ? 'miesiące' : 'miesięcy');
          case 'yy':
              return result + (plural(number) ? 'lata' : 'lat');
          }
      }

      var pl = moment.defineLocale('pl', {
          months : function (momentToFormat, format) {
              if (format === '') {
                  // Hack: if format empty we know this is used to generate
                  // RegExp by moment. Give then back both valid forms of months
                  // in RegExp ready format.
                  return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
              } else if (/D MMMM/.test(format)) {
                  return monthsSubjective[momentToFormat.month()];
              } else {
                  return monthsNominative[momentToFormat.month()];
              }
          },
          monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
          weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
          weekdaysShort : 'nie_pon_wt_śr_czw_pt_sb'.split('_'),
          weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[Dziś o] LT',
              nextDay: '[Jutro o] LT',
              nextWeek: '[W] dddd [o] LT',
              lastDay: '[Wczoraj o] LT',
              lastWeek: function () {
                  switch (this.day()) {
                  case 0:
                      return '[W zeszłą niedzielę o] LT';
                  case 3:
                      return '[W zeszłą środę o] LT';
                  case 6:
                      return '[W zeszłą sobotę o] LT';
                  default:
                      return '[W zeszły] dddd [o] LT';
                  }
              },
              sameElse: 'L'
          },
          relativeTime : {
              future : 'za %s',
              past : '%s temu',
              s : 'kilka sekund',
              m : translate,
              mm : translate,
              h : translate,
              hh : translate,
              d : '1 dzień',
              dd : '%d dni',
              M : 'miesiąc',
              MM : translate,
              y : 'rok',
              yy : translate
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return pl;

  }));

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : brazilian portuguese (pt-br)
  //! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var pt_br = moment.defineLocale('pt-br', {
          months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
          monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
          weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
          weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
          weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D [de] MMMM [de] YYYY',
              LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
              LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
          },
          calendar : {
              sameDay: '[Hoje às] LT',
              nextDay: '[Amanhã às] LT',
              nextWeek: 'dddd [às] LT',
              lastDay: '[Ontem às] LT',
              lastWeek: function () {
                  return (this.day() === 0 || this.day() === 6) ?
                      '[Último] dddd [às] LT' : // Saturday + Sunday
                      '[Última] dddd [às] LT'; // Monday - Friday
              },
              sameElse: 'L'
          },
          relativeTime : {
              future : 'em %s',
              past : '%s atrás',
              s : 'poucos segundos',
              m : 'um minuto',
              mm : '%d minutos',
              h : 'uma hora',
              hh : '%d horas',
              d : 'um dia',
              dd : '%d dias',
              M : 'um mês',
              MM : '%d meses',
              y : 'um ano',
              yy : '%d anos'
          },
          ordinalParse: /\d{1,2}º/,
          ordinal : '%dº'
      });

      return pt_br;

  }));

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : portuguese (pt)
  //! author : Jefferson : https://github.com/jalex79

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var pt = moment.defineLocale('pt', {
          months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
          monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
          weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
          weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
          weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D [de] MMMM [de] YYYY',
              LLL : 'D [de] MMMM [de] YYYY HH:mm',
              LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
          },
          calendar : {
              sameDay: '[Hoje às] LT',
              nextDay: '[Amanhã às] LT',
              nextWeek: 'dddd [às] LT',
              lastDay: '[Ontem às] LT',
              lastWeek: function () {
                  return (this.day() === 0 || this.day() === 6) ?
                      '[Último] dddd [às] LT' : // Saturday + Sunday
                      '[Última] dddd [às] LT'; // Monday - Friday
              },
              sameElse: 'L'
          },
          relativeTime : {
              future : 'em %s',
              past : 'há %s',
              s : 'segundos',
              m : 'um minuto',
              mm : '%d minutos',
              h : 'uma hora',
              hh : '%d horas',
              d : 'um dia',
              dd : '%d dias',
              M : 'um mês',
              MM : '%d meses',
              y : 'um ano',
              yy : '%d anos'
          },
          ordinalParse: /\d{1,2}º/,
          ordinal : '%dº',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return pt;

  }));

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : romanian (ro)
  //! author : Vlad Gurdiga : https://github.com/gurdiga
  //! author : Valentin Agachi : https://github.com/avaly

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function relativeTimeWithPlural(number, withoutSuffix, key) {
          var format = {
                  'mm': 'minute',
                  'hh': 'ore',
                  'dd': 'zile',
                  'MM': 'luni',
                  'yy': 'ani'
              },
              separator = ' ';
          if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
              separator = ' de ';
          }
          return number + separator + format[key];
      }

      var ro = moment.defineLocale('ro', {
          months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
          monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
          monthsParseExact: true,
          weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
          weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
          weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
          longDateFormat : {
              LT : 'H:mm',
              LTS : 'H:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY H:mm',
              LLLL : 'dddd, D MMMM YYYY H:mm'
          },
          calendar : {
              sameDay: '[azi la] LT',
              nextDay: '[mâine la] LT',
              nextWeek: 'dddd [la] LT',
              lastDay: '[ieri la] LT',
              lastWeek: '[fosta] dddd [la] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'peste %s',
              past : '%s în urmă',
              s : 'câteva secunde',
              m : 'un minut',
              mm : relativeTimeWithPlural,
              h : 'o oră',
              hh : relativeTimeWithPlural,
              d : 'o zi',
              dd : relativeTimeWithPlural,
              M : 'o lună',
              MM : relativeTimeWithPlural,
              y : 'un an',
              yy : relativeTimeWithPlural
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return ro;

  }));

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : russian (ru)
  //! author : Viktorminator : https://github.com/Viktorminator
  //! Author : Menelion Elensúle : https://github.com/Oire
  //! author : Коренберг Марк : https://github.com/socketpair

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function plural(word, num) {
          var forms = word.split('_');
          return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
      }
      function relativeTimeWithPlural(number, withoutSuffix, key) {
          var format = {
              'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
              'hh': 'час_часа_часов',
              'dd': 'день_дня_дней',
              'MM': 'месяц_месяца_месяцев',
              'yy': 'год_года_лет'
          };
          if (key === 'm') {
              return withoutSuffix ? 'минута' : 'минуту';
          }
          else {
              return number + ' ' + plural(format[key], +number);
          }
      }
      var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

      // http://new.gramota.ru/spravka/rules/139-prop : § 103
      // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
      // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
      var ru = moment.defineLocale('ru', {
          months : {
              format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
              standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
          },
          monthsShort : {
              // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
              format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
              standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
          },
          weekdays : {
              standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
              format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
              isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
          },
          weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
          weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
          monthsParse : monthsParse,
          longMonthsParse : monthsParse,
          shortMonthsParse : monthsParse,
          monthsRegex: /^(сентябр[яь]|октябр[яь]|декабр[яь]|феврал[яь]|январ[яь]|апрел[яь]|августа?|ноябр[яь]|сент\.|февр\.|нояб\.|июнь|янв.|июль|дек.|авг.|апр.|марта|мар[.т]|окт.|июн[яь]|июл[яь]|ма[яй])/i,
          monthsShortRegex: /^(сентябр[яь]|октябр[яь]|декабр[яь]|феврал[яь]|январ[яь]|апрел[яь]|августа?|ноябр[яь]|сент\.|февр\.|нояб\.|июнь|янв.|июль|дек.|авг.|апр.|марта|мар[.т]|окт.|июн[яь]|июл[яь]|ма[яй])/i,
          monthsStrictRegex: /^(сентябр[яь]|октябр[яь]|декабр[яь]|феврал[яь]|январ[яь]|апрел[яь]|августа?|ноябр[яь]|марта?|июн[яь]|июл[яь]|ма[яй])/i,
          monthsShortStrictRegex: /^(нояб\.|февр\.|сент\.|июль|янв\.|июн[яь]|мар[.т]|авг\.|апр\.|окт\.|дек\.|ма[яй])/i,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY г.',
              LLL : 'D MMMM YYYY г., HH:mm',
              LLLL : 'dddd, D MMMM YYYY г., HH:mm'
          },
          calendar : {
              sameDay: '[Сегодня в] LT',
              nextDay: '[Завтра в] LT',
              lastDay: '[Вчера в] LT',
              nextWeek: function (now) {
                  if (now.week() !== this.week()) {
                      switch (this.day()) {
                      case 0:
                          return '[В следующее] dddd [в] LT';
                      case 1:
                      case 2:
                      case 4:
                          return '[В следующий] dddd [в] LT';
                      case 3:
                      case 5:
                      case 6:
                          return '[В следующую] dddd [в] LT';
                      }
                  } else {
                      if (this.day() === 2) {
                          return '[Во] dddd [в] LT';
                      } else {
                          return '[В] dddd [в] LT';
                      }
                  }
              },
              lastWeek: function (now) {
                  if (now.week() !== this.week()) {
                      switch (this.day()) {
                      case 0:
                          return '[В прошлое] dddd [в] LT';
                      case 1:
                      case 2:
                      case 4:
                          return '[В прошлый] dddd [в] LT';
                      case 3:
                      case 5:
                      case 6:
                          return '[В прошлую] dddd [в] LT';
                      }
                  } else {
                      if (this.day() === 2) {
                          return '[Во] dddd [в] LT';
                      } else {
                          return '[В] dddd [в] LT';
                      }
                  }
              },
              sameElse: 'L'
          },
          relativeTime : {
              future : 'через %s',
              past : '%s назад',
              s : 'несколько секунд',
              m : relativeTimeWithPlural,
              mm : relativeTimeWithPlural,
              h : 'час',
              hh : relativeTimeWithPlural,
              d : 'день',
              dd : relativeTimeWithPlural,
              M : 'месяц',
              MM : relativeTimeWithPlural,
              y : 'год',
              yy : relativeTimeWithPlural
          },
          meridiemParse: /ночи|утра|дня|вечера/i,
          isPM : function (input) {
              return /^(дня|вечера)$/.test(input);
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 4) {
                  return 'ночи';
              } else if (hour < 12) {
                  return 'утра';
              } else if (hour < 17) {
                  return 'дня';
              } else {
                  return 'вечера';
              }
          },
          ordinalParse: /\d{1,2}-(й|го|я)/,
          ordinal: function (number, period) {
              switch (period) {
              case 'M':
              case 'd':
              case 'DDD':
                  return number + '-й';
              case 'D':
                  return number + '-го';
              case 'w':
              case 'W':
                  return number + '-я';
              default:
                  return number;
              }
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return ru;

  }));

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Northern Sami (se)
  //! authors : Bård Rolstad Henriksen : https://github.com/karamell

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';



      var se = moment.defineLocale('se', {
          months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
          monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
          weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
          weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
          weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'MMMM D. [b.] YYYY',
              LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
              LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
          },
          calendar : {
              sameDay: '[otne ti] LT',
              nextDay: '[ihttin ti] LT',
              nextWeek: 'dddd [ti] LT',
              lastDay: '[ikte ti] LT',
              lastWeek: '[ovddit] dddd [ti] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : '%s geažes',
              past : 'maŋit %s',
              s : 'moadde sekunddat',
              m : 'okta minuhta',
              mm : '%d minuhtat',
              h : 'okta diimmu',
              hh : '%d diimmut',
              d : 'okta beaivi',
              dd : '%d beaivvit',
              M : 'okta mánnu',
              MM : '%d mánut',
              y : 'okta jahki',
              yy : '%d jagit'
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return se;

  }));

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Sinhalese (si)
  //! author : Sampath Sitinamaluwa : https://github.com/sampathsris

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      /*jshint -W100*/
      var si = moment.defineLocale('si', {
          months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
          monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
          weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
          weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
          weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'a h:mm',
              LTS : 'a h:mm:ss',
              L : 'YYYY/MM/DD',
              LL : 'YYYY MMMM D',
              LLL : 'YYYY MMMM D, a h:mm',
              LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
          },
          calendar : {
              sameDay : '[අද] LT[ට]',
              nextDay : '[හෙට] LT[ට]',
              nextWeek : 'dddd LT[ට]',
              lastDay : '[ඊයේ] LT[ට]',
              lastWeek : '[පසුගිය] dddd LT[ට]',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%sකින්',
              past : '%sකට පෙර',
              s : 'තත්පර කිහිපය',
              m : 'මිනිත්තුව',
              mm : 'මිනිත්තු %d',
              h : 'පැය',
              hh : 'පැය %d',
              d : 'දිනය',
              dd : 'දින %d',
              M : 'මාසය',
              MM : 'මාස %d',
              y : 'වසර',
              yy : 'වසර %d'
          },
          ordinalParse: /\d{1,2} වැනි/,
          ordinal : function (number) {
              return number + ' වැනි';
          },
          meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
          isPM : function (input) {
              return input === 'ප.ව.' || input === 'පස් වරු';
          },
          meridiem : function (hours, minutes, isLower) {
              if (hours > 11) {
                  return isLower ? 'ප.ව.' : 'පස් වරු';
              } else {
                  return isLower ? 'පෙ.ව.' : 'පෙර වරු';
              }
          }
      });

      return si;

  }));

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : slovak (sk)
  //! author : Martin Minka : https://github.com/k2s
  //! based on work of petrbela : https://github.com/petrbela

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
          monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
      function plural(n) {
          return (n > 1) && (n < 5);
      }
      function translate(number, withoutSuffix, key, isFuture) {
          var result = number + ' ';
          switch (key) {
          case 's':  // a few seconds / in a few seconds / a few seconds ago
              return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
          case 'm':  // a minute / in a minute / a minute ago
              return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
          case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
              if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? 'minúty' : 'minút');
              } else {
                  return result + 'minútami';
              }
              break;
          case 'h':  // an hour / in an hour / an hour ago
              return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
          case 'hh': // 9 hours / in 9 hours / 9 hours ago
              if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? 'hodiny' : 'hodín');
              } else {
                  return result + 'hodinami';
              }
              break;
          case 'd':  // a day / in a day / a day ago
              return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
          case 'dd': // 9 days / in 9 days / 9 days ago
              if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? 'dni' : 'dní');
              } else {
                  return result + 'dňami';
              }
              break;
          case 'M':  // a month / in a month / a month ago
              return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
          case 'MM': // 9 months / in 9 months / 9 months ago
              if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? 'mesiace' : 'mesiacov');
              } else {
                  return result + 'mesiacmi';
              }
              break;
          case 'y':  // a year / in a year / a year ago
              return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
          case 'yy': // 9 years / in 9 years / 9 years ago
              if (withoutSuffix || isFuture) {
                  return result + (plural(number) ? 'roky' : 'rokov');
              } else {
                  return result + 'rokmi';
              }
              break;
          }
      }

      var sk = moment.defineLocale('sk', {
          months : months,
          monthsShort : monthsShort,
          weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
          weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
          weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
          longDateFormat : {
              LT: 'H:mm',
              LTS : 'H:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D. MMMM YYYY',
              LLL : 'D. MMMM YYYY H:mm',
              LLLL : 'dddd D. MMMM YYYY H:mm'
          },
          calendar : {
              sameDay: '[dnes o] LT',
              nextDay: '[zajtra o] LT',
              nextWeek: function () {
                  switch (this.day()) {
                  case 0:
                      return '[v nedeľu o] LT';
                  case 1:
                  case 2:
                      return '[v] dddd [o] LT';
                  case 3:
                      return '[v stredu o] LT';
                  case 4:
                      return '[vo štvrtok o] LT';
                  case 5:
                      return '[v piatok o] LT';
                  case 6:
                      return '[v sobotu o] LT';
                  }
              },
              lastDay: '[včera o] LT',
              lastWeek: function () {
                  switch (this.day()) {
                  case 0:
                      return '[minulú nedeľu o] LT';
                  case 1:
                  case 2:
                      return '[minulý] dddd [o] LT';
                  case 3:
                      return '[minulú stredu o] LT';
                  case 4:
                  case 5:
                      return '[minulý] dddd [o] LT';
                  case 6:
                      return '[minulú sobotu o] LT';
                  }
              },
              sameElse: 'L'
          },
          relativeTime : {
              future : 'za %s',
              past : 'pred %s',
              s : translate,
              m : translate,
              mm : translate,
              h : translate,
              hh : translate,
              d : translate,
              dd : translate,
              M : translate,
              MM : translate,
              y : translate,
              yy : translate
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return sk;

  }));

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : slovenian (sl)
  //! author : Robert Sedovšek : https://github.com/sedovsek

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var result = number + ' ';
          switch (key) {
          case 's':
              return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
          case 'm':
              return withoutSuffix ? 'ena minuta' : 'eno minuto';
          case 'mm':
              if (number === 1) {
                  result += withoutSuffix ? 'minuta' : 'minuto';
              } else if (number === 2) {
                  result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
              } else if (number < 5) {
                  result += withoutSuffix || isFuture ? 'minute' : 'minutami';
              } else {
                  result += withoutSuffix || isFuture ? 'minut' : 'minutami';
              }
              return result;
          case 'h':
              return withoutSuffix ? 'ena ura' : 'eno uro';
          case 'hh':
              if (number === 1) {
                  result += withoutSuffix ? 'ura' : 'uro';
              } else if (number === 2) {
                  result += withoutSuffix || isFuture ? 'uri' : 'urama';
              } else if (number < 5) {
                  result += withoutSuffix || isFuture ? 'ure' : 'urami';
              } else {
                  result += withoutSuffix || isFuture ? 'ur' : 'urami';
              }
              return result;
          case 'd':
              return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
          case 'dd':
              if (number === 1) {
                  result += withoutSuffix || isFuture ? 'dan' : 'dnem';
              } else if (number === 2) {
                  result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
              } else {
                  result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
              }
              return result;
          case 'M':
              return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
          case 'MM':
              if (number === 1) {
                  result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
              } else if (number === 2) {
                  result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
              } else if (number < 5) {
                  result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
              } else {
                  result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
              }
              return result;
          case 'y':
              return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
          case 'yy':
              if (number === 1) {
                  result += withoutSuffix || isFuture ? 'leto' : 'letom';
              } else if (number === 2) {
                  result += withoutSuffix || isFuture ? 'leti' : 'letoma';
              } else if (number < 5) {
                  result += withoutSuffix || isFuture ? 'leta' : 'leti';
              } else {
                  result += withoutSuffix || isFuture ? 'let' : 'leti';
              }
              return result;
          }
      }

      var sl = moment.defineLocale('sl', {
          months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
          monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
          monthsParseExact: true,
          weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
          weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
          weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'H:mm',
              LTS : 'H:mm:ss',
              L : 'DD. MM. YYYY',
              LL : 'D. MMMM YYYY',
              LLL : 'D. MMMM YYYY H:mm',
              LLLL : 'dddd, D. MMMM YYYY H:mm'
          },
          calendar : {
              sameDay  : '[danes ob] LT',
              nextDay  : '[jutri ob] LT',

              nextWeek : function () {
                  switch (this.day()) {
                  case 0:
                      return '[v] [nedeljo] [ob] LT';
                  case 3:
                      return '[v] [sredo] [ob] LT';
                  case 6:
                      return '[v] [soboto] [ob] LT';
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                      return '[v] dddd [ob] LT';
                  }
              },
              lastDay  : '[včeraj ob] LT',
              lastWeek : function () {
                  switch (this.day()) {
                  case 0:
                      return '[prejšnjo] [nedeljo] [ob] LT';
                  case 3:
                      return '[prejšnjo] [sredo] [ob] LT';
                  case 6:
                      return '[prejšnjo] [soboto] [ob] LT';
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                      return '[prejšnji] dddd [ob] LT';
                  }
              },
              sameElse : 'L'
          },
          relativeTime : {
              future : 'čez %s',
              past   : 'pred %s',
              s      : processRelativeTime,
              m      : processRelativeTime,
              mm     : processRelativeTime,
              h      : processRelativeTime,
              hh     : processRelativeTime,
              d      : processRelativeTime,
              dd     : processRelativeTime,
              M      : processRelativeTime,
              MM     : processRelativeTime,
              y      : processRelativeTime,
              yy     : processRelativeTime
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return sl;

  }));

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Albanian (sq)
  //! author : Flakërim Ismani : https://github.com/flakerimi
  //! author: Menelion Elensúle: https://github.com/Oire (tests)
  //! author : Oerd Cukalla : https://github.com/oerd (fixes)

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var sq = moment.defineLocale('sq', {
          months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
          monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
          weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
          weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
          weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
          weekdaysParseExact : true,
          meridiemParse: /PD|MD/,
          isPM: function (input) {
              return input.charAt(0) === 'M';
          },
          meridiem : function (hours, minutes, isLower) {
              return hours < 12 ? 'PD' : 'MD';
          },
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[Sot në] LT',
              nextDay : '[Nesër në] LT',
              nextWeek : 'dddd [në] LT',
              lastDay : '[Dje në] LT',
              lastWeek : 'dddd [e kaluar në] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'në %s',
              past : '%s më parë',
              s : 'disa sekonda',
              m : 'një minutë',
              mm : '%d minuta',
              h : 'një orë',
              hh : '%d orë',
              d : 'një ditë',
              dd : '%d ditë',
              M : 'një muaj',
              MM : '%d muaj',
              y : 'një vit',
              yy : '%d vite'
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return sq;

  }));

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Serbian-cyrillic (sr-cyrl)
  //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var translator = {
          words: { //Different grammatical cases
              m: ['један минут', 'једне минуте'],
              mm: ['минут', 'минуте', 'минута'],
              h: ['један сат', 'једног сата'],
              hh: ['сат', 'сата', 'сати'],
              dd: ['дан', 'дана', 'дана'],
              MM: ['месец', 'месеца', 'месеци'],
              yy: ['година', 'године', 'година']
          },
          correctGrammaticalCase: function (number, wordKey) {
              return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
          },
          translate: function (number, withoutSuffix, key) {
              var wordKey = translator.words[key];
              if (key.length === 1) {
                  return withoutSuffix ? wordKey[0] : wordKey[1];
              } else {
                  return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
              }
          }
      };

      var sr_cyrl = moment.defineLocale('sr-cyrl', {
          months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
          monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
          monthsParseExact: true,
          weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
          weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
          weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
          weekdaysParseExact : true,
          longDateFormat: {
              LT: 'H:mm',
              LTS : 'H:mm:ss',
              L: 'DD. MM. YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm',
              LLLL: 'dddd, D. MMMM YYYY H:mm'
          },
          calendar: {
              sameDay: '[данас у] LT',
              nextDay: '[сутра у] LT',
              nextWeek: function () {
                  switch (this.day()) {
                  case 0:
                      return '[у] [недељу] [у] LT';
                  case 3:
                      return '[у] [среду] [у] LT';
                  case 6:
                      return '[у] [суботу] [у] LT';
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                      return '[у] dddd [у] LT';
                  }
              },
              lastDay  : '[јуче у] LT',
              lastWeek : function () {
                  var lastWeekDays = [
                      '[прошле] [недеље] [у] LT',
                      '[прошлог] [понедељка] [у] LT',
                      '[прошлог] [уторка] [у] LT',
                      '[прошле] [среде] [у] LT',
                      '[прошлог] [четвртка] [у] LT',
                      '[прошлог] [петка] [у] LT',
                      '[прошле] [суботе] [у] LT'
                  ];
                  return lastWeekDays[this.day()];
              },
              sameElse : 'L'
          },
          relativeTime : {
              future : 'за %s',
              past   : 'пре %s',
              s      : 'неколико секунди',
              m      : translator.translate,
              mm     : translator.translate,
              h      : translator.translate,
              hh     : translator.translate,
              d      : 'дан',
              dd     : translator.translate,
              M      : 'месец',
              MM     : translator.translate,
              y      : 'годину',
              yy     : translator.translate
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return sr_cyrl;

  }));

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Serbian-latin (sr)
  //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var translator = {
          words: { //Different grammatical cases
              m: ['jedan minut', 'jedne minute'],
              mm: ['minut', 'minute', 'minuta'],
              h: ['jedan sat', 'jednog sata'],
              hh: ['sat', 'sata', 'sati'],
              dd: ['dan', 'dana', 'dana'],
              MM: ['mesec', 'meseca', 'meseci'],
              yy: ['godina', 'godine', 'godina']
          },
          correctGrammaticalCase: function (number, wordKey) {
              return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
          },
          translate: function (number, withoutSuffix, key) {
              var wordKey = translator.words[key];
              if (key.length === 1) {
                  return withoutSuffix ? wordKey[0] : wordKey[1];
              } else {
                  return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
              }
          }
      };

      var sr = moment.defineLocale('sr', {
          months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
          monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
          monthsParseExact: true,
          weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
          weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
          weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
          weekdaysParseExact : true,
          longDateFormat: {
              LT: 'H:mm',
              LTS : 'H:mm:ss',
              L: 'DD. MM. YYYY',
              LL: 'D. MMMM YYYY',
              LLL: 'D. MMMM YYYY H:mm',
              LLLL: 'dddd, D. MMMM YYYY H:mm'
          },
          calendar: {
              sameDay: '[danas u] LT',
              nextDay: '[sutra u] LT',
              nextWeek: function () {
                  switch (this.day()) {
                  case 0:
                      return '[u] [nedelju] [u] LT';
                  case 3:
                      return '[u] [sredu] [u] LT';
                  case 6:
                      return '[u] [subotu] [u] LT';
                  case 1:
                  case 2:
                  case 4:
                  case 5:
                      return '[u] dddd [u] LT';
                  }
              },
              lastDay  : '[juče u] LT',
              lastWeek : function () {
                  var lastWeekDays = [
                      '[prošle] [nedelje] [u] LT',
                      '[prošlog] [ponedeljka] [u] LT',
                      '[prošlog] [utorka] [u] LT',
                      '[prošle] [srede] [u] LT',
                      '[prošlog] [četvrtka] [u] LT',
                      '[prošlog] [petka] [u] LT',
                      '[prošle] [subote] [u] LT'
                  ];
                  return lastWeekDays[this.day()];
              },
              sameElse : 'L'
          },
          relativeTime : {
              future : 'za %s',
              past   : 'pre %s',
              s      : 'nekoliko sekundi',
              m      : translator.translate,
              mm     : translator.translate,
              h      : translator.translate,
              hh     : translator.translate,
              d      : 'dan',
              dd     : translator.translate,
              M      : 'mesec',
              MM     : translator.translate,
              y      : 'godinu',
              yy     : translator.translate
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return sr;

  }));

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : siSwati (ss)
  //! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';



      var ss = moment.defineLocale('ss', {
          months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
          monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
          weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
          weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
          weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'h:mm A',
              LTS : 'h:mm:ss A',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY h:mm A',
              LLLL : 'dddd, D MMMM YYYY h:mm A'
          },
          calendar : {
              sameDay : '[Namuhla nga] LT',
              nextDay : '[Kusasa nga] LT',
              nextWeek : 'dddd [nga] LT',
              lastDay : '[Itolo nga] LT',
              lastWeek : 'dddd [leliphelile] [nga] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'nga %s',
              past : 'wenteka nga %s',
              s : 'emizuzwana lomcane',
              m : 'umzuzu',
              mm : '%d emizuzu',
              h : 'lihora',
              hh : '%d emahora',
              d : 'lilanga',
              dd : '%d emalanga',
              M : 'inyanga',
              MM : '%d tinyanga',
              y : 'umnyaka',
              yy : '%d iminyaka'
          },
          meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
          meridiem : function (hours, minutes, isLower) {
              if (hours < 11) {
                  return 'ekuseni';
              } else if (hours < 15) {
                  return 'emini';
              } else if (hours < 19) {
                  return 'entsambama';
              } else {
                  return 'ebusuku';
              }
          },
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === 'ekuseni') {
                  return hour;
              } else if (meridiem === 'emini') {
                  return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
                  if (hour === 0) {
                      return 0;
                  }
                  return hour + 12;
              }
          },
          ordinalParse: /\d{1,2}/,
          ordinal : '%d',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return ss;

  }));

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : swedish (sv)
  //! author : Jens Alm : https://github.com/ulmus

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var sv = moment.defineLocale('sv', {
          months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
          monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
          weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
          weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
          weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'YYYY-MM-DD',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY [kl.] HH:mm',
              LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
              lll : 'D MMM YYYY HH:mm',
              llll : 'ddd D MMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[Idag] LT',
              nextDay: '[Imorgon] LT',
              lastDay: '[Igår] LT',
              nextWeek: '[På] dddd LT',
              lastWeek: '[I] dddd[s] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'om %s',
              past : 'för %s sedan',
              s : 'några sekunder',
              m : 'en minut',
              mm : '%d minuter',
              h : 'en timme',
              hh : '%d timmar',
              d : 'en dag',
              dd : '%d dagar',
              M : 'en månad',
              MM : '%d månader',
              y : 'ett år',
              yy : '%d år'
          },
          ordinalParse: /\d{1,2}(e|a)/,
          ordinal : function (number) {
              var b = number % 10,
                  output = (~~(number % 100 / 10) === 1) ? 'e' :
                  (b === 1) ? 'a' :
                  (b === 2) ? 'a' :
                  (b === 3) ? 'e' : 'e';
              return number + output;
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return sv;

  }));

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : swahili (sw)
  //! author : Fahad Kassim : https://github.com/fadsel

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var sw = moment.defineLocale('sw', {
          months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
          monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
          weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
          weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
          weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[leo saa] LT',
              nextDay : '[kesho saa] LT',
              nextWeek : '[wiki ijayo] dddd [saat] LT',
              lastDay : '[jana] LT',
              lastWeek : '[wiki iliyopita] dddd [saat] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s baadaye',
              past : 'tokea %s',
              s : 'hivi punde',
              m : 'dakika moja',
              mm : 'dakika %d',
              h : 'saa limoja',
              hh : 'masaa %d',
              d : 'siku moja',
              dd : 'masiku %d',
              M : 'mwezi mmoja',
              MM : 'miezi %d',
              y : 'mwaka mmoja',
              yy : 'miaka %d'
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return sw;

  }));

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : tamil (ta)
  //! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var symbolMap = {
          '1': '௧',
          '2': '௨',
          '3': '௩',
          '4': '௪',
          '5': '௫',
          '6': '௬',
          '7': '௭',
          '8': '௮',
          '9': '௯',
          '0': '௦'
      }, numberMap = {
          '௧': '1',
          '௨': '2',
          '௩': '3',
          '௪': '4',
          '௫': '5',
          '௬': '6',
          '௭': '7',
          '௮': '8',
          '௯': '9',
          '௦': '0'
      };

      var ta = moment.defineLocale('ta', {
          months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
          monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
          weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
          weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
          weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY, HH:mm',
              LLLL : 'dddd, D MMMM YYYY, HH:mm'
          },
          calendar : {
              sameDay : '[இன்று] LT',
              nextDay : '[நாளை] LT',
              nextWeek : 'dddd, LT',
              lastDay : '[நேற்று] LT',
              lastWeek : '[கடந்த வாரம்] dddd, LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s இல்',
              past : '%s முன்',
              s : 'ஒரு சில விநாடிகள்',
              m : 'ஒரு நிமிடம்',
              mm : '%d நிமிடங்கள்',
              h : 'ஒரு மணி நேரம்',
              hh : '%d மணி நேரம்',
              d : 'ஒரு நாள்',
              dd : '%d நாட்கள்',
              M : 'ஒரு மாதம்',
              MM : '%d மாதங்கள்',
              y : 'ஒரு வருடம்',
              yy : '%d ஆண்டுகள்'
          },
          ordinalParse: /\d{1,2}வது/,
          ordinal : function (number) {
              return number + 'வது';
          },
          preparse: function (string) {
              return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
                  return numberMap[match];
              });
          },
          postformat: function (string) {
              return string.replace(/\d/g, function (match) {
                  return symbolMap[match];
              });
          },
          // refer http://ta.wikipedia.org/s/1er1
          meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
          meridiem : function (hour, minute, isLower) {
              if (hour < 2) {
                  return ' யாமம்';
              } else if (hour < 6) {
                  return ' வைகறை';  // வைகறை
              } else if (hour < 10) {
                  return ' காலை'; // காலை
              } else if (hour < 14) {
                  return ' நண்பகல்'; // நண்பகல்
              } else if (hour < 18) {
                  return ' எற்பாடு'; // எற்பாடு
              } else if (hour < 22) {
                  return ' மாலை'; // மாலை
              } else {
                  return ' யாமம்';
              }
          },
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === 'யாமம்') {
                  return hour < 2 ? hour : hour + 12;
              } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                  return hour;
              } else if (meridiem === 'நண்பகல்') {
                  return hour >= 10 ? hour : hour + 12;
              } else {
                  return hour + 12;
              }
          },
          week : {
              dow : 0, // Sunday is the first day of the week.
              doy : 6  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return ta;

  }));

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : telugu (te)
  //! author : Krishna Chaitanya Thota : https://github.com/kcthota

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var te = moment.defineLocale('te', {
          months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
          monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
          monthsParseExact : true,
          weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
          weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
          weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
          longDateFormat : {
              LT : 'A h:mm',
              LTS : 'A h:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY, A h:mm',
              LLLL : 'dddd, D MMMM YYYY, A h:mm'
          },
          calendar : {
              sameDay : '[నేడు] LT',
              nextDay : '[రేపు] LT',
              nextWeek : 'dddd, LT',
              lastDay : '[నిన్న] LT',
              lastWeek : '[గత] dddd, LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s లో',
              past : '%s క్రితం',
              s : 'కొన్ని క్షణాలు',
              m : 'ఒక నిమిషం',
              mm : '%d నిమిషాలు',
              h : 'ఒక గంట',
              hh : '%d గంటలు',
              d : 'ఒక రోజు',
              dd : '%d రోజులు',
              M : 'ఒక నెల',
              MM : '%d నెలలు',
              y : 'ఒక సంవత్సరం',
              yy : '%d సంవత్సరాలు'
          },
          ordinalParse : /\d{1,2}వ/,
          ordinal : '%dవ',
          meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === 'రాత్రి') {
                  return hour < 4 ? hour : hour + 12;
              } else if (meridiem === 'ఉదయం') {
                  return hour;
              } else if (meridiem === 'మధ్యాహ్నం') {
                  return hour >= 10 ? hour : hour + 12;
              } else if (meridiem === 'సాయంత్రం') {
                  return hour + 12;
              }
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 4) {
                  return 'రాత్రి';
              } else if (hour < 10) {
                  return 'ఉదయం';
              } else if (hour < 17) {
                  return 'మధ్యాహ్నం';
              } else if (hour < 20) {
                  return 'సాయంత్రం';
              } else {
                  return 'రాత్రి';
              }
          },
          week : {
              dow : 0, // Sunday is the first day of the week.
              doy : 6  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return te;

  }));

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : thai (th)
  //! author : Kridsada Thanabulpong : https://github.com/sirn

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var th = moment.defineLocale('th', {
          months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
          monthsShort : 'มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา'.split('_'),
          monthsParseExact: true,
          weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
          weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
          weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'H นาฬิกา m นาที',
              LTS : 'H นาฬิกา m นาที s วินาที',
              L : 'YYYY/MM/DD',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY เวลา H นาฬิกา m นาที',
              LLLL : 'วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที'
          },
          meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
          isPM: function (input) {
              return input === 'หลังเที่ยง';
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 12) {
                  return 'ก่อนเที่ยง';
              } else {
                  return 'หลังเที่ยง';
              }
          },
          calendar : {
              sameDay : '[วันนี้ เวลา] LT',
              nextDay : '[พรุ่งนี้ เวลา] LT',
              nextWeek : 'dddd[หน้า เวลา] LT',
              lastDay : '[เมื่อวานนี้ เวลา] LT',
              lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'อีก %s',
              past : '%sที่แล้ว',
              s : 'ไม่กี่วินาที',
              m : '1 นาที',
              mm : '%d นาที',
              h : '1 ชั่วโมง',
              hh : '%d ชั่วโมง',
              d : '1 วัน',
              dd : '%d วัน',
              M : '1 เดือน',
              MM : '%d เดือน',
              y : '1 ปี',
              yy : '%d ปี'
          }
      });

      return th;

  }));

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Tagalog/Filipino (tl-ph)
  //! author : Dan Hagman

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var tl_ph = moment.defineLocale('tl-ph', {
          months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
          monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
          weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
          weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
          weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'MM/D/YYYY',
              LL : 'MMMM D, YYYY',
              LLL : 'MMMM D, YYYY HH:mm',
              LLLL : 'dddd, MMMM DD, YYYY HH:mm'
          },
          calendar : {
              sameDay: '[Ngayon sa] LT',
              nextDay: '[Bukas sa] LT',
              nextWeek: 'dddd [sa] LT',
              lastDay: '[Kahapon sa] LT',
              lastWeek: 'dddd [huling linggo] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'sa loob ng %s',
              past : '%s ang nakalipas',
              s : 'ilang segundo',
              m : 'isang minuto',
              mm : '%d minuto',
              h : 'isang oras',
              hh : '%d oras',
              d : 'isang araw',
              dd : '%d araw',
              M : 'isang buwan',
              MM : '%d buwan',
              y : 'isang taon',
              yy : '%d taon'
          },
          ordinalParse: /\d{1,2}/,
          ordinal : function (number) {
              return number;
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return tl_ph;

  }));

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Klingon (tlh)
  //! author : Dominika Kruk : https://github.com/amaranthrose

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

      function translateFuture(output) {
          var time = output;
          time = (output.indexOf('jaj') !== -1) ?
      	time.slice(0, -3) + 'leS' :
      	(output.indexOf('jar') !== -1) ?
      	time.slice(0, -3) + 'waQ' :
      	(output.indexOf('DIS') !== -1) ?
      	time.slice(0, -3) + 'nem' :
      	time + ' pIq';
          return time;
      }

      function translatePast(output) {
          var time = output;
          time = (output.indexOf('jaj') !== -1) ?
      	time.slice(0, -3) + 'Hu’' :
      	(output.indexOf('jar') !== -1) ?
      	time.slice(0, -3) + 'wen' :
      	(output.indexOf('DIS') !== -1) ?
      	time.slice(0, -3) + 'ben' :
      	time + ' ret';
          return time;
      }

      function translate(number, withoutSuffix, string, isFuture) {
          var numberNoun = numberAsNoun(number);
          switch (string) {
              case 'mm':
                  return numberNoun + ' tup';
              case 'hh':
                  return numberNoun + ' rep';
              case 'dd':
                  return numberNoun + ' jaj';
              case 'MM':
                  return numberNoun + ' jar';
              case 'yy':
                  return numberNoun + ' DIS';
          }
      }

      function numberAsNoun(number) {
          var hundred = Math.floor((number % 1000) / 100),
      	ten = Math.floor((number % 100) / 10),
      	one = number % 10,
      	word = '';
          if (hundred > 0) {
              word += numbersNouns[hundred] + 'vatlh';
          }
          if (ten > 0) {
              word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
          }
          if (one > 0) {
              word += ((word !== '') ? ' ' : '') + numbersNouns[one];
          }
          return (word === '') ? 'pagh' : word;
      }

      var tlh = moment.defineLocale('tlh', {
          months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
          monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
          monthsParseExact : true,
          weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
          weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
          weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[DaHjaj] LT',
              nextDay: '[wa’leS] LT',
              nextWeek: 'LLL',
              lastDay: '[wa’Hu’] LT',
              lastWeek: 'LLL',
              sameElse: 'L'
          },
          relativeTime : {
              future : translateFuture,
              past : translatePast,
              s : 'puS lup',
              m : 'wa’ tup',
              mm : translate,
              h : 'wa’ rep',
              hh : translate,
              d : 'wa’ jaj',
              dd : translate,
              M : 'wa’ jar',
              MM : translate,
              y : 'wa’ DIS',
              yy : translate
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return tlh;

  }));

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : turkish (tr)
  //! authors : Erhan Gundogan : https://github.com/erhangundogan,
  //!           Burak Yiğit Kaya: https://github.com/BYK

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var suffixes = {
          1: '\'inci',
          5: '\'inci',
          8: '\'inci',
          70: '\'inci',
          80: '\'inci',
          2: '\'nci',
          7: '\'nci',
          20: '\'nci',
          50: '\'nci',
          3: '\'üncü',
          4: '\'üncü',
          100: '\'üncü',
          6: '\'ncı',
          9: '\'uncu',
          10: '\'uncu',
          30: '\'uncu',
          60: '\'ıncı',
          90: '\'ıncı'
      };

      var tr = moment.defineLocale('tr', {
          months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
          monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
          weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
          weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
          weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[bugün saat] LT',
              nextDay : '[yarın saat] LT',
              nextWeek : '[haftaya] dddd [saat] LT',
              lastDay : '[dün] LT',
              lastWeek : '[geçen hafta] dddd [saat] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : '%s sonra',
              past : '%s önce',
              s : 'birkaç saniye',
              m : 'bir dakika',
              mm : '%d dakika',
              h : 'bir saat',
              hh : '%d saat',
              d : 'bir gün',
              dd : '%d gün',
              M : 'bir ay',
              MM : '%d ay',
              y : 'bir yıl',
              yy : '%d yıl'
          },
          ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
          ordinal : function (number) {
              if (number === 0) {  // special case for zero
                  return number + '\'ıncı';
              }
              var a = number % 10,
                  b = number % 100 - a,
                  c = number >= 100 ? 100 : null;
              return number + (suffixes[a] || suffixes[b] || suffixes[c]);
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return tr;

  }));

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : talossan (tzl)
  //! author : Robin van der Vliet : https://github.com/robin0van0der0v with the help of Iustì Canun

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';



      // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
      // This is currently too difficult (maybe even impossible) to add.
      var tzl = moment.defineLocale('tzl', {
          months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
          monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
          weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
          weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
          weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
          longDateFormat : {
              LT : 'HH.mm',
              LTS : 'HH.mm.ss',
              L : 'DD.MM.YYYY',
              LL : 'D. MMMM [dallas] YYYY',
              LLL : 'D. MMMM [dallas] YYYY HH.mm',
              LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
          },
          meridiemParse: /d\'o|d\'a/i,
          isPM : function (input) {
              return 'd\'o' === input.toLowerCase();
          },
          meridiem : function (hours, minutes, isLower) {
              if (hours > 11) {
                  return isLower ? 'd\'o' : 'D\'O';
              } else {
                  return isLower ? 'd\'a' : 'D\'A';
              }
          },
          calendar : {
              sameDay : '[oxhi à] LT',
              nextDay : '[demà à] LT',
              nextWeek : 'dddd [à] LT',
              lastDay : '[ieiri à] LT',
              lastWeek : '[sür el] dddd [lasteu à] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'osprei %s',
              past : 'ja%s',
              s : processRelativeTime,
              m : processRelativeTime,
              mm : processRelativeTime,
              h : processRelativeTime,
              hh : processRelativeTime,
              d : processRelativeTime,
              dd : processRelativeTime,
              M : processRelativeTime,
              MM : processRelativeTime,
              y : processRelativeTime,
              yy : processRelativeTime
          },
          ordinalParse: /\d{1,2}\./,
          ordinal : '%d.',
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      function processRelativeTime(number, withoutSuffix, key, isFuture) {
          var format = {
              's': ['viensas secunds', '\'iensas secunds'],
              'm': ['\'n míut', '\'iens míut'],
              'mm': [number + ' míuts', '' + number + ' míuts'],
              'h': ['\'n þora', '\'iensa þora'],
              'hh': [number + ' þoras', '' + number + ' þoras'],
              'd': ['\'n ziua', '\'iensa ziua'],
              'dd': [number + ' ziuas', '' + number + ' ziuas'],
              'M': ['\'n mes', '\'iens mes'],
              'MM': [number + ' mesen', '' + number + ' mesen'],
              'y': ['\'n ar', '\'iens ar'],
              'yy': [number + ' ars', '' + number + ' ars']
          };
          return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
      }

      return tzl;

  }));

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Morocco Central Atlas Tamaziɣt in Latin (tzm-latn)
  //! author : Abdel Said : https://github.com/abdelsaid

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var tzm_latn = moment.defineLocale('tzm-latn', {
          months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
          monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
          weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
          weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
          weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[asdkh g] LT',
              nextDay: '[aska g] LT',
              nextWeek: 'dddd [g] LT',
              lastDay: '[assant g] LT',
              lastWeek: 'dddd [g] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'dadkh s yan %s',
              past : 'yan %s',
              s : 'imik',
              m : 'minuḍ',
              mm : '%d minuḍ',
              h : 'saɛa',
              hh : '%d tassaɛin',
              d : 'ass',
              dd : '%d ossan',
              M : 'ayowr',
              MM : '%d iyyirn',
              y : 'asgas',
              yy : '%d isgasn'
          },
          week : {
              dow : 6, // Saturday is the first day of the week.
              doy : 12  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return tzm_latn;

  }));

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : Morocco Central Atlas Tamaziɣt (tzm)
  //! author : Abdel Said : https://github.com/abdelsaid

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var tzm = moment.defineLocale('tzm', {
          months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
          monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
          weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
          weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
          weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS: 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
              nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
              nextWeek: 'dddd [ⴴ] LT',
              lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
              lastWeek: 'dddd [ⴴ] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
              past : 'ⵢⴰⵏ %s',
              s : 'ⵉⵎⵉⴽ',
              m : 'ⵎⵉⵏⵓⴺ',
              mm : '%d ⵎⵉⵏⵓⴺ',
              h : 'ⵙⴰⵄⴰ',
              hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
              d : 'ⴰⵙⵙ',
              dd : '%d oⵙⵙⴰⵏ',
              M : 'ⴰⵢoⵓⵔ',
              MM : '%d ⵉⵢⵢⵉⵔⵏ',
              y : 'ⴰⵙⴳⴰⵙ',
              yy : '%d ⵉⵙⴳⴰⵙⵏ'
          },
          week : {
              dow : 6, // Saturday is the first day of the week.
              doy : 12  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return tzm;

  }));

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : ukrainian (uk)
  //! author : zemlanin : https://github.com/zemlanin
  //! Author : Menelion Elensúle : https://github.com/Oire

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      function plural(word, num) {
          var forms = word.split('_');
          return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
      }
      function relativeTimeWithPlural(number, withoutSuffix, key) {
          var format = {
              'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
              'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
              'dd': 'день_дні_днів',
              'MM': 'місяць_місяці_місяців',
              'yy': 'рік_роки_років'
          };
          if (key === 'm') {
              return withoutSuffix ? 'хвилина' : 'хвилину';
          }
          else if (key === 'h') {
              return withoutSuffix ? 'година' : 'годину';
          }
          else {
              return number + ' ' + plural(format[key], +number);
          }
      }
      function weekdaysCaseReplace(m, format) {
          var weekdays = {
              'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
              'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
              'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
          },
          nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
              'accusative' :
              ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
                  'genitive' :
                  'nominative');
          return weekdays[nounCase][m.day()];
      }
      function processHoursFunction(str) {
          return function () {
              return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
          };
      }

      var uk = moment.defineLocale('uk', {
          months : {
              'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
              'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
          },
          monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
          weekdays : weekdaysCaseReplace,
          weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
          weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD.MM.YYYY',
              LL : 'D MMMM YYYY р.',
              LLL : 'D MMMM YYYY р., HH:mm',
              LLLL : 'dddd, D MMMM YYYY р., HH:mm'
          },
          calendar : {
              sameDay: processHoursFunction('[Сьогодні '),
              nextDay: processHoursFunction('[Завтра '),
              lastDay: processHoursFunction('[Вчора '),
              nextWeek: processHoursFunction('[У] dddd ['),
              lastWeek: function () {
                  switch (this.day()) {
                  case 0:
                  case 3:
                  case 5:
                  case 6:
                      return processHoursFunction('[Минулої] dddd [').call(this);
                  case 1:
                  case 2:
                  case 4:
                      return processHoursFunction('[Минулого] dddd [').call(this);
                  }
              },
              sameElse: 'L'
          },
          relativeTime : {
              future : 'за %s',
              past : '%s тому',
              s : 'декілька секунд',
              m : relativeTimeWithPlural,
              mm : relativeTimeWithPlural,
              h : 'годину',
              hh : relativeTimeWithPlural,
              d : 'день',
              dd : relativeTimeWithPlural,
              M : 'місяць',
              MM : relativeTimeWithPlural,
              y : 'рік',
              yy : relativeTimeWithPlural
          },
          // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
          meridiemParse: /ночі|ранку|дня|вечора/,
          isPM: function (input) {
              return /^(дня|вечора)$/.test(input);
          },
          meridiem : function (hour, minute, isLower) {
              if (hour < 4) {
                  return 'ночі';
              } else if (hour < 12) {
                  return 'ранку';
              } else if (hour < 17) {
                  return 'дня';
              } else {
                  return 'вечора';
              }
          },
          ordinalParse: /\d{1,2}-(й|го)/,
          ordinal: function (number, period) {
              switch (period) {
              case 'M':
              case 'd':
              case 'DDD':
              case 'w':
              case 'W':
                  return number + '-й';
              case 'D':
                  return number + '-го';
              default:
                  return number;
              }
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 1st is the first week of the year.
          }
      });

      return uk;

  }));

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : uzbek (uz)
  //! author : Sardor Muminov : https://github.com/muminoff

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var uz = moment.defineLocale('uz', {
          months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
          monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
          weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
          weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
          weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'D MMMM YYYY, dddd HH:mm'
          },
          calendar : {
              sameDay : '[Бугун соат] LT [да]',
              nextDay : '[Эртага] LT [да]',
              nextWeek : 'dddd [куни соат] LT [да]',
              lastDay : '[Кеча соат] LT [да]',
              lastWeek : '[Утган] dddd [куни соат] LT [да]',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'Якин %s ичида',
              past : 'Бир неча %s олдин',
              s : 'фурсат',
              m : 'бир дакика',
              mm : '%d дакика',
              h : 'бир соат',
              hh : '%d соат',
              d : 'бир кун',
              dd : '%d кун',
              M : 'бир ой',
              MM : '%d ой',
              y : 'бир йил',
              yy : '%d йил'
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 7  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return uz;

  }));

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : vietnamese (vi)
  //! author : Bang Nguyen : https://github.com/bangnk

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var vi = moment.defineLocale('vi', {
          months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
          monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
          monthsParseExact : true,
          weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
          weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
          weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
          weekdaysParseExact : true,
          meridiemParse: /sa|ch/i,
          isPM : function (input) {
              return /^ch$/i.test(input);
          },
          meridiem : function (hours, minutes, isLower) {
              if (hours < 12) {
                  return isLower ? 'sa' : 'SA';
              } else {
                  return isLower ? 'ch' : 'CH';
              }
          },
          longDateFormat : {
              LT : 'HH:mm',
              LTS : 'HH:mm:ss',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM [năm] YYYY',
              LLL : 'D MMMM [năm] YYYY HH:mm',
              LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
              l : 'DD/M/YYYY',
              ll : 'D MMM YYYY',
              lll : 'D MMM YYYY HH:mm',
              llll : 'ddd, D MMM YYYY HH:mm'
          },
          calendar : {
              sameDay: '[Hôm nay lúc] LT',
              nextDay: '[Ngày mai lúc] LT',
              nextWeek: 'dddd [tuần tới lúc] LT',
              lastDay: '[Hôm qua lúc] LT',
              lastWeek: 'dddd [tuần rồi lúc] LT',
              sameElse: 'L'
          },
          relativeTime : {
              future : '%s tới',
              past : '%s trước',
              s : 'vài giây',
              m : 'một phút',
              mm : '%d phút',
              h : 'một giờ',
              hh : '%d giờ',
              d : 'một ngày',
              dd : '%d ngày',
              M : 'một tháng',
              MM : '%d tháng',
              y : 'một năm',
              yy : '%d năm'
          },
          ordinalParse: /\d{1,2}/,
          ordinal : function (number) {
              return number;
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return vi;

  }));

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : pseudo (x-pseudo)
  //! author : Andrew Hood : https://github.com/andrewhood125

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var x_pseudo = moment.defineLocale('x-pseudo', {
          months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
          monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
          monthsParseExact : true,
          weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
          weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
          weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
          weekdaysParseExact : true,
          longDateFormat : {
              LT : 'HH:mm',
              L : 'DD/MM/YYYY',
              LL : 'D MMMM YYYY',
              LLL : 'D MMMM YYYY HH:mm',
              LLLL : 'dddd, D MMMM YYYY HH:mm'
          },
          calendar : {
              sameDay : '[T~ódá~ý át] LT',
              nextDay : '[T~ómó~rró~w át] LT',
              nextWeek : 'dddd [át] LT',
              lastDay : '[Ý~ést~érdá~ý át] LT',
              lastWeek : '[L~ást] dddd [át] LT',
              sameElse : 'L'
          },
          relativeTime : {
              future : 'í~ñ %s',
              past : '%s á~gó',
              s : 'á ~féw ~sécó~ñds',
              m : 'á ~míñ~úté',
              mm : '%d m~íñú~tés',
              h : 'á~ñ hó~úr',
              hh : '%d h~óúrs',
              d : 'á ~dáý',
              dd : '%d d~áýs',
              M : 'á ~móñ~th',
              MM : '%d m~óñt~hs',
              y : 'á ~ýéár',
              yy : '%d ý~éárs'
          },
          ordinalParse: /\d{1,2}(th|st|nd|rd)/,
          ordinal : function (number) {
              var b = number % 10,
                  output = (~~(number % 100 / 10) === 1) ? 'th' :
                  (b === 1) ? 'st' :
                  (b === 2) ? 'nd' :
                  (b === 3) ? 'rd' : 'th';
              return number + output;
          },
          week : {
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return x_pseudo;

  }));

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : chinese (zh-cn)
  //! author : suupic : https://github.com/suupic
  //! author : Zeno Zeng : https://github.com/zenozeng

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var zh_cn = moment.defineLocale('zh-cn', {
          months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
          monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
          weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
          weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
          weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
          longDateFormat : {
              LT : 'Ah点mm分',
              LTS : 'Ah点m分s秒',
              L : 'YYYY-MM-DD',
              LL : 'YYYY年MMMD日',
              LLL : 'YYYY年MMMD日Ah点mm分',
              LLLL : 'YYYY年MMMD日ddddAh点mm分',
              l : 'YYYY-MM-DD',
              ll : 'YYYY年MMMD日',
              lll : 'YYYY年MMMD日Ah点mm分',
              llll : 'YYYY年MMMD日ddddAh点mm分'
          },
          meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
          meridiemHour: function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === '凌晨' || meridiem === '早上' ||
                      meridiem === '上午') {
                  return hour;
              } else if (meridiem === '下午' || meridiem === '晚上') {
                  return hour + 12;
              } else {
                  // '中午'
                  return hour >= 11 ? hour : hour + 12;
              }
          },
          meridiem : function (hour, minute, isLower) {
              var hm = hour * 100 + minute;
              if (hm < 600) {
                  return '凌晨';
              } else if (hm < 900) {
                  return '早上';
              } else if (hm < 1130) {
                  return '上午';
              } else if (hm < 1230) {
                  return '中午';
              } else if (hm < 1800) {
                  return '下午';
              } else {
                  return '晚上';
              }
          },
          calendar : {
              sameDay : function () {
                  return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
              },
              nextDay : function () {
                  return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
              },
              lastDay : function () {
                  return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
              },
              nextWeek : function () {
                  var startOfWeek, prefix;
                  startOfWeek = moment().startOf('week');
                  prefix = this.diff(startOfWeek, 'days') >= 7 ? '[下]' : '[本]';
                  return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
              },
              lastWeek : function () {
                  var startOfWeek, prefix;
                  startOfWeek = moment().startOf('week');
                  prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
                  return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
              },
              sameElse : 'LL'
          },
          ordinalParse: /\d{1,2}(日|月|周)/,
          ordinal : function (number, period) {
              switch (period) {
              case 'd':
              case 'D':
              case 'DDD':
                  return number + '日';
              case 'M':
                  return number + '月';
              case 'w':
              case 'W':
                  return number + '周';
              default:
                  return number;
              }
          },
          relativeTime : {
              future : '%s内',
              past : '%s前',
              s : '几秒',
              m : '1 分钟',
              mm : '%d 分钟',
              h : '1 小时',
              hh : '%d 小时',
              d : '1 天',
              dd : '%d 天',
              M : '1 个月',
              MM : '%d 个月',
              y : '1 年',
              yy : '%d 年'
          },
          week : {
              // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
              dow : 1, // Monday is the first day of the week.
              doy : 4  // The week that contains Jan 4th is the first week of the year.
          }
      });

      return zh_cn;

  }));

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

  //! moment.js locale configuration
  //! locale : traditional chinese (zh-tw)
  //! author : Ben : https://github.com/ben-lin

  ;(function (global, factory) {
      true ? factory(__webpack_require__(1)) :
     typeof define === 'function' && define.amd ? define(['moment'], factory) :
     factory(global.moment)
  }(this, function (moment) { 'use strict';


      var zh_tw = moment.defineLocale('zh-tw', {
          months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
          monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
          weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
          weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
          weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
          longDateFormat : {
              LT : 'Ah點mm分',
              LTS : 'Ah點m分s秒',
              L : 'YYYY年MMMD日',
              LL : 'YYYY年MMMD日',
              LLL : 'YYYY年MMMD日Ah點mm分',
              LLLL : 'YYYY年MMMD日ddddAh點mm分',
              l : 'YYYY年MMMD日',
              ll : 'YYYY年MMMD日',
              lll : 'YYYY年MMMD日Ah點mm分',
              llll : 'YYYY年MMMD日ddddAh點mm分'
          },
          meridiemParse: /早上|上午|中午|下午|晚上/,
          meridiemHour : function (hour, meridiem) {
              if (hour === 12) {
                  hour = 0;
              }
              if (meridiem === '早上' || meridiem === '上午') {
                  return hour;
              } else if (meridiem === '中午') {
                  return hour >= 11 ? hour : hour + 12;
              } else if (meridiem === '下午' || meridiem === '晚上') {
                  return hour + 12;
              }
          },
          meridiem : function (hour, minute, isLower) {
              var hm = hour * 100 + minute;
              if (hm < 900) {
                  return '早上';
              } else if (hm < 1130) {
                  return '上午';
              } else if (hm < 1230) {
                  return '中午';
              } else if (hm < 1800) {
                  return '下午';
              } else {
                  return '晚上';
              }
          },
          calendar : {
              sameDay : '[今天]LT',
              nextDay : '[明天]LT',
              nextWeek : '[下]ddddLT',
              lastDay : '[昨天]LT',
              lastWeek : '[上]ddddLT',
              sameElse : 'L'
          },
          ordinalParse: /\d{1,2}(日|月|週)/,
          ordinal : function (number, period) {
              switch (period) {
              case 'd' :
              case 'D' :
              case 'DDD' :
                  return number + '日';
              case 'M' :
                  return number + '月';
              case 'w' :
              case 'W' :
                  return number + '週';
              default :
                  return number;
              }
          },
          relativeTime : {
              future : '%s內',
              past : '%s前',
              s : '幾秒',
              m : '1分鐘',
              mm : '%d分鐘',
              h : '1小時',
              hh : '%d小時',
              d : '1天',
              dd : '%d天',
              M : '1個月',
              MM : '%d個月',
              y : '1年',
              yy : '%d年'
          }
      });

      return zh_tw;

  }));

/***/ },
/* 125 */
/***/ function(module, exports) {

  // shim for using process in browser
  var process = module.exports = {};

  // cached from whatever global is present so that test runners that stub it
  // don't break things.  But we need to wrap it in a try catch in case it is
  // wrapped in strict mode code which doesn't define any globals.  It's inside a
  // function because try/catches deoptimize in certain engines.

  var cachedSetTimeout;
  var cachedClearTimeout;

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  (function () {
      try {
          if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
          } else {
              cachedSetTimeout = defaultSetTimout;
          }
      } catch (e) {
          cachedSetTimeout = defaultSetTimout;
      }
      try {
          if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
          } else {
              cachedClearTimeout = defaultClearTimeout;
          }
      } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
      }
  } ())
  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }

  process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  };

  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};

  function noop() {}

  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;

  process.binding = function (name) {
      throw new Error('process.binding is not supported');
  };

  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };


/***/ },
/* 126 */
/***/ function(module, exports) {

  /**
   * Check if `obj` is an object.
   *
   * @param {Object} obj
   * @return {Boolean}
   * @api private
   */

  function isObject(obj) {
    return null !== obj && 'object' === typeof obj;
  }

  module.exports = isObject;


/***/ },
/* 127 */
/***/ function(module, exports) {

  "use strict";
  function getQueryValue(name, url) {
      if (!url)
          url = window.location.href;
      name = name.replace(/[\[\]]/g, "\\$&");
      var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"), results = regex.exec(url);
      if (!results)
          return null;
      if (!results[2])
          return '';
      return decodeURIComponent(results[2].replace(/\+/g, " "));
  }
  exports.getQueryValue = getQueryValue;


/***/ },
/* 128 */
/***/ function(module, exports) {

  module.exports=window.$;


/***/ },
/* 129 */
/***/ function(module, exports) {

  "use strict";
  function init(actions) {
      $(document.body).on("click", function (e) {
          var p = e.target;
          var action;
          for (;;) {
              if (action = (p.getAttribute && p.getAttribute("data-action")))
                  break;
              p = p.parentElement;
              if (!p || p == document.body)
                  return;
          }
          var act = actions[action];
          if (!act)
              return;
          if (act instanceof Function)
              act({ element: p });
          else {
              var args = {
                  element: p
              };
              if (act.args)
                  act.args.forEach(function (k) {
                      args[k] = p.getAttribute("data-" + k);
                  });
              act.exec(args);
          }
      });
  }
  exports.init = init;


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var superagent = __webpack_require__(180);
  function uri_encode(values) {
      var qs = [];
      for (var k in values) {
          var v = values[k];
          if (v === undefined || v === null)
              continue;
          qs.push(encodeURIComponent(k) + "=" + encodeURIComponent(v + ""));
      }
      return qs.join("&");
  }
  ;
  function call(type, method, query, post, opts) {
      return new Promise(function (resolve, reject) {
          var uri = "/api/" + type + "/" + method;
          var q = {};
          if (query)
              for (var k in query)
                  q[k] = query[k];
          if (opts) {
              if (opts.paging) {
                  q._po = opts.paging.offset || undefined;
                  q._pl = opts.paging.limit || undefined;
                  q._pm = opts.paging.sortMethod || undefined;
                  q._ps = opts.paging.sortOrder || undefined;
                  if (opts.paging.totalRequired)
                      q._pt = 1;
              }
              if (opts.query)
                  for (var k in opts.query)
                      q[k] = opts.query[k];
          }
          var has_query_vars = false;
          for (var k in q) {
              has_query_vars = true;
              break;
          }
          if (has_query_vars)
              uri += "?" + uri_encode(q);
          var sa = post ? superagent("POST", uri) : superagent(uri);
          if (post)
              sa.send(post);
          return sa.end(function (e, r) {
              if (e) {
                  return reject({
                      _netDown: !e.status && !r,
                      _error: r && r.body && r.body.Message || "网络故障，请稍后再试..."
                  });
              }
              resolve(r.body);
          });
      });
  }
  exports.call = call;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  /**
  *
  *  Base64 encode / decode
  *
  *  @author haitao.tu
  *  @date   2010-04-26
  *  @email  tuhaitao@foxmail.com
  *
  */
  var utf8 = __webpack_require__(134);
  // private property  
  var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  // public method for encoding  
  function encode(input) {
      var output = "";
      var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
      var i = 0;
      input = utf8.utf8encode(input);
      while (i < input.length) {
          chr1 = input.charCodeAt(i++);
          chr2 = input.charCodeAt(i++);
          chr3 = input.charCodeAt(i++);
          enc1 = chr1 >> 2;
          enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
          enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
          enc4 = chr3 & 63;
          if (isNaN(chr2)) {
              enc3 = enc4 = 64;
          }
          else if (isNaN(chr3)) {
              enc4 = 64;
          }
          output = output +
              _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
              _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
      }
      return output;
  }
  exports.encode = encode;
  // public method for decoding  
  function decode(input) {
      var output = "";
      var chr1, chr2, chr3;
      var enc1, enc2, enc3, enc4;
      var i = 0;
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
      while (i < input.length) {
          enc1 = _keyStr.indexOf(input.charAt(i++));
          enc2 = _keyStr.indexOf(input.charAt(i++));
          enc3 = _keyStr.indexOf(input.charAt(i++));
          enc4 = _keyStr.indexOf(input.charAt(i++));
          chr1 = (enc1 << 2) | (enc2 >> 4);
          chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
          chr3 = ((enc3 & 3) << 6) | enc4;
          output = output + String.fromCharCode(chr1);
          if (enc3 != 64) {
              output = output + String.fromCharCode(chr2);
          }
          if (enc4 != 64) {
              output = output + String.fromCharCode(chr3);
          }
      }
      output = utf8.utf8decode(output);
      return output;
  }
  exports.decode = decode;
  //// private method for UTF-8 encoding  
  //var _utf8_encode = function (string:string) {  
  //    string = string.replace(/\r\n/g,"\n");  
  //    var utftext = "";  
  //    for (var n = 0; n < string.length; n++) {  
  //        var c = string.charCodeAt(n);  
  //        if (c < 128) {  
  //            utftext += String.fromCharCode(c);  
  //        } else if((c > 127) && (c < 2048)) {  
  //            utftext += String.fromCharCode((c >> 6) | 192);  
  //            utftext += String.fromCharCode((c & 63) | 128);  
  //        } else {  
  //            utftext += String.fromCharCode((c >> 12) | 224);  
  //            utftext += String.fromCharCode(((c >> 6) & 63) | 128);  
  //            utftext += String.fromCharCode((c & 63) | 128);  
  //        }  
  //    }  
  //    return utftext;  
  //}  
  //// private method for UTF-8 decoding  
  //var _utf8_decode = function (utftext:string) {  
  //    var string = "";  
  //    var i = 0;  
  //    var c = 0;
  //    var c1 = 0;
  //    var c2 = 0;
  //    var c3 = 0;
  //    while ( i < utftext.length ) {  
  //        c = utftext.charCodeAt(i);  
  //        if (c < 128) {  
  //            string += String.fromCharCode(c);  
  //            i++;  
  //        } else if((c > 191) && (c < 224)) {  
  //            c2 = utftext.charCodeAt(i+1);  
  //            string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));  
  //            i += 2;  
  //        } else {  
  //            c2 = utftext.charCodeAt(i+1);  
  //            c3 = utftext.charCodeAt(i+2);  
  //            string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));  
  //            i += 3;  
  //        }      
  //    }  
  //    return string;   
  //}   


/***/ },
/* 132 */
/***/ function(module, exports) {

  /* lazyload.js (c) Lorenzo Giuliani
   * MIT License (http://www.opensource.org/licenses/mit-license.html)
   *
   * expects a list of:
   * `<img src="blank.gif" data-src="my_image.png" width="600" height="400" class="lazy">`
   */
  "use strict";
  module.exports = function (window) {
      var $q = function (q, res) {
          if (document.querySelectorAll) {
              res = document.querySelectorAll(q);
          }
          else {
              var d = document, a = d.styleSheets[0] || d.createStyleSheet();
              a.addRule(q, 'f:b');
              for (var l = d.all, b = 0, c = [], f = l.length; b < f; b++)
                  l[b].currentStyle.f && c.push(l[b]);
              a.removeRule(0);
              res = c;
          }
          return res;
      }, addEventListener = function (evt, fn) {
          window.addEventListener
              ? window.addEventListener(evt, fn, false)
              : (window.attachEvent)
                  ? window.attachEvent('on' + evt, fn)
                  : window['on' + evt] = fn;
      }, _has = function (obj, key) {
          return Object.prototype.hasOwnProperty.call(obj, key);
      };
      function loadImage(el, fn) {
          var img = new Image(), src = el.getAttribute('data-src');
          img.onload = function () {
              if (!!el.parent)
                  el.parent.replaceChild(img, el);
              else
                  el.src = src;
              fn ? fn() : null;
          };
          img.src = src;
      }
      function elementInViewport(el) {
          var rect = el.getBoundingClientRect();
          return (rect.top >= 0
              && rect.left >= 0
              && rect.top <= (window.innerHeight || document.documentElement.clientHeight));
      }
      var images = new Array();
      var query = $q('img.lazy', undefined);
      var processScroll = function () {
          for (var i = 0; i < images.length; i++) {
              if (elementInViewport(images[i])) {
                  loadImage(images[i], function () {
                      images.splice(i, i);
                  });
              }
          }
          ;
      };
      // Array.prototype.slice.call is not callable under our lovely IE8 
      for (var i = 0; i < query.length; i++) {
          images.push(query[i]);
      }
      ;
      processScroll();
      addEventListener('scroll', processScroll);
  };


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var svrTimeAdjust = 0;
  var svrTimeAdjustInited = false;
  var svrTimeAdjustReceived = false;
  function initTimeAdjust() {
      var start = Date.now();
      api.System.JsTime().then(function (re) {
          var end = Date.now();
          svrTimeAdjust = re + (end - start) / 2 - end;
          svrTimeAdjustReceived = true;
      });
  }
  function serverTime() {
      if (!svrTimeAdjustInited) {
          svrTimeAdjustInited = true;
          initTimeAdjust();
      }
      return new Date(Date.now() + svrTimeAdjust);
  }
  exports.serverTime = serverTime;
  window.serverTime = {
      now: serverTime,
      inited: function () { return svrTimeAdjustReceived; }
  };


/***/ },
/* 134 */
/***/ function(module, exports) {

  /*--------------------------------------------------------------------------*/
  "use strict";
  var stringFromCharCode = String.fromCharCode;
  // Taken from https://mths.be/punycode
  function ucs2decode(string) {
      var output = [];
      var counter = 0;
      var length = string.length;
      var value;
      var extra;
      while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
              // high surrogate, and there is a next character
              extra = string.charCodeAt(counter++);
              if ((extra & 0xFC00) == 0xDC00) {
                  output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
              }
              else {
                  // unmatched surrogate; only append this code unit, in case the next
                  // code unit is the high surrogate of a surrogate pair
                  output.push(value);
                  counter--;
              }
          }
          else {
              output.push(value);
          }
      }
      return output;
  }
  // Taken from https://mths.be/punycode
  function ucs2encode(array) {
      var length = array.length;
      var index = -1;
      var value;
      var output = '';
      while (++index < length) {
          value = array[index];
          if (value > 0xFFFF) {
              value -= 0x10000;
              output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
              value = 0xDC00 | value & 0x3FF;
          }
          output += stringFromCharCode(value);
      }
      return output;
  }
  function checkScalarValue(codePoint) {
      if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
          throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
              ' is not a scalar value');
      }
  }
  /*--------------------------------------------------------------------------*/
  function createByte(codePoint, shift) {
      return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
  }
  function encodeCodePoint(codePoint) {
      if ((codePoint & 0xFFFFFF80) == 0) {
          return stringFromCharCode(codePoint);
      }
      var symbol = '';
      if ((codePoint & 0xFFFFF800) == 0) {
          symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
      }
      else if ((codePoint & 0xFFFF0000) == 0) {
          checkScalarValue(codePoint);
          symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
          symbol += createByte(codePoint, 6);
      }
      else if ((codePoint & 0xFFE00000) == 0) {
          symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
          symbol += createByte(codePoint, 12);
          symbol += createByte(codePoint, 6);
      }
      symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
      return symbol;
  }
  function utf8encode(string) {
      var codePoints = ucs2decode(string);
      var length = codePoints.length;
      var index = -1;
      var codePoint;
      var byteString = '';
      while (++index < length) {
          codePoint = codePoints[index];
          byteString += encodeCodePoint(codePoint);
      }
      return byteString;
  }
  exports.utf8encode = utf8encode;
  /*--------------------------------------------------------------------------*/
  function readContinuationByte() {
      if (byteIndex >= byteCount) {
          throw Error('Invalid byte index');
      }
      var continuationByte = byteArray[byteIndex] & 0xFF;
      byteIndex++;
      if ((continuationByte & 0xC0) == 0x80) {
          return continuationByte & 0x3F;
      }
      // If we end up here, it��s not a continuation byte
      throw Error('Invalid continuation byte');
  }
  function decodeSymbol() {
      var byte1;
      var byte2;
      var byte3;
      var byte4;
      var codePoint;
      if (byteIndex > byteCount) {
          throw Error('Invalid byte index');
      }
      if (byteIndex == byteCount) {
          return false;
      }
      // Read first byte
      byte1 = byteArray[byteIndex] & 0xFF;
      byteIndex++;
      // 1-byte sequence (no continuation bytes)
      if ((byte1 & 0x80) == 0) {
          return byte1;
      }
      // 2-byte sequence
      if ((byte1 & 0xE0) == 0xC0) {
          byte2 = readContinuationByte();
          codePoint = ((byte1 & 0x1F) << 6) | byte2;
          if (codePoint >= 0x80) {
              return codePoint;
          }
          else {
              throw Error('Invalid continuation byte');
          }
      }
      // 3-byte sequence (may include unpaired surrogates)
      if ((byte1 & 0xF0) == 0xE0) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
          if (codePoint >= 0x0800) {
              checkScalarValue(codePoint);
              return codePoint;
          }
          else {
              throw Error('Invalid continuation byte');
          }
      }
      // 4-byte sequence
      if ((byte1 & 0xF8) == 0xF0) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          byte4 = readContinuationByte();
          codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
              (byte3 << 0x06) | byte4;
          if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
              return codePoint;
          }
      }
      throw Error('Invalid UTF-8 detected');
  }
  var byteArray;
  var byteCount;
  var byteIndex;
  function utf8decode(byteString) {
      byteArray = ucs2decode(byteString);
      byteCount = byteArray.length;
      byteIndex = 0;
      var codePoints = [];
      var tmp;
      while ((tmp = decodeSymbol()) !== false) {
          codePoints.push(tmp);
      }
      return ucs2encode(codePoints);
  }
  exports.utf8decode = utf8decode;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var Vue = __webpack_require__(3);
  var component = Vue.extend({
      props: {
          total: { type: Number, required: true },
          current: { type: Number, required: true },
          itemsPerPage: { type: Number, default: 20 },
          buttonCount: { type: Number, default: 7 }
      },
      template: "\n<nav class='pagination' v-if='items.length>1' >\n    <ul>\n        <li v-for=\"i in items\" v-bind:class='i.className' v-on:click='click(i)'>{{i.text}}</li>\n    </ul> \n</nav>",
      data: function () {
          return {};
      },
      computed: {
          items: function () {
              var itemsPerPage = this.itemsPerPage;
              var page = Math.floor(this.current / itemsPerPage);
              var pageCount = Math.floor(this.total / itemsPerPage);
              if (this.total % this.itemsPerPage)
                  pageCount++;
              var btnCount = this.buttonCount || 7;
              var begin = page - Math.floor(btnCount / 2);
              if (begin < 0)
                  begin = 0;
              var end = begin + btnCount;
              if (end >= pageCount) {
                  end = pageCount;
                  begin = end - btnCount;
                  if (begin < 0)
                      begin = 0;
              }
              var new_item = function (idx, title) {
                  return ({ className: 'pg', index: idx, text: title || (idx + 1).toString() });
              };
              var items = [];
              if (begin > 0)
                  items.push(new_item(0));
              if (begin > 1)
                  items.push({ className: "sp", text: '...' });
              for (var i = begin; i < end; i++)
                  if (i == page)
                      items.push({ className: "active", text: (i + 1).toString() });
                  else
                      items.push(new_item(i));
              if (end < pageCount - 1)
                  items.push({ className: "sp", text: '...' });
              if (end < pageCount)
                  items.push(new_item(pageCount - 1));
              return items;
          }
      },
      methods: {
          click: function (i) {
              if (i.index === undefined)
                  return;
              this.$dispatch('pageChanged', i.index * this.itemsPerPage, this.itemsPerPage);
          }
      }
  });
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = component;


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  //moment.locale("zh-cn");
  var header = __webpack_require__(6);
  var data_table_1 = __webpack_require__(8);
  module.exports = function () {
      header();
      var today = moment().startOf("day");
      var timeRanges = [
          { name: "所有", range: function () { return { begin: null, end: null }; } },
          { name: '今天', range: function () { return { begin: moment().startOf("day"), end: null }; } },
          { name: '本周', range: function () { return { begin: moment().startOf("week"), end: null }; } },
          { name: '本月', range: function () { return { begin: moment().startOf("month"), end: null }; } },
          { name: '最近三个月', range: function () { return { begin: moment().subtract(3, "month"), end: null }; } }
      ];
      var platformMap = {};
      var data = {
          timeRanges: timeRanges,
          curTimeRange: timeRanges[0],
          recs: [],
          platform: 0,
          platforms: [],
          state: "AfterProcessing",
          ident: "",
          version: 0,
          total: 0
      };
      function formatRecord(i) {
          i.PaymentPlatform = platformMap["p" + i.PaymentPlatformId];
          i.State = (i.State == "Refunding" ? "退款中" :
              i.State == "Failed" ? "充值失败" :
                  i.State == "Refunded" ? "已退款" :
                      "完成");
          i.CreatedTime = time.format(i.CreatedTime);
      }
      function reload(pg) {
          var dr = data.curTimeRange;
          var tr = dr && dr.range() || { begin: null, end: null };
          api.Account.ListDepositRecord(data.ident || null, tr.begin, tr.end, data.platform, (data.state == "All" ? null : data.state), { paging: pg }).then(function (re) {
              re.Items.forEach(formatRecord);
              data.recs = re.Items;
              if (pg.totalRequired)
                  data.total = re.Total || 0;
          });
      }
      var vm = new Vue({
          el: "#recharge-history",
          data: data,
          methods: {
              setTimeRange: function (r) {
                  this.curTimeRange = r;
                  this.version++;
              },
              refresh: function (r) {
                  setTimeout(function () {
                      r.State = "正在刷新...";
                      data.recs = data.recs.slice();
                      api.Account.RefreshDepositRecord(r.Id).then(function (re) {
                          formatRecord(re);
                          data.recs = data.recs.map(function (r) { return r.Id == re.Id ? re : r; });
                      }, function (e) {
                          r.State = "未完成";
                          data.recs = data.recs.slice();
                      });
                  }, 1);
              }
          },
          watch: {
              platform: function (v) {
                  this.version++;
              },
              state: function (v) {
                  this.version++;
              },
              ident: function (v) {
                  this.version++;
              }
          },
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  reload(pg);
              }
          }
      });
      api.PaymentPlatform.List(true).then(function (re) {
          re.forEach(function (r) { return platformMap["p" + r.Id] = r.Name; });
          re.unshift({ Id: null, Name: "全部" });
          data.platforms = re;
          data.platform = re[0].Id;
      });
      //reload(true);
  };


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var tooltip = __webpack_require__(11);
  var Vue = __webpack_require__(3);
  var activities = __webpack_require__(12);
  var Debouncer_1 = __webpack_require__(185);
  var uri = __webpack_require__(127);
  module.exports = function () {
      var amounts = [
          { value: 50 },
          { value: 100 },
          { value: 200 },
          { value: 500 },
          { value: 1000 }
      ];
      var data = {
          amounts: amounts,
          curAmount: amounts[0],
          platforms: [],
          curPlatform: null,
          otherAmount: 50,
          orgOtherAmount: 50,
          termsAccepted: true,
          executing: false,
          activityAmount: 0,
          activities: [],
          message: null
      };
      var rechargeAmount = function () {
          return data.curAmount ? data.curAmount.value : data.otherAmount;
      };
      var finalAmount = function () {
          return rechargeAmount() + data.activityAmount;
      };
      var debouncer = new Debouncer_1.default();
      var updateActivity = function () {
          return debouncer.exec(function () {
              return activities.getResults("账户充值完成", rechargeAmount()).then(function (re) {
                  data.activities = re.activities;
                  data.activityAmount = re.totals["云币"] || 0;
              });
          }, 50);
      };
      var vm = new Vue({
          el: "#recharge",
          data: data,
          computed: {
              rechargeAmount: rechargeAmount,
              finalAmount: finalAmount
          },
          methods: {
              setAmount: function (amount) {
                  if (amount != this.curAmount) {
                      this.curAmount = amount;
                      updateActivity();
                  }
              },
              setPlatform: function (p) {
                  if (p != this.curPlatform) {
                      this.curPlatform = p;
                      updateActivity();
                  }
              },
              submit: function () {
                  if (data.executing)
                      return;
                  if (!data.termsAccepted) {
                      tooltip.show($("#termsLink"), "请先阅读服务协议");
                      return;
                  }
                  var amount = rechargeAmount();
                  if (!amount)
                      return;
                  data.executing = true;
                  data.message = "正在请求，请稍后...";
                  var authWindow = window.open('about:blank');
                  var cb = "/account/rechargecompleted/{DepositId}";
                  var jump = uri.getQueryValue("jump");
                  if (jump) {
                      cb += "?jump=" + encodeURIComponent(jump);
                      var title = uri.getQueryValue("title");
                      if (title)
                          cb += "&title=" + encodeURIComponent(title);
                  }
                  api.Account.Deposit(amount, this.curPlatform.Id, cb, "desktop").then(function (re) {
                      authWindow.location.replace(re.PaymentStartResult["redirect"]);
                      $('#dialog-title').html("充值");
                      $('#dialog-body').html("\n<div>\n    <h4>\u8BF7\u5728\u6253\u5F00\u7684\u65B0\u9875\u9762\u4E0A\u5B8C\u6210\u5145\u503C</h4>\n    <div>\u5145\u503C\u5B8C\u6210\u540E\uFF0C\u6839\u636E\u60A8\u7684\u60C5\u51B5\u70B9\u51FB\u4E0B\u9762\u6309\u94AE</div>\n    <hr/>\n    <a href=\"/user\" class='btn btn-primary'>\u6211\u5DF2\u5B8C\u6210\u5145\u503C</a>\n    <button type='button' class='btn btn-default' data-dismiss='modal'>\u6211\u5DF2\u53D6\u6D88\u5145\u503C</button>\n</div>\n");
                      $('#dialog').modal({ backdrop: "static" });
                      data.message = '';
                      data.executing = false;
                  }, function (e) {
                      authWindow.close();
                      data.executing = false;
                      data.message = e._error;
                  });
              }
          },
          watch: {
              otherAmount: function (v) {
                  setTimeout(function () {
                      var rv = parseInt(v);
                      if (!rv || isNaN(rv))
                          rv = data.orgOtherAmount;
                      else if (rv < 1)
                          rv = 1;
                      else if (rv >= 1000000)
                          rv = 999999;
                      var update = data.orgOtherAmount != rv;
                      data.orgOtherAmount = rv;
                      data.otherAmount = rv;
                      if (update)
                          updateActivity();
                  }, 0);
              }
          }
      });
      api.PaymentPlatform.List().then(function (re) {
          data.platforms = re;
          data.curPlatform = re[0];
      });
      updateActivity();
  };


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

  //var btn_menu = document.getElementById("hd-cat-menu") as HTMLElement;
  "use strict";
  var shoppingcart = __webpack_require__(24);
  var actions = __webpack_require__(5);
  var lazyload = __webpack_require__(132);
  var shoppingCartPanel = __webpack_require__(16);
  lazyload(window);
  function buy(args) {
      if (!args.item)
          return;
      shoppingcart.buy(args.item, args.quantity);
  }
  function addToCart(args) {
      if (!args.item)
          return;
      var btn = $(args.element);
      shoppingCartPanel.addToCart(args.item, 1, btn, $("img", btn.parents("li")));
  }
  function initActions() {
      actions.init({
          buy: { exec: buy, args: ["item", "quantity"] },
          addToCart: { exec: addToCart, args: ["item"] },
      });
  }
  initActions();


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

  //var btn_menu = document.getElementById("hd-cat-menu") as HTMLElement;
  "use strict";
  //btn_menu.addEventListener("mouseover", e => {
  //    btn_menu.className = btn_menu.className.indexOf("active")==-1
  //});
  var auth = __webpack_require__(7);
  var dom = __webpack_require__(10);
  var notification = __webpack_require__(14);
  var actions = __webpack_require__(5);
  var shoppingCartPanel = __webpack_require__(16);
  function handleHeadUserUI() {
      var u = auth.user();
      if (!u) {
          $("#head-user-icon").attr("src", "/css/desktop/images/user.png");
          return;
      }
      window["user"] = u;
      $("#head-signin").hide();
      $("#head-signup").hide();
      $("#head-user").html("<a href='/user'>" + u.nick.replace(/</g, "&lt") + "</a>");
      $("#head-user").removeClass("hidden");
      $("#head-signout").removeClass("hidden");
      $("#head-user-icon").attr("src", "/r/" + u.icon + "?format=c40");
      notification.update().then(function (re) {
          if (re.ReceivedUnreaded)
              $("#head-user").append("<a class='notice-icon' href='/user/notification'>" + (re.ReceivedUnreaded < 10 ? re.ReceivedUnreaded : "9+") + "</a>");
      });
  }
  function handleCatMenuUI() {
      var menu = $("#hd-cat-menu");
      if (!menu[0])
          return;
      var menu_parent = menu.parent();
      var catItems = $(".items", menu_parent[0]);
      var isCatMenuInitVisible = catItems.hasClass("show");
      var isMenuShowFixed = false;
      var isMenuHover = false;
      function updateUI() {
          mbar.toggleClass("fixed-menu", isMenuShowFixed);
          catItems.toggleClass("show", isMenuHover || isCatMenuInitVisible && !isMenuShowFixed);
      }
      menu_parent.on("mousemove", function (e) { return e.stopPropagation(); });
      menu.on("mouseover", function () {
          isMenuHover = true;
          updateUI();
          $(document.body).one("mousemove", function () {
              isMenuHover = false;
              updateUI();
          });
      });
      var mbar = $("#hd-menubar");
      var mbarTop = mbar.offset().top;
      $(window).on("scroll", function () {
          isMenuShowFixed = (dom.bodyScrollTop() > mbarTop);
          updateUI();
      });
  }
  handleHeadUserUI();
  handleCatMenuUI();
  function gotop() {
      var y = window.scrollY;
      var idx = 9;
      var timer = setInterval(function () {
          var c = y * idx / 10;
          window.scroll(0, c);
          if (idx <= 0)
              clearInterval(timer);
          else
              idx--;
      }, 20);
  }
  function chat() {
      if (!window["CSQQ"])
          return;
      var qqs = window["CSQQ"].split(';');
      var qq = qqs[Math.floor(Math.random() * qqs.length)];
      window.location.href = "tencent://message/?uin=" + qq + "&Site=&menu=yes";
  }
  actions.init({
      chat: chat,
      gotop: gotop
  });
  setTimeout(function () { return shoppingCartPanel.update(); }, 3000);


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var forms = __webpack_require__(9);
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  function signin(args) {
  }
  module.exports = function () {
      actions.init({
          signin: signin
      });
      forms.validate("form.feedback", {
          rules: {
              title: {
                  required: true,
              },
              content: {
                  required: true,
              }
          },
          messages: {
              title: {
                  required: "请输入反馈标题"
              },
              content: {
                  required: "请输入反馈内容"
              }
          },
          submitHandler: function (form, e) {
              e.preventDefault();
              $(".message", form).html("正在提交...");
              $("button.btn-primary").prop("disabled", true);
              var args = {};
              $(form).serializeArray().forEach(function (p) { return args[p.name] = p.value; });
              api.FeedbackService.Create({
                  Title: args.title,
                  Content: args.content
              }).then(function (u) {
                  $(".message", form).html("提交成功,正在返回");
                  setTimeout(function () { window.location.href = "/help"; }, 2000);
              }, function (err) {
                  $("button.btn-primary").prop("disabled", false);
                  $(".message", form).html(err._error);
              });
          },
          invalidHandler: function (form, validator) {
              return false;
          }
      });
  };


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var actions = __webpack_require__(5);
  module.exports = function (args) {
      var items = $("div.left-menu-item").get().map(function (e) { return $(e); });
      var html = items.map(function (e, i) {
          return ("<a href='javascript:;' data-action='go' data-item='" + i + "'>\n        <span>" + (i + 1) + "F</span>\n        <span>" + e.attr("data-menu-text") + "</span>\n        </a>");
      }).join('');
      var left_panel = $("#left_panel");
      $(html).insertBefore(left_panel.children().last());
      var curActive = null;
      var updateActive = function () {
          if (items[0].offset().top >= left_panel.offset().top) {
              left_panel.css("visibility", "hidden");
              return;
          }
          left_panel.css("visibility", "visible");
          var center = window.scrollY + document.documentElement.clientHeight / 2;
          var last = 0;
          var cur = null;
          for (var i = 0; i < items.length; i++) {
              var e = items[i];
              var p = e.offset().top + e.height() / 2;
              if (p < center) {
                  last = p;
                  continue;
              }
              cur = $(left_panel.children()[p - center > center - last ? i - 1 : i]);
              break;
          }
          if (!cur)
              cur = $(left_panel.children()[items.length - 1]);
          if (curActive == cur)
              return;
          if (curActive)
              curActive.toggleClass("active", false);
          if (curActive = cur)
              curActive.toggleClass("active", true);
      };
      var timeout = null;
      $(window).on("scroll", function () {
          if (timeout)
              clearTimeout(timeout);
          timeout = setTimeout(function () {
              timeout = null;
              updateActive();
          }, 100);
      });
      setTimeout(updateActive, 1000);
      var go = function (args) {
          var idx = parseInt(args.element.getAttribute("data-item"));
          var dst = items[idx];
          var ty = $(dst).offset().top - 50;
          var cy = window.scrollY;
          var step = 1;
          var timer = setInterval(function () {
              window.scroll(0, cy + step * (ty - cy) / 10);
              if (step == 10)
                  clearInterval(timer);
              step++;
          }, 20);
      };
      actions.init({
          go: go
      });
  };


/***/ },
/* 142 */
/***/ function(module, exports) {

  "use strict";
  module.exports = function (args) {
  };


/***/ },
/* 143 */
/***/ function(module, exports) {

  "use strict";
  var fileExtMap = {
      "3dm": "flaticon-3dm-file-format",
      "3ds": "flaticon-3ds-file-format-symbol",
      "3g2": "flaticon-3g2-file-format-symbol",
      "3gp": "flaticon-3gp-file-format-variant",
      "7z": "flaticon-7z-file-format-variant",
      "aac": "flaticon-aac-file-format",
      "ai": "flaticon-ai-file-format-symbol",
      "aif": "flaticon-aif-file-format",
      "angel": "flaticon-angel",
      "apk": "flaticon-apk-file-format",
      "app": "flaticon-app-file-format-variant",
      "asf": "flaticon-asf-file-format-variant",
      "asp": "flaticon-asp-file-format-symbol",
      "aspx": "flaticon-aspx-file-format",
      "asx": "flaticon-asx-multimedia-file-format",
      "avi": "flaticon-avi-file-format-variant",
      "bak": "flaticon-bak-file-format-symbol",
      "bat": "flaticon-bat-file-format-symbol",
      "bin": "flaticon-bin-file-format",
      "blank": "flaticon-blank-file",
      "bmp": "flaticon-bmp-file-format-symbol",
      "cab": "flaticon-cab-file-format",
      "cad": "flaticon-cad-file-format-symbol",
      "cdr": "flaticon-cdr-file-format-symbol",
      "cer": "flaticon-cer-file-format",
      "cfg": "flaticon-cfg-file-format-symbol",
      "cfm": "flaticon-cfm-file-format-symbol",
      "cgi": "flaticon-cgi-file-format-symbol",
      "class": "flaticon-class-file-format-variant",
      "com": "flaticon-com-file-format-symbol",
      "cpl": "flaticon-cpl-file-format-variant",
      "cpp": "flaticon-cpp-file-format-symbol",
      "crx": "flaticon-crx-file-format-symbol",
      "csr": "flaticon-csr-file-format",
      "css": "flaticon-css-file-format-symbol",
      "csv": "flaticon-csv-file-format-symbol",
      "cue": "flaticon-cue-file-format-symbol",
      "cur": "flaticon-cur-file-format",
      "dat": "flaticon-dat-file-format-variant",
      "db": "flaticon-db-file-format-variant",
      "dbf": "flaticon-dbf-file-format-symbol",
      "dds": "flaticon-dds-file-format-symbol",
      "debian": "flaticon-debian-file",
      "dem": "flaticon-dem-file-format-symbol",
      "demon": "flaticon-demon",
      "dll": "flaticon-dll-file-format-variant",
      "dmg": "flaticon-dmg-file-format-symbol",
      "dmp": "flaticon-dmp-file-format-symbol",
      "doc": "flaticon-doc-file-format-symbol",
      "docx": "flaticon-docx-file-format",
      "drv": "flaticon-drv-file-format-variant",
      "dtd": "flaticon-dtd-file-format-extension",
      "dwg": "flaticon-dwg-file-format-variant",
      "dxf": "flaticon-dxf-file-format-symbol",
      "elf": "flaticon-elf-file",
      //"elf": "flaticon-elf-file-format-variant",
      "eml": "flaticon-eml-file",
      "eps": "flaticon-eps-file-format-symbol",
      //"eps": "flaticon-eps-file-format-variant",
      "exe": "flaticon-exe-file-format-symbol",
      "fla": "flaticon-fla-file-format-variant",
      "flash": "flaticon-flash-file-format",
      "flv": "flaticon-flv-file-format-symbol",
      "fnt": "flaticon-fnt-file-format",
      "fon": "flaticon-fon-file-format-symbol",
      "gam": "flaticon-gam-file-format-variant",
      "gbr": "flaticon-gbr-file-format-extension",
      "ged": "flaticon-ged-file-format-symbol",
      "gif": "flaticon-gif-file-format",
      "gpx": "flaticon-gpx-file-format-variant",
      "gz": "flaticon-gz-file-format-symbol",
      "gzip": "flaticon-gzip-file-format-variant",
      "hqz": "flaticon-hqz-file-format",
      "html": "flaticon-html-file-with-code-symbol",
      "ibooks": "flaticon-ibooks-file-format-symbol",
      "icns": "flaticon-icns-file-format",
      "ico": "flaticon-ico-file-format-variant",
      "ics": "flaticon-ics-file-format-symbol",
      "iff": "flaticon-iff-file-format",
      "indd": "flaticon-indd-file-format-variant",
      "ipa": "flaticon-ipa-file",
      "iso": "flaticon-iso-file-format",
      //"iso": "flaticon-iso-file-format-symbol",
      "jar": "flaticon-jar-file-format",
      "jpg": "flaticon-jpg-image-file-format",
      "js": "flaticon-js-file-format-symbol",
      "jsp": "flaticon-jsp-file-format-symbol",
      "key": "flaticon-key-file-format-variant",
      "kml": "flaticon-kml-file-format-variant",
      "kmz": "flaticon-kmz-file-format-symbol",
      "lnk": "flaticon-lnk-file-format-symbol",
      "log": "flaticon-log-file-format",
      "lua": "flaticon-lua-file-format-symbol",
      "m3u": "flaticon-m3u-file-format",
      "m4a": "flaticon-m4a-file-format-symbol",
      "m4v": "flaticon-m4v-file-format-variant",
      "mach": "flaticon-mach-o-file",
      //"mach": "flaticon-mach-o-file-format",
      "max": "flaticon-max-file-format-variant",
      "mdb": "flaticon-mdb-file-format-symbol",
      "mdf": "flaticon-mdf-file-format-variant",
      "mid": "flaticon-mid-file-format",
      "mim": "flaticon-mim-file-format",
      "mov": "flaticon-mov-file-format-symbol",
      "mp3": "flaticon-mp3-file-format-variant",
      "mp4": "flaticon-mp4-file-format-symbol",
      "mpa": "flaticon-mpa-file-format",
      "mpg": "flaticon-mpg-file-format-variant",
      "msg": "flaticon-msg-file",
      //"msg": "flaticon-msg-file-format-variant",
      "msi": "flaticon-msi-file-format-symbol",
      "nes": "flaticon-nes-file-variant",
      "object": "flaticon-object-file-format",
      "odb": "flaticon-odb-file-format-variant",
      "odc": "flaticon-odc-file-format-symbol",
      "odf": "flaticon-odf-file-format-variant",
      "odg": "flaticon-odg-file-format",
      "odi": "flaticon-odi-file-format-symbol",
      "odp": "flaticon-odp-file-format-symbol",
      "ods": "flaticon-ods-file-format-symbol",
      "odt": "flaticon-odt-file-format",
      //"odt": "flaticon-odt-file-format-symbol",
      "odx": "flaticon-odx-file-format-extension",
      "ogg": "flaticon-ogg-file-format-symbol",
      "otf": "flaticon-otf-file-format",
      //"otf": "flaticon-otf-file-format-extension",
      "pages": "flaticon-pages-file-format-symbol",
      "pct": "flaticon-pct-file-format-symbol",
      "pdb": "flaticon-pdb-file-format-variant",
      "pdf": "flaticon-pdf-file-format-symbol",
      "pif": "flaticon-pif-file-format-variant",
      "pkg": "flaticon-pkg-file-format-variant",
      "pl": "flaticon-pl-file-format-variant",
      "png": "flaticon-png-file-extension-interface-symbol",
      "pps": "flaticon-pps-file-format-symbol",
      "ppt": "flaticon-ppt-file-format",
      "pptx": "flaticon-pptx-file-format-variant",
      "ps": "flaticon-ps-file-format",
      "psd": "flaticon-psd-file-format-variant",
      "pub": "flaticon-pub-file-format-symbol",
      "python": "flaticon-python-file-symbol",
      "ra": "flaticon-ra-file-format",
      "rar": "flaticon-rar-file-format",
      "raw": "flaticon-raw-file-format-symbol",
      "rm": "flaticon-rm-file-format",
      "rom": "flaticon-rom-file",
      //"rom": "flaticon-rom-file-format-variant",
      "rpm": "flaticon-rpm-file-format-symbol",
      "rss": "flaticon-rss-file-format-symbol",
      "rtf": "flaticon-rtf-icon-format",
      "sav": "flaticon-sav-file-format",
      "sdf": "flaticon-sdf-file-format",
      "sitx": "flaticon-sitx-file-format-variant",
      "sql": "flaticon-sql-file-format-symbol",
      //"sql": "flaticon-sql-file-format-symbol-1",
      "srt": "flaticon-srt-file-format-symbol",
      "svg": "flaticon-svg-file-format-symbol",
      "swf": "flaticon-swf-file-format-symbol",
      "sys": "flaticon-sys-file-format",
      "tar": "flaticon-tar-file-variant",
      "tex": "flaticon-tex-file-format",
      "tga": "flaticon-tga-file-format-symbol",
      "thm": "flaticon-thm-file-format-symbol",
      "tiff": "flaticon-tiff-images-file-extension-symbol-for-interface",
      "tmp": "flaticon-tmp-icon-file-format",
      "torrent": "flaticon-torrent-file-format",
      "ttf": "flaticon-ttf-file-format-symbol",
      "txt": "flaticon-txt-text-file-extension-symbol",
      "uue": "flaticon-uue-file-format-symbol",
      "vb": "flaticon-vb-file-symbol",
      "vcd": "flaticon-vcd-file-format-symbol",
      "vcf": "flaticon-vcf-file-format-variant",
      "vob": "flaticon-vob-file-format-symbol",
      "wav": "flaticon-wav-file-format-variant",
      "wma": "flaticon-wma-file-format-symbol",
      "wmv": "flaticon-wmv-file-format-extension",
      "wpd": "flaticon-wpd-file-format-symbol",
      "wps": "flaticon-wps-file-format",
      "wsf": "flaticon-wsf-file-format-variant",
      "xhtml": "flaticon-xhtml-icon-file-format",
      "xlr": "flaticon-xlr-file-format-variant",
      "xls": "flaticon-xls-file-format-symbol",
      "xlsx": "flaticon-xlsx-file-format",
      "xml": "flaticon-xml-file-format-variant",
      "yuv": "flaticon-yuv-file-format-variant",
      "zip": "flaticon-zip-compressed-files-extension",
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = fileExtMap;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  //var slick = require("slick-carousel");
  var forms = __webpack_require__(9);
  module.exports = function (args) {
      //(<any>$("#slide")).slick({
      //    dots: true,
      //    infinite: true,
      //    speed: 500,
      //    slidesToShow: 1,
      //    slidesToScroll: 1,
      //    autoplay: true,
      //    autoplaySpeed: 5000
      //});
      forms.validate("form.signin", {
          rules: {
              ident: {
                  required: true,
              },
              password: {
                  required: true,
                  minlength: 5
              }
          },
          messages: {
              ident: {
                  required: "请输入账号"
              },
              password: {
                  required: "请输入密码",
                  minlength: jQuery.validator.format("密码不能少于{0}个字符")
              }
          },
          submitHandler: function (form, e) {
              e.preventDefault();
              $(".message", form).html("正在登录...");
              $("button.btn-primary").prop("disabled", true);
              var args = {};
              $(form).serializeArray().forEach(function (p) { return args[p.name] = p.value; });
              api.User.Signin(args).then(function (u) {
                  $("button.btn-primary").prop("disabled", false);
                  $(".message", form).html("登录成功,正在跳转...");
                  if (forms.tryJumpBack())
                      return;
                  window.location.href = "/";
              }, function (err) {
                  $("button.btn-primary").prop("disabled", false);
                  $(".message", form).html(err._error);
              });
          },
          invalidHandler: function (form, validator) {
              return false;
          }
      });
      actions.init({});
  };


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var Vue = __webpack_require__(3);
  var file_ext_map_1 = __webpack_require__(143);
  module.exports = function (args) {
      Vue.component('tree-item', {
          template: '#tree-item-template',
          props: {
              model: Object,
              selected: Number
          },
          data: function () {
              return { open: false };
          },
          activate: function () {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i - 0] = arguments[_i];
              }
              this.open = this.model.open;
              args[0]();
          },
          computed: {
              isActive: function () {
                  return this.selected == this.model.id;
              },
              isFolder: function () {
                  return this.model.children && this.model.children.length;
              }
          },
          methods: {
              toggle: function () {
                  if (this.isFolder) {
                      this.open = !this.open;
                  }
              },
              select: function () {
                  this.selected = this.model.id;
              }
          }
      });
      var data = {
          path: "",
          headPanelPaddingRight: "0px",
          usedPercent: "0%",
          pageCurrent: 1,
          pageTotal: 1,
          status: {},
          stgUsed: "",
          stgLimit: "",
          items: [],
          dirs: [],
          dlgExecuting: false,
          newName: "",
          dlgStatus: "",
          searchText: "",
          uploadings: [],
          uploadingVisible: false,
          allChecked: false,
          rootFolder: {},
          moveSource: "",
          moveDist: 0
      };
      var pageItemCount = 40;
      var numberFormat = function (v, scale) {
          var s = (Math.floor(v / (scale * 0.1)) * 0.1).toString();
          var i = s.indexOf('.');
          if (i == -1)
              return s;
          return s.substring(0, Math.min(i + 2, s.length));
      };
      var sizeFormat = function (size) {
          if (!size)
              return "0";
          if (size < 1024)
              return size.toString();
          if (size < 1024 * 1024) {
              return numberFormat(size, 1024) + "K";
          }
          else {
              return numberFormat(size, 1024 * 1024) + "M";
          }
      };
      var newItem = function (it) {
          var size = !it.Type ? "" : sizeFormat(it.Size);
          return {
              id: it.Id,
              name: it.Name,
              size: size,
              time: time.format(it.CreatedTime, "Y-MM-DD"),
              type: it.Type,
              checked: false,
              ext: it.Extension ? "." + it.Extension : "",
              icon: !it.Extension ? "fa fa-folder-o" : file_ext_map_1.default[it.Extension] || "flaticon-blank-file",
              data: it.Data
          };
      };
      var pathType = function () {
          var path = data.path;
          var i = path.indexOf(':');
          return path.substr(0, i);
      };
      var pathValue = function () {
          var path = data.path;
          var i = path.indexOf(':');
          return path.substr(i + 1);
      };
      var reload = function () {
          var path = data.path;
          var i = path.indexOf(':');
          var type = path.substr(0, i);
          var value = path.substring(i + 1);
          var page = data.pageCurrent - 1;
          var callOpt = {
              paging: {
                  offset: page * pageItemCount,
                  limit: pageItemCount,
                  totalRequired: !data.pageTotal
              }
          };
          var p = type == 'file' ? api.NetDriveService.ListChildren(value ? parseInt(value) : null, callOpt) :
              type == 'type' ? api.NetDriveService.ListByType(value, callOpt) :
                  api.NetDriveService.Find(value, callOpt);
          p.then(function (re) {
              if (data.path != path)
                  return;
              if (!data.pageTotal) {
                  data.pageTotal = Math.floor(re.Total / pageItemCount);
                  if (re.Total % pageItemCount)
                      data.pageTotal++;
              }
              data.items = re.Items.map(newItem);
          });
      };
      var nextPage = function () {
          if (data.pageCurrent >= data.pageTotal)
              return;
          data.pageCurrent++;
          reload();
      };
      var prevPage = function () {
          if (data.pageCurrent < 1)
              return;
          data.pageCurrent--;
          reload();
      };
      var go = function (path) {
          if (path == data.path)
              return;
          var i = path.indexOf(':');
          var type = path.substr(0, i);
          var value = path.substr(i + 1);
          if (type != "file" || path == "")
              data.dirs = [];
          if (type != "search")
              setTimeout(function () { return data.searchText = ""; }, 10);
          if (type == "file")
              $('#fileUpload').attr("data-url", "/api/netdriveservice/upload" + (value ? "?DirectoryId=" + value : ""));
          data.path = path;
          data.pageCurrent = 1;
          data.pageTotal = 0;
          reload();
      };
      var showNewDirectory = function () {
          data.newName = "";
          data.dlgStatus = "";
          data.dlgExecuting = false;
          $("#dlgNewDirectory").modal();
      };
      var newDirectory = function () {
          var name = data.newName.trim();
          if (!name) {
              data.dlgStatus = "请输入文件夹名称";
              return;
          }
          var v = pathValue();
          data.dlgExecuting = true;
          data.dlgStatus = "正在新建文件夹...";
          api.NetDriveService.CreateDirectory(name, v ? parseInt(v) : null).then(function (re) {
              $("#dlgNewDirectory").modal("hide");
              data.dlgExecuting = false;
              reload();
          }, function (e) {
              data.dlgStatus = e._error;
              data.dlgExecuting = false;
          });
      };
      var dlgContext = null;
      var showRename = function (i) {
          data.newName = i.name;
          data.dlgStatus = "";
          data.dlgExecuting = false;
          dlgContext = i;
          $("#dlgRename").modal();
      };
      var rename = function () {
          var name = data.newName.trim();
          if (!name) {
              data.dlgStatus = "请输入新名称";
              return;
          }
          data.dlgExecuting = true;
          data.dlgStatus = "正在修改名称...";
          api.NetDriveService.Rename(dlgContext.id, name).then(function (re) {
              $("#dlgRename").modal("hide");
              data.dlgExecuting = false;
              data.items = data.items.map(function (it) {
                  if (it == dlgContext)
                      it.name = data.newName;
                  return it;
              });
          }, function (e) {
              data.dlgStatus = e._error;
              data.dlgExecuting = false;
          });
      };
      var openDirectory = function (i) {
          var dirs;
          if (!i) {
              dirs = [];
          }
          else {
              var idx = data.dirs.indexOf(i);
              if (idx != -1) {
                  if (idx == data.dirs.length - 1)
                      return;
                  dirs = data.dirs.slice();
                  dirs.splice(idx + 1);
              }
              else {
                  dirs = data.dirs.slice();
                  dirs.push(i);
              }
          }
          data.dirs = dirs;
          var id = (dirs.length ? dirs[dirs.length - 1].id : "");
          data.path = "file:" + id;
          data.pageCurrent = 1;
          data.pageTotal = 0;
          $('#fileUpload').attr("data-url", "/api/netdriveservice/upload" + (id ? "?DirectoryId=" + id : ""));
          reload();
      };
      var download = function (i) {
          location.href = "/api/netdriveservice/download?id=" + i.id;
      };
      var remove = function (i) {
          if (!confirm("您要删除此文件或文件夹么？此操作不能撤销！"))
              return;
          api.NetDriveService.Delete([i.id]).then(function (re) {
              updateStatus();
              data.items = data.items.filter(function (it) { return it != i; });
              if (!data.items.length && data.pageCurrent > 1) {
                  data.pageCurrent--;
                  reload();
              }
          });
      };
      var batchRemove = function () {
          var ids = data.items.filter(function (i) { return i.checked; }).map(function (i) { return i.id; });
          if (!ids.length)
              return;
          if (!confirm("\u60A8\u8981\u5220\u9664\u8FD9" + ids.length + "\u4E2A\u6587\u4EF6\u6216\u6587\u4EF6\u5939\u4E48?"))
              return;
          api.NetDriveService.Delete(ids).then(function (re) {
              data.items = data.items.filter(function (i) { return ids.indexOf(i.id) == -1; });
              updateStatus();
          });
      };
      var showMoveDialog = function () {
          $("#dlgMove").modal();
          data.dlgExecuting = true;
          data.dlgStatus = "正在载入目录...";
          api.NetDriveService.ListByType("Directory", { paging: { limit: 1000 } }).then(function (re) {
              data.dlgExecuting = false;
              data.dlgStatus = "";
              var hash = {};
              var roots = [];
              var folders = re.Items.map(function (i) { return ({ id: i.Id, name: i.Name, parent: i.ParentId, children: [] }); });
              folders.forEach(function (i) { return hash[i.id.toString()] = i; });
              folders.forEach(function (i) {
                  if (i.parent) {
                      var p = hash[i.parent.toString()];
                      p.children.push(i);
                  }
                  else
                      roots.push(i);
              });
              data.rootFolder = {
                  id: 0,
                  name: "云盘",
                  open: true,
                  children: roots
              };
              dlgContext.forEach(function (i) {
                  var pid = hash[i.toString()].parent;
                  if (pid) {
                      var pnt = hash[pid.toString()];
                      pnt.children = pnt.children.filter(function (c) { return c.id != i; });
                  }
                  else
                      data.rootFolder.children = data.rootFolder.children.filter(function (c) { return c.id != i; });
              });
          });
      };
      var showBatchMove = function () {
          var items = data.items.filter(function (i) { return i.checked; });
          var ids = items.map(function (i) { return i.id; });
          if (!ids.length)
              return;
          data.moveSource = items[0].name + (ids.length > 1 ? "\u7B49" + ids.length + "\u9879" : '');
          data.moveDist = 0;
          dlgContext = ids;
          showMoveDialog();
      };
      var showMove = function (i) {
          dlgContext = [i.id];
          data.moveSource = i.name;
          data.moveDist = 0;
          showMoveDialog();
      };
      var move = function () {
          if (!dlgContext.length)
              return;
          data.dlgExecuting = true;
          data.dlgStatus = "正在移动项目...";
          api.NetDriveService.Move(dlgContext, data.moveDist || null).then(function (re) {
              reload();
              $("#dlgMove").modal("hide");
          }, function (e) {
              data.dlgExecuting = false;
              data.dlgStatus = e._error;
          });
      };
      var search = function () {
          if (!data.searchText) {
              go("file:");
              return;
          }
          go("search:" + data.searchText);
      };
      var upload = function () {
          $("#fileUpload").click();
      };
      var upload_cancel = function (u) {
          if (u.stopped) {
              data.uploadings = data.uploadings.filter(function (i) { return i != u; });
              return;
          }
          u.xhr.abort();
          u.message = "已取消";
          u.stopped = true;
          data.uploadings = data.uploadings.slice();
      };
      var showUploadPanel = function () {
          data.uploadingVisible = !data.uploadingVisible;
      };
      var vm = new Vue({
          el: "#console",
          data: data,
          computed: {
              canMoveNextPage: function () { return data.pageCurrent <= data.pageTotal; },
              canMovePrevPage: function () { return data.pageCurrent > 1; },
              selectedCount: function () { return data.items.reduce(function (s, c) { return s + (c.checked ? 1 : 0); }, 0); },
              uploadDone: function () { return data.uploadings.reduce(function (s, u) { return s + (u.stopped ? 1 : 0); }, 0); },
              uploadPanelHeight: function () {
                  if (!data.uploadingVisible)
                      return "auto";
                  return Math.min(500, Math.max(120, data.uploadings.length * 34 + 50)) + "px";
              }
          },
          watch: {
              allChecked: function (v) {
                  if (v || data.items.every(function (i) { return i.checked; }))
                      setTimeout(function () {
                          data.items.forEach(function (i) { return i.checked = v; });
                      }, 0);
              },
              items: {
                  handler: function (items) {
                      setTimeout(function () {
                          data.allChecked = data.items.every(function (i) { return i.checked; });
                      }, 0);
                  },
                  deep: true
              }
          },
          methods: {
              go: go,
              nextPage: nextPage,
              prevPage: prevPage,
              showNewDirectory: showNewDirectory,
              newDirectory: newDirectory,
              openDirectory: openDirectory,
              download: download,
              remove: remove,
              batchRemove: batchRemove,
              showMove: showMove,
              showBatchMove: showBatchMove,
              move: move,
              showRename: showRename,
              rename: rename,
              search: search,
              upload: upload,
              upload_cancel: upload_cancel,
              showUploadPanel: showUploadPanel
          }
      });
      function updateHeadPanelPaddingRight() {
          var e = document.getElementById("content");
          data.headPanelPaddingRight = (e.offsetWidth - e.clientWidth) + "px";
      }
      setInterval(updateHeadPanelPaddingRight, 1000);
      updateHeadPanelPaddingRight();
      $(window).on("resize", updateHeadPanelPaddingRight);
      go("file:");
      var statusUpdateTimer = null;
      var updateStatus = function () {
          if (statusUpdateTimer)
              clearTimeout(statusUpdateTimer);
          statusUpdateTimer = setTimeout(function () {
              statusUpdateTimer = null;
              api.NetDriveService.GetStatus().then(function (re) {
                  data.status = re;
                  data.stgUsed = sizeFormat(re.Used * 1024);
                  data.stgLimit = sizeFormat(re.Limit * 1024);
                  data.usedPercent = ((re.Used || 0) / (re.Limit || 0) * 100) + "%";
              });
          }, 1000);
      };
      updateStatus();
      var handleUpload = function () {
          var file = $('#fileUpload');
          file.attr("data-url", "/api/netdriveservice/upload");
          file.fileupload({
              dataType: 'text',
              sequentialUploads: true,
              add: function (e, d) {
                  var fn = d.files[0].name;
                  var i = fn.indexOf('.');
                  if (i > 10)
                      fn = fn.substring(0, 10) + "..." + fn.substring(i);
                  var size = Math.floor(d.files[0].size / 1024);
                  if (size == 0)
                      size = 1;
                  var msg = null;
                  if (size > 1024 * 10)
                      msg = "上传失败：单个文件不能超过10M";
                  else if (size + data.status.Used > data.status.Limit)
                      msg = "上传失败: 空间不足";
                  var f = {
                      name: fn,
                      size: sizeFormat(size * 1024),
                      message: msg,
                      stopped: !!msg,
                      xhr: null
                  };
                  d._file = f;
                  if (!msg)
                      f.xhr = d.submit();
                  data.uploadings.push(f);
                  //console.log("submit result", re);
              },
              progress: function (e, d) {
                  var f = d._file;
                  if (f.stopped)
                      return;
                  f.message = "已完成:" + Math.floor(d.loaded / d.total * 100) + "%";
                  data.uploadings = data.uploadings.slice();
                  console.log("progress", d);
              },
              fail: function (e, d) {
                  var f = d._file;
                  if (f.stopped)
                      return;
                  f.stopped = true;
                  try {
                      var re = JSON.parse(d.jqXHR.responseText);
                      f.message = "上传失败：" + re.Message;
                  }
                  catch (e) {
                      f.message = "上传失败!";
                  }
                  data.uploadings = data.uploadings.slice();
                  console.log("fail", d);
              },
              done: function (e, d) {
                  var f = d._file;
                  data.uploadings = data.uploadings.filter(function (u) { return u != f; });
                  try {
                      var re = JSON.parse(d.jqXHR.responseText);
                      data.items.push(newItem(re));
                  }
                  catch (e) {
                      f.message = "上传失败: 返回数据错误";
                  }
                  updateStatus();
                  console.log("done", d);
              }
          }).bind('fileuploadsubmit', function (e, d) {
              var url = "/api/netdriveservice/upload";
              if (data.dirs.length)
                  url += "?DirectoryId=" + data.dirs[data.dirs.length - 1].id;
              $(this).fileupload('option', 'url', url);
          });
      };
      handleUpload();
  };


/***/ },
/* 146 */
/***/ function(module, exports) {

  "use strict";
  module.exports = function (args) {
      if (!args.id)
          return;
      var hub = $["connection"].clientNotifyHub;
      hub.client.notify = function (arg) {
          window.location.href = args.redirect;
      };
      hub.connection.start().done(function () {
          hub.server.wait("WaitPaymentCollectCompleted:" + args.id);
      });
  };


/***/ },
/* 147 */
/***/ function(module, exports) {

  "use strict";
  module.exports = function (args) {
  };


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  var dom = __webpack_require__(10);
  var handlebars = __webpack_require__(18);
  var curKeyword = null;
  var curCatId = 0;
  var mainCatId = 0;
  var curLoaded = 0;
  var sortMethod = "hot";
  var sortOrder = null;
  function buy(args) {
  }
  function buyAll(args) {
  }
  function sort(args) {
      if (sortMethod == args.method)
          return;
      $(args.element).parents("div.toolbar").children("button[data-action='sort']").removeClass('active');
      $(args.element).addClass('active');
      sortMethod = args.method;
      sortOrder = null;
      curLoaded = 0;
      //$("#list").html("");
      loadMore(loadKey());
  }
  var itemTmpl = null;
  var loading = null;
  function loadKey() {
      return curLoaded + "/" + sortMethod + "/" + sortOrder;
  }
  var loadCount = 140;
  function loadMore(key) {
      if (loading == key)
          return;
      loading = key;
      if (!itemTmpl)
          itemTmpl = handlebars.compile($("#tmpl-product").html());
      var div_more = $("#more");
      var div_loading = $("#loading");
      div_loading.removeClass("hidden");
      div_more.addClass("hidden");
      var opts = {
          paging: {
              offset: curLoaded,
              limit: loadCount,
              sortMethod: sortMethod == "price-up" || sortMethod == "price-down" ? "price" : sortMethod,
              sortOrder: { hot: "desc", "left": "asc", "new": "desc", "price-down": "desc", "price-up": "asc" }[sortMethod]
          }
      };
      var cat = curCatId || mainCatId;
      (curKeyword ? api.Product.List(cat, curKeyword, opts) : api.Product.List(cat, null, opts)).then(function (re) {
          if (key != loading)
              return;
          curLoaded += re.Items.length;
          div_loading.addClass("hidden");
          if (re.Items.length == loadCount) {
              loading = null;
              div_loading.removeClass("hidden");
          }
          var html = re.Items.map(function (it) {
              if (it.CurRound.PriceUnit == 10)
                  it.tag10 = true;
              it.MarketPrice = Math.floor(it.MarketPrice);
              it.CurRound.Selled = it.CurRound.Selled || 0;
              it.CurRound.Left = it.CurRound.Total - it.CurRound.Selled;
              it.CurRound.SelledPercent = it.CurRound.Selled * 100 / it.CurRound.Total;
              return it;
          }).map(function (it) { return itemTmpl(it); }).join('');
          if (curLoaded == re.Items.length)
              $("#list").html(html);
          else
              $("#list").append(html);
      });
  }
  function initScrollHandler() {
      var list = $("#list");
      $(window).on("scroll", function () {
          if (dom.bodyScrollTop() > dom.bodyVisibleTop() - 400)
              loadMore(loadKey());
      });
  }
  module.exports = function (args) {
      actions.init({
          buy: { exec: buy, args: ["id"] },
          buyAll: { exec: buyAll, args: ["type"] },
          sort: { exec: sort, args: ["method"] },
          more: function () { return loadMore(loadKey()); }
      });
      curKeyword = args.key;
      curCatId = args.cat;
      mainCatId = args.mcat;
      curLoaded = args.loaded;
      initScrollHandler();
  };


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  var dom = __webpack_require__(10);
  var handlebars = __webpack_require__(18);
  var curCatId = 0;
  var curLoaded = 0;
  var sortMethod = "hot";
  var sortOrder = null;
  function buy(args) {
  }
  function buyAll(args) {
  }
  function sort(args) {
      if (sortMethod == args.method)
          return;
      $(args.element).parents("div.toolbar").children("button[data-action='sort']").removeClass('active');
      $(args.element).addClass('active');
      sortMethod = args.method;
      sortOrder = null;
      curLoaded = 0;
      //$("#list").html("");
      loadMore(loadKey());
  }
  var itemTmpl = null;
  var loading = null;
  function loadKey() {
      return curLoaded + "/" + sortMethod + "/" + sortOrder;
  }
  var loadCount = 140;
  function loadMore(key) {
      if (loading == key)
          return;
      loading = key;
      if (!itemTmpl)
          itemTmpl = handlebars.compile($("#tmpl-product").html());
      var div_more = $("#more");
      var div_loading = $("#loading");
      div_loading.removeClass("hidden");
      div_more.addClass("hidden");
      api.Product.List(curCatId, null, {
          paging: {
              offset: curLoaded,
              limit: loadCount,
              sortMethod: sortMethod == "price-up" || sortMethod == "price-down" ? "price" : sortMethod,
              sortOrder: { hot: "desc", "left": "asc", "new": "desc", "price-down": "desc", "price-up": "asc" }[sortMethod]
          }
      }).then(function (re) {
          if (key != loading)
              return;
          curLoaded += re.Items.length;
          div_loading.addClass("hidden");
          if (re.Items.length == loadCount) {
              loading = null;
              div_loading.removeClass("hidden");
          }
          var html = re.Items.map(function (it) {
              if (it.CurRound.PriceUnit == 10)
                  it.tag10 = true;
              it.MarketPrice = Math.floor(it.MarketPrice);
              it.CurRound.Selled = it.CurRound.Selled || 0;
              it.CurRound.Left = it.CurRound.Total - it.CurRound.Selled;
              it.CurRound.SelledPercent = it.CurRound.Selled * 100 / it.CurRound.Total;
              return it;
          }).map(function (it) { return itemTmpl(it); }).join('');
          if (curLoaded == re.Items.length)
              $("#list").html(html);
          else
              $("#list").append(html);
      });
  }
  function initScrollHandler() {
      var list = $("#list");
      $(window).on("scroll", function () {
          if (dom.bodyScrollTop() > dom.bodyVisibleTop() - 400)
              loadMore(loadKey());
      });
  }
  module.exports = function (args) {
      actions.init({
          sort: { exec: sort, args: ["method"] },
          more: function () { return loadMore(loadKey()); }
      });
      curCatId = args.cid;
      curLoaded = args.loaded;
      initScrollHandler();
  };


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  var roundTimer = __webpack_require__(17);
  var time = __webpack_require__(4);
  var Vue = __webpack_require__(3);
  var productDetail = __webpack_require__(23);
  var shoppingCartPanel = __webpack_require__(16);
  var auth = __webpack_require__(7);
  var moment = __webpack_require__(1);
  var quantity = $("#quantity");
  var cfg = null;
  function buy(args) {
      window.location.href = "/cart?add=" + cfg.item + "&q=" + quantity.val();
  }
  function addToCart(args) {
      shoppingCartPanel.addToCart(cfg.item, quantity.val(), $(args.element), $("#product-image"));
  }
  var last = quantity.val();
  var process = parseInt(quantity.attr("data-process"));
  var total = parseInt(quantity.attr("data-total"));
  var roundBuyLimit = 10000;
  var timer = null;
  function updateTooltip() {
      var q = (Math.floor(last * 10000 / total) * 0.01 + "").substr(0, 5);
      quantity.attr("title", "获得几率" + q + "%");
      quantity.tooltip("fixTitle");
      quantity.tooltip("show");
      if (timer)
          clearTimeout(timer);
      timer = setTimeout(function () {
          timer = null;
          quantity.tooltip("hide");
      }, 5000);
  }
  function updateQuantity(v) {
      var ok = false;
      v = parseInt(v);
      if (!isNaN(v) && v >= 1 && v <= Math.min(roundBuyLimit, (total - process))) {
          last = v;
          ok = true;
      }
      quantity.val(last);
      updateTooltip();
      return ok;
  }
  function setQuantity(args) {
      updateQuantity(parseInt(args.value));
  }
  function incQuantity(args) {
      updateQuantity(parseInt(quantity.val()) + 1);
  }
  function decQuantity(args) {
      updateQuantity(parseInt(quantity.val()) - 1);
  }
  function quantity_handler() {
      quantity.on("input", function (e) {
          if (!updateQuantity(quantity.val()))
              e.preventDefault();
      });
  }
  function image_list_hover() {
      var list = $("#image-list")[0];
      var items = $("li", list);
      items.on("mouseover", function (e) {
          var src = (e.target.firstElementChild || e.target);
          items.toggleClass("active", false);
          $(src.parentElement).toggleClass("active", true);
          var url = src.src;
          if (!url)
              return;
          var i = url.lastIndexOf('?');
          url = url.substring(0, i);
          var dst = $(".image", list)[0].firstElementChild;
          dst.src = url + '?format=s380';
      });
  }
  function historyRoundPanelHandler() {
      var pageCount = cfg.round <= 1 ? 0 : cfg.round == 2 ? 1 : Math.floor((cfg.round - 2) / 8) + 1;
      var data = {
          curRound: null,
          page: -1,
          round: -1,
          syncing: false
      };
      var roundLoading = -1;
      var vm = new Vue({
          el: "#round-history-panel",
          data: data,
          methods: {
              nextPage: function () {
                  data.page++;
              },
              prevPage: function () {
                  data.page--;
              },
              showRound: function (r) {
                  data.round = r;
              }
          },
          watch: {
              page: function (p) {
                  this.round = cfg.round - 1 - p * 8;
              },
              round: function (r) {
                  if (r == roundLoading)
                      return;
                  roundLoading = r;
                  api.Round.Get(cfg.product, r).then(function (re) {
                      if (re.Round != roundLoading)
                          return;
                      if (re.WinSummary) {
                          re.WinSummary.TradeTime = time.format(re.WinSummary.TradeTime);
                          re.OpenTime = time.format(re.OpenTime);
                      }
                      data.syncing = false;
                      data.curRound = re;
                      if (re.State == "OpenWaiting") {
                          //等待vue更新DOM
                          setTimeout(function () {
                              var e = document.getElementById("round_timer");
                              var dst = time.valueOf(re.ExpectOpenTime);
                              e.setAttribute("data-cfg", "[0," + cfg.product + "," + re.Round + "," + dst + "]");
                              roundTimer(e, function (r) {
                                  if (!r)
                                      data.syncing = true;
                                  else if (r.Round == data.curRound.Round) {
                                      if (r.WinSummary) {
                                          r.WinSummary.TradeTime = time.format(r.WinSummary.TradeTime);
                                          r.OpenTime = time.format(r.OpenTime);
                                      }
                                      data.curRound = r;
                                      data.syncing = false;
                                  }
                              });
                          }, 100);
                      }
                  });
              }
          },
          computed: {
              rounds: function () {
                  var rs = [];
                  for (var i = 0; i < 8; i++) {
                      var r = cfg.round - 1 - data.page * 8 - i;
                      if (r < 1)
                          break;
                      rs.push(r);
                  }
                  return rs;
              },
              hasNextPage: function () { return data.page < pageCount - 1; },
              hasPrevPage: function () { return data.page > 0; }
          }
      });
      if (pageCount > 0)
          setTimeout(function () { return data.page = 0; }, 10);
  }
  function tryInitBuyLimitPerRound(arg) {
      var maxPerRound = parseInt(quantity.attr("data-max-per-round"));
      if (!maxPerRound)
          return;
      var u = auth.user();
      if (!u) {
          window.location.href = "/user/signin?jump=/item/" + arg.item;
          return;
      }
      api.Trade.GetCurRoundBuyCount(arg.product, arg.round).then(function (re) {
          var left = maxPerRound - re;
          roundBuyLimit = left;
          if (left <= 0) {
              $("#quantity-panel").html("<div class='limit'>您已达到本期夺宝人次限制！</div>");
              $("#buy").prop("disabled", true);
              $("#add-to-cart").prop("disabled", true);
          }
          if (left < 100)
              $("#buy-100").hide();
          if (left < 50)
              $("#buy-50").hide();
          if (left < 20)
              $("#buy-20").hide();
          if (left < 10)
              $("#buy-10").hide();
      });
  }
  module.exports = function (arg) {
      productDetail.init(arg);
      cfg = arg;
      actions.init({
          buy: { exec: buy },
          addToCart: { exec: addToCart },
          setQuantity: { exec: setQuantity, args: ["value"] },
          incQuantity: incQuantity,
          decQuantity: decQuantity,
          showAllCodes: function () { return productDetail.showAllCodes(); }
      });
      image_list_hover();
      quantity_handler();
      historyRoundPanelHandler();
      productDetail.initUserCodes(cfg.product, cfg.round);
      tryInitBuyLimitPerRound(arg);
  };


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var actions = __webpack_require__(5);
  var productDetail = __webpack_require__(23);
  var roundTimer = __webpack_require__(17);
  var time = __webpack_require__(4);
  var curRound = 0;
  var expect = 0;
  function selectRound() {
      var cfg = productDetail.config();
      var html = "<li><a href='/item/" + cfg.product + "'>\u7B2C" + curRound + "\u671F</a></li>";
      ;
      for (var i = curRound - 1; i >= Math.max(1, curRound - 50); i--)
          html += "<li " + (i == cfg.round ? "class='active'" : "") + "><a href='/item/" + cfg.product + "-" + i + "'>\u7B2C" + i + "\u671F</a></li>";
      $('#allRoundsContent').html(html);
      $('#allRounds').modal('show');
  }
  function startTimer() {
      var cfg = productDetail.config();
      var e = document.getElementById("round_timer");
      if (!e)
          return;
      var container = e.parentElement.parentElement;
      e.setAttribute("data-cfg", "[0," + cfg.product + "," + cfg.round + "," + expect + "]");
      roundTimer(e, function (r) {
          if (!r) {
              container.innerHTML = "<div class='syncing'>正在计算，请稍后</div>";
              return;
          }
          if (!r.WinSummary) {
              container.innerHTML = "<div class='pending'>彩票中心通讯延时，请稍后</div>";
              return;
          }
          var code = r.WinSummary.Code.toString();
          $("#win-code1").html(code);
          $("#win-code2").html(code);
          $("#win-code3").html(code);
          $("#lottery-isssue").html(r.LotteryIssue.toString());
          var index = (r.WinSummary.Code - 10000001).toString();
          $("#win-index1").html(index);
          $("#win-index2").html(index);
          var lcode = r.WinSummary.LotteryCode.toString();
          $("#lottery-code1").html(lcode);
          $("#lottery-code2").html(lcode);
          $("#lottery-code3").html(lcode);
          container.innerHTML = "<div class=\"win-code\"><div><div>\u63ED\u6653\u7ED3\u679C</div><div>\u5E78\u8FD0\u593A\u5B9D\u7801</div></div><div>" + r.WinSummary.Code + "</div></div>";
          document.getElementById("win-summary").innerHTML = "\n<a class=\"icon\" href=\"/other/" + r.WinSummary.User.Id + "\" target=\"_blank\">\n<img src=\"/r/" + r.WinSummary.User.Image + "?format=c90\" />\n</a>\n<div class=\"name\">\u606D\u559C<a class=\"user\" href=\"/other/" + r.WinSummary.User.Id + "\" target=\"_blank\">" + r.WinSummary.User.NickName + "</a>\u83B7\u5F97\u672C\u671F\u5956\u54C1</div>\n<dl>\n<dt>\u5E78\u8FD0\u53F7\u7801:</dt>\n<dd><b>" + r.WinSummary.Code + "</b></dd>\n<dt>\u53C2\u4E0E\u4EBA\u6B21:</dt>\n<dd><b>" + r.WinSummary.Quantity + "</b>\u4EBA\u6B21</dd>\n<dt>\u63ED\u6653\u65F6\u95F4:</dt>\n<dd>" + time.format(r.OpenTime) + "</dd>\n<dt>\u593A\u5B9D\u65F6\u95F4:</dt>\n<dd>" + time.format(r.WinSummary.TradeTime) + "</dd> \n</dl>\n";
      });
  }
  var recordInited = false;
  function toggleAllRecords(args) {
      var table = $("#calc-table");
      if (!recordInited) {
          recordInited = true;
          table.children().children().each(function (i, tr) { return $(tr).prop("hd", $(tr).hasClass("hidden") ? 1 : 0); });
      }
      if (args.element.innerText.indexOf("展开") == -1)
          args.element.innerHTML = "展开全部100条数据";
      else
          args.element.innerHTML = "隐藏数据";
      table.children().children().each(function (i, tr) {
          var r = $(tr);
          var hidden = r.prop("hd");
          if (hidden === 0)
              return;
          if (hidden == 1)
              r.removeClass("hidden");
          else
              r.addClass("hidden");
          r.prop("hd", hidden == 1 ? 2 : 1);
      });
  }
  module.exports = function (cfg) {
      productDetail.init(cfg);
      curRound = cfg.curRound;
      expect = cfg.expect;
      if (expect)
          startTimer();
      productDetail.initUserCodes(cfg.product, cfg.round);
      actions.init({
          toggleAllRecords: toggleAllRecords,
          selectRound: selectRound
      });
  };


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  //moment.locale("zh-cn");
  var header = __webpack_require__(6);
  var data_table_1 = __webpack_require__(8);
  module.exports = function (args) {
      header();
      var today = moment().startOf("day");
      var timeRanges = [
          { name: "所有", range: function () { return { begin: null, end: null }; } },
          { name: '今天', range: function () { return { begin: moment().startOf("day"), end: null }; } },
          { name: '本周', range: function () { return { begin: moment().startOf("week"), end: null }; } },
          { name: '本月', range: function () { return { begin: moment().startOf("month"), end: null }; } },
          { name: '最近三个月', range: function () { return { begin: moment().subtract(3, "month"), end: null }; } }
      ];
      var data = {
          timeRanges: timeRanges,
          curTimeRange: timeRanges[0],
          recs: [],
          state: 0,
          ident: "",
          allCodes: "",
          version: 0,
          total: 0
      };
      var vm = new Vue({
          el: "#bonuspoint-history",
          data: data,
          methods: {
              setState: function (state) {
                  this.state = state;
                  data.version++;
              },
              setTimeRange: function (r) {
                  this.curTimeRange = r;
                  data.version++;
              }
          },
          watch: {
              state: function (v) {
                  data.version++;
              }
          },
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  var dr = data.curTimeRange;
                  var tr = dr && dr.range() || { begin: null, end: null };
                  api.BonusPoint.QueryRecord({
                      Type: data.state == 0 ? "Inc" : "Dec",
                      Time: {
                          Begin: tr.begin,
                          End: tr.end
                      }
                  }, { paging: pg }).then(function (re) {
                      re.Items.forEach(function (i) {
                          i.Time = time.format(i.Time, "Y-MM-DD HH:mm");
                      });
                      data.recs = re.Items;
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                  });
              }
          }
      });
  };


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  //moment.locale("zh-cn");
  var header = __webpack_require__(6);
  var coupons = __webpack_require__(21);
  var data_table_1 = __webpack_require__(8);
  function initCouponTab() {
      var data = {
          coupons: [],
          version: 0,
          total: 0
      };
      var vm = new Vue({
          el: "#coupon-list",
          data: data,
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  api.Coupon.Query({}, { paging: pg }).then(function (re) {
                      data.coupons = re.Items.map(coupons.mapCoupon);
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                  });
              }
          }
      });
  }
  var allTabInited = false;
  function initAllTab() {
      if (allTabInited)
          return;
      allTabInited = true;
      var states = [
          { name: '有效', state: 'Valid' },
          { name: '已使用', state: 'Used' },
          { name: '已过期', state: 'Expired' },
          { name: '失效', state: 'Invalid' },
          { name: '未生效', state: 'NotReady' },
      ];
      var data = {
          states: states,
          curState: states[0],
          recs: [],
          version: 0,
          total: 0
      };
      var vm = new Vue({
          el: "#all-coupons",
          data: data,
          methods: {
              setState: function (state) {
                  data.curState = state;
                  data.version++;
              }
          },
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  api.Coupon.QueryRewardRecord({
                      State: data.curState.state
                  }, { paging: pg }).then(function (re) {
                      data.recs = re.Items.map(coupons.mapRewardRecord);
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                  });
              }
          }
      });
  }
  var recordTabInited = false;
  function initRecordTab() {
      if (recordTabInited)
          return;
      recordTabInited = true;
      var data = {
          recs: [],
          version: 0,
          total: 0
      };
      var vm = new Vue({
          el: "#coupon-records",
          data: data,
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  api.Coupon.QueryUseRecord({}, { paging: pg }).then(function (re) {
                      data.recs = re.Items.map(coupons.mapUseRecord);
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                  });
              }
          }
      });
  }
  module.exports = function (args) {
      header();
      initCouponTab();
      $('#all-link').on('shown.bs.tab', function () { return initAllTab(); });
      $('#records-link').on('shown.bs.tab', function () { return initRecordTab(); });
  };


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  //moment.locale("zh-cn");
  var header = __webpack_require__(6);
  var activities = __webpack_require__(12);
  var data_table_1 = __webpack_require__(8);
  var validator = __webpack_require__(15);
  function initInviteTab() {
      var data = {
          weichatPanelVisible: false,
          smsPanelVisible: false,
          weichatQrCodeImage: null,
          smsContent: null,
          smsPhoneNumber: null,
          smsCaptchaCode: null,
          smsCaptchaImage: null,
          smsError: null,
          smsSending: false,
          activities: []
      };
      var vm = new Vue({
          el: "#invite",
          data: data,
          methods: {
              showWeiChatPanel: function () {
                  if (data.weichatPanelVisible)
                      return;
                  data.weichatPanelVisible = true;
                  data.smsPanelVisible = false;
                  if (!data.weichatQrCodeImage)
                      data.weichatQrCodeImage = "/api/userinvite/qrimage?r=" + Math.random();
              },
              showSmsPanel: function () {
                  if (data.smsPanelVisible)
                      return;
                  data.smsPanelVisible = true;
                  data.weichatPanelVisible = false;
                  data.smsCaptchaImage = "/api/user/captcha?width=100&height=30&color=444444&target=sms-invite&r=" + Math.random();
                  data.smsSending = false;
                  data.smsCaptchaCode = "";
                  data.smsPhoneNumber = "";
                  data.smsError = "";
              },
              refreshCaptchaCode: function () {
                  data.smsCaptchaImage = "/api/user/captcha?width=100&height=30&color=444444&target=sms-invite&r=" + Math.random();
              },
              smsSend: function () {
                  if (!data.smsPhoneNumber) {
                      data.smsError = "请输入好友的电话号码！";
                      return;
                  }
                  if (!validator.isMobile(data.smsPhoneNumber)) {
                      data.smsError = "请输出正确的手机号码！";
                      return;
                  }
                  if (!data.smsCaptchaCode) {
                      data.smsError = "请输入验证码";
                      return;
                  }
                  data.smsSending = true;
                  api.UserInvite.SendInviteMessage({
                      Captcha: data.smsCaptchaCode,
                      PhoneNumber: data.smsPhoneNumber
                  }).then(function (re) {
                      data.smsError = "邀请短信已经成功发送！";
                      setTimeout(function () {
                          data.smsPanelVisible = false;
                      }, 5000);
                  }, function (e) {
                      data.smsSending = false;
                      data.smsError = e._error;
                  });
              }
          }
      });
      activities.getResults("用户邀请成功", 1).then(function (re) {
          data.activities = re.activities;
      });
      api.UserInvite.GetInviteMessageContent().then(function (re) {
          return data.smsContent = re;
      });
  }
  var recordTabInited = false;
  function initRecordTab() {
      if (recordTabInited)
          return;
      recordTabInited = true;
      var data = {
          recs: [],
          version: 0,
          total: 0
      };
      var vm = new Vue({
          el: "#records",
          data: data,
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  api.User.Frields({ paging: pg }).then(function (re) {
                      data.recs = re.Items;
                      re.Items.forEach(function (r) { return r.CreatedTime = time.format(r.CreatedTime); });
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                  });
              }
          }
      });
  }
  module.exports = function (args) {
      header();
      initInviteTab();
      $('#records-link').on('shown.bs.tab', function () { return initRecordTab(); });
  };


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  //moment.locale("zh-cn");
  var header = __webpack_require__(6);
  var activities = __webpack_require__(12);
  var data_table_1 = __webpack_require__(8);
  /*
  {"Time":"2016-09-04T21:26:36.5899362+08:00",
  "RecordId":250,
  "ActionQuantity":1,
  "Status":"HasReward",
  "Items":[
  {"Id":2,
  "Name":"10云币",
  "PrizeProvider":"云币",
  "RewardCount":10,
  "RewardResultIdenty":"账户转账记录-119681",
  "Status":"HasReward"
  }],
  "Id":3,"Name":"幸运福袋",
  "Desc":"1.1云币，或; 2.1000积分，或; 3.2元直减红包",
  "BeginTime":"2016-01-01T00:00:00",
  "GrantRequired":true,
  "GrantExpireDays":7
  }
  */
  var executing = false;
  function execActivity(g) {
      if (executing)
          return;
      executing = true;
      $('#dialog-title').html("开奖结果");
      $('#dialog-body').html("\n<div class='private-activity-result'>\n    <img src='/css/desktop/images/loading.gif' width='170'/>\n    <h4>\u6B63\u5728\u5F00\u5956\uFF0C\u8BF7\u7A0D\u540E...</h4>\n</div>\n");
      $('#dialog').modal('show');
      $('#dialog').one('hidden.bs.modal', function (e) {
          window.location.reload();
      });
      setTimeout(function () {
          return api.ActivityGrant.Execute({ Id: g.id, Desc: "专属活动" }).then(function (re) {
              $('#dialog-title').html("开奖结果");
              $('#dialog-body').html(re.Status != "HasReward" ?
                  "\n<div class='private-activity-result no-reward'>\n    <img src='/css/desktop/images/box-closed.png'/>\n    <h4>\u8FD9\u6B21\u6CA1\u4E2D\u5956\u54E6\uFF0C\u7EE7\u7EED\u52AA\u529B\u5427\uFF01</h4>\n    <button type='button' class='btn btn-primary btn-lg' data-dismiss='modal'>\u786E \u5B9A</button>\n</div>\n" :
                  "\n<div class='private-activity-result'>\n    <img src='/css/desktop/images/box-opened.png'/>\n    <h4>\u606D\u559C\u60A8\uFF0C\u4E2D\u5956\u4E86\uFF01</h4>\n    <div>\u60A8\u83B7\u5F97\u7684\u5956\u54C1\u4E3A\uFF1A</div>\n    <ul>\n    " + re.Items.filter(function (i) { return i.Status == "HasReward"; }).map(function (i) {
                      return ("<li>" + i.PrizeProvider + " x " + i.RewardCount + " " + (i.Name == i.PrizeProvider ? "" : " (" + i.Name + ")") + "</li>");
                  }).join('') + "\n    </ul>\n    <button type='button' class='btn btn-primary btn-lg' data-dismiss='modal'>\u786E \u5B9A</button>\n</div>\n");
          });
      }, 3000);
  }
  function initActivityTab() {
      var data = {
          grants: [],
          version: 0,
          total: 0
      };
      var vm = new Vue({
          el: "#activity-list",
          data: data,
          methods: {
              open: execActivity
          },
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  api.ActivityGrant.Query({
                      State: "Available"
                  }, { paging: pg }).then(function (re) {
                      data.grants = re.Items.map(activities.mapActivityGrant);
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                  });
              }
          }
      });
  }
  var recordTabInited = false;
  function initRecordTab() {
      if (recordTabInited)
          return;
      recordTabInited = true;
      var today = moment().startOf("day");
      var timeRanges = [
          { name: "所有", range: function () { return { begin: null, end: null }; } },
          { name: '今天', range: function () { return { begin: moment().startOf("day"), end: null }; } },
          { name: '本周', range: function () { return { begin: moment().startOf("week"), end: null }; } },
          { name: '本月', range: function () { return { begin: moment().startOf("month"), end: null }; } },
          { name: '最近三个月', range: function () { return { begin: moment().subtract(3, "month"), end: null }; } }
      ];
      var states = [
          { name: '获奖', state: true },
          { name: '未获奖', state: false }
      ];
      var data = {
          timeRanges: timeRanges,
          curTimeRange: timeRanges[0],
          states: states,
          curState: states[0],
          recs: [],
          version: 0,
          total: 0
      };
      var vm = new Vue({
          el: "#activity-records",
          data: data,
          methods: {
              setTimeRange: function (r) {
                  if (this.curTimeRange == r)
                      return;
                  data.curTimeRange = r;
                  data.version++;
              },
              setState: function (state) {
                  if (this.curState == state)
                      return;
                  data.curState = state;
                  data.version++;
              }
          },
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  var dr = data.curTimeRange;
                  var tr = dr && dr.range() || { begin: null, end: null };
                  api.PublicActivity.QueryRecords({
                      Time: {
                          Begin: tr.begin,
                          End: tr.end
                      },
                      HasReward: data.curState.state
                  }, { paging: pg }).then(function (re) {
                      data.recs = re.Items.map(activities.mapActivityResult);
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                  });
              }
          }
      });
  }
  module.exports = function (args) {
      header();
      initActivityTab();
      $('#records-link').on('shown.bs.tab', function () { return initRecordTab(); });
  };


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  var dom = __webpack_require__(10);
  var time = __webpack_require__(4);
  var handlebars = __webpack_require__(18);
  var curLoaded = 0;
  var itemTmpl = null;
  var loading = null;
  function loadKey() {
      return "";
  }
  var loadCount = 40;
  function loadMore(key) {
      if (loading == key)
          return;
      loading = key;
      if (!itemTmpl)
          itemTmpl = handlebars.compile($("#tmpl-shared").html());
      var div_more = $("#more");
      var div_loading = $("#loading");
      div_loading.removeClass("hidden");
      div_more.addClass("hidden");
      var opts = {
          paging: {
              offset: curLoaded,
              limit: loadCount,
          }
      };
      api.CFWinShared.List(opts).then(function (re) {
          if (key != loading)
              return;
          curLoaded += re.Items.length;
          div_loading.addClass("hidden");
          if (re.Items.length == loadCount) {
              loading = null;
              div_loading.removeClass("hidden");
          }
          var html = re.Items.map(function (it) {
              it.CreatedTime = time.format(it.CreatedTime);
              return it;
          }).map(function (it) { return itemTmpl(it); }).join('');
          if (curLoaded == re.Items.length)
              $("#list").html(html);
          else
              $("#list").append(html);
      });
  }
  function initScrollHandler() {
      var list = $("#list");
      $(window).on("scroll", function () {
          if (dom.bodyScrollTop() > dom.bodyVisibleTop() - 600)
              loadMore(loadKey());
      });
  }
  module.exports = function (args) {
      curLoaded = args.loaded;
      actions.init({
          more: function () { return loadMore(loadKey()); }
      });
      initScrollHandler();
  };


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var tooltip = __webpack_require__(11);
  var activities = __webpack_require__(12);
  var coupon = __webpack_require__(21);
  //import actions = require("../utils/actions");
  var Vue = __webpack_require__(3);
  module.exports = function (pageArgs) {
      var data = {
          items: [],
          allSelected: false,
          total: 0,
          balance: 0,
          useBalance: true,
          balanceTotal: 0,
          termsAccepted: true,
          curPlatform: null,
          paymentPlatforms: [],
          executing: false,
          message: null,
          activities: [],
          couponDisabled: false,
          useCoupon: false,
          coupons: [],
          coupon: null,
          couponTotal: 0,
          couponCount: 0,
          discountLimited: false,
          couponMaxCount: 1,
          couponMinAmount: 1,
          couponMaxAmount: 0,
          totalAmount: 0,
          costAmount: 0,
          depositAmount: 0,
      };
      var getItemStatus = function () {
          return data.items.map(function (it) { return ({
              Selected: it.Selected,
              Quantity: it.Quantity || 0,
              ItemId: it.ItemId,
              Round: it.CFRound
          }); });
      };
      var calcTotal = function (items) {
          return items && items.length ?
              items.reduce(function (s, i) { return (!i.Disabled && i.Selected ? i.Total : 0) + s; }, 0) :
              0;
      };
      var syncAmountTimer = null;
      var syncAmount = function () {
          if (syncAmountTimer)
              clearTimeout(syncAmountTimer);
          syncAmountTimer = setTimeout(function () {
              timer = null;
              var total = data.total = calcTotal(data.items);
              data.totalAmount = total;
              data.discountLimited = false;
              if (data.couponDisabled || !data.useCoupon || !data.coupon || !data.coupon.LeftCount || total < data.coupon.ConditionValue) {
                  data.couponTotal = 0;
                  data.couponCount = 0;
              }
              else {
                  var re = coupon.applyCoupon(total, data.coupon, data.couponCount, pageArgs.maxDiscount);
                  data.couponMinAmount = re.couponMinAmount;
                  data.couponMaxCount = re.couponMaxCount;
                  data.couponCount = re.count;
                  data.couponTotal = re.total;
                  data.discountLimited = re.discountLimited;
                  data.couponMaxAmount = re.couponMaxAmount;
                  total -= data.couponTotal;
              }
              data.costAmount = total;
              if (data.useBalance) {
                  data.balanceTotal = Math.min(total, data.balance);
                  total -= data.balanceTotal;
              }
              data.depositAmount = total;
          }, 1);
      };
      var timer = null;
      var sync = function () {
          syncAmount();
          if (timer)
              clearTimeout(timer);
          timer = setTimeout(function () {
              timer = null;
              api.ShoppingCart.Sync(getItemStatus());
              updateActivity();
          }, 100);
      };
      var updateActivity = function () {
          return activities.getResults("交易结算完成", data.costAmount).then(function (re) {
              data.activities = re.activities;
          });
      };
      var vm = new Vue({
          el: "#shopping-cart",
          data: data,
          computed: {
              enabled: function () {
                  return this.totalAmount &&
                      (!this.depositAmount || this.curPlatform) &&
                      (!data.useCoupon || !data.coupon || !data.coupon.ConditionValue || data.coupon.ConditionValue <= data.total);
              },
              curPaymentName: function () {
                  if (!this.curPlatform)
                      return "";
                  var n = this.curPlatform.Name;
                  if (n.substring(n.length - 2) == "支付")
                      n = n.substring(0, n.length);
                  return n;
              },
              couponCountVisible: function () {
                  return data.coupon &&
                      data.useCoupon &&
                      data.coupon.Type != "DiscountCoupon" &&
                      data.coupon.LeftCount > 1;
              }
          },
          methods: {
              incCoupon: function () {
                  data.couponCount++;
              },
              decCoupon: function () {
                  data.couponCount--;
              },
              inc: function (it) {
                  var q = it.Quantity || 0;
                  if (q >= it.CFLeft)
                      return;
                  it.Quantity = q + 1;
              },
              dec: function (it) {
                  var q = it.Quantity || 0;
                  if (q <= 1)
                      return;
                  it.Quantity = q - 1;
              },
              remove: function (it) {
                  data.items = data.items.filter(function (i) { return i != it; });
              },
              removeSelected: function () {
                  data.items = data.items.filter(function (i) { return !i.Selected; });
              },
              selectPlatform: function (p) {
                  data.curPlatform = p;
              },
              submit: function () {
                  if (data.executing)
                      return;
                  if (!data.termsAccepted) {
                      tooltip.show($("#termsLink"), "请先阅读服务协议");
                      return;
                  }
                  data.executing = true;
                  data.message = "正在创建订单...";
                  var authWindow = data.depositAmount ? window.open("about:blank") : null;
                  api.Trade.Create({
                      BalanceUsed: data.useBalance,
                      ClientType: "desktop",
                      DepositPaymentPlatform: data.curPlatform.Id,
                      DepositAmount: data.depositAmount,
                      ShoppingCartType: "main",
                      ShoppingCartItemStatuses: getItemStatus(),
                      HttpRedirect: "/trade/completed/{TradeId}",
                      OpDevice: "PC",
                      CouponCode: !data.couponDisabled && data.useCoupon && data.coupon ? data.coupon.Id.toString() : null,
                      CouponCount: !data.couponDisabled && data.useCoupon && data.coupon ? data.couponCount : 0,
                  }).then(function (re) {
                      if (re.Completed)
                          window.location.href = "/trade/completed/" + re.TradeId;
                      else if (re.DepositStartResult && re.DepositStartResult["redirect"]) {
                          if (!authWindow) {
                              window.location.href = re.DepositStartResult["redirect"];
                              return;
                          }
                          authWindow.location.replace(re.DepositStartResult["redirect"]);
                          $('#dialog-title').html("支付提醒");
                          $('#dialog-body').html("\n<div class='text-center'>\n<h4>\u8BF7\u5728\u6253\u5F00\u7684\u65B0\u9875\u9762\u4E0A\u5B8C\u6210\u652F\u4ED8</h4>\n<div>\u652F\u4ED8\u5B8C\u6210\u540E\uFF0C\u6839\u636E\u60A8\u7684\u60C5\u51B5\u70B9\u51FB\u4E0B\u9762\u6309\u94AE</div>\n<br/>\n<hr/>\n<div >\n<a href=\"/trade/history\" class='btn btn-primary'>\u6211\u5DF2\u5B8C\u6210\u652F\u4ED8</a>\n<a href=\"/cart\" class='btn btn-default' >\u6211\u5DF2\u53D6\u6D88\u652F\u4ED8</a>\n</div>\n</div> \n");
                          $('#dialog').modal({ backdrop: "static" });
                          data.executing = false;
                          data.message = "";
                      }
                  }, function (e) {
                      if (authWindow)
                          authWindow.close();
                      $('#dialog-title').html("夺宝提醒");
                      $('#dialog-body').html("\n<div class=\"text-center\">\n<span class=\"glyphicon glyphicon-exclamation-sign\" style=\"font-size:38px;color:#ccc\"></span> \n<h4 style=\"font-size:18px;line-height:1.5\">" + e._error + "\u8BF7\u5237\u65B0\u9875\u9762\u67E5\u770B\u6700\u65B0\u7684\u5546\u54C1\u593A\u5B9D\u4FE1\u606F\u3002</h4>\n<hr/>\n<div>\n    <a href=\"javascript:location.reload()\" class='btn btn-primary'>\u9A6C\u4E0A\u5237\u65B0</a>\n</div>\n</div> \n");
                      $('#dialog').modal({ backdrop: "static" });
                      data.executing = false;
                      data.message = "";
                  });
              }
          },
          watch: {
              useBalance: function () { return syncAmount(); },
              useCoupon: function () { return syncAmount(); },
              coupon: function () { return syncAmount(); },
              allSelected: function (v) {
                  if (v || data.items.every(function (i) { return i.Selected; }))
                      setTimeout(function () {
                          data.items.forEach(function (i) { return i.Selected = v; });
                      }, 0);
              },
              couponCount: function (v, o) { return syncAmount(); },
              items: {
                  handler: function (items) {
                      setTimeout(function () {
                          data.couponDisabled = false;
                          items.forEach(function (r) {
                              if (r.Disabled)
                                  return;
                              if (r.Quantity === "") {
                                  r.OrgQuantity = 0;
                                  r.Total = 0;
                                  return;
                              }
                              if (isNaN(r.Quantity))
                                  r.Quantity = r.OrgQuantity;
                              if (r.Quantity < 0)
                                  r.Quantity = 0;
                              else {
                                  var limit = Math.min(r.CFLeft, r.CFLimitPerRoundPerUser ? r.CFLimitPerRoundPerUser - (r.CFRoundBuyCount || 0) : 100000);
                                  if (r.Quantity > limit)
                                      r.Quantity = limit;
                              }
                              r.OrgQuantity = r.Quantity;
                              r.Total = r.Quantity * r.CFPriceUnit;
                              if (r.Selected && r.CouponDisabled) {
                                  data.couponDisabled = true;
                                  data.useCoupon = false;
                              }
                          });
                          data.allSelected = data.items.every(function (i) { return i.Selected; });
                          sync();
                      }, 0);
                  },
                  deep: true
              }
          }
      });
      api.PaymentPlatform.List().then(function (re) {
          data.paymentPlatforms = re;
          data.curPlatform = re[0];
      });
      api.Account.Balance().then(function (re) {
          data.balance = re;
      });
      api.Coupon.Query({}).then(function (re) {
          data.coupons = re.Items;
          data.coupons.forEach(function (c) {
              c.ExpireTime = time.formatEndDate(c.ExpireTime);
              c.ConditionValue = c.ConditionValue || 0;
              if (c.LeftCount > 1)
                  c.Name += "x" + c.LeftCount;
              if (c.ConditionValue > 0)
                  c.Name += " (" + c.ConditionValue + "\u4E91\u5E01\u8D77\u7528)";
          });
          if (data.items) {
              var c = coupon.pickupCoupon(re.Items, null, calcTotal(data.items));
              data.coupon = c || data.coupons[0] || null;
              data.useCoupon = c != null;
          }
      });
      api.ShoppingCart.Items().then(function (re) {
          data.items = re.map(function (r) {
              if (!r.Quantity)
                  r.Quantity = 0;
              return $.extend(r, {
                  CFLeft: r.CFTotal - (r.CFSelled || 0),
                  Total: r.CFPriceUnit * r.Quantity,
                  itemLink: "/item/" + r.ItemId,
                  imgLink: "/r/" + r.Image + "?format=c100x80",
              });
          });
          var c = coupon.pickupCoupon(data.coupons, null, calcTotal(data.items));
          data.coupon = c || data.coupons[0] || null;
          data.useCoupon = c != null;
      });
  };


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  //moment.locale("zh-cn");
  var header = __webpack_require__(6);
  var data_table_1 = __webpack_require__(8);
  module.exports = function (args) {
      header();
      var today = moment().startOf("day");
      var timeRanges = [
          { name: "所有", range: function () { return { begin: null, end: null }; } },
          { name: '今天', range: function () { return { begin: moment().startOf("day"), end: null }; } },
          { name: '本周', range: function () { return { begin: moment().startOf("week"), end: null }; } },
          { name: '本月', range: function () { return { begin: moment().startOf("month"), end: null }; } },
          { name: '最近三个月', range: function () { return { begin: moment().subtract(3, "month"), end: null }; } }
      ];
      var data = {
          timeRanges: timeRanges,
          curTimeRange: timeRanges[0],
          recs: [],
          state: 0,
          ident: "",
          allCodes: "",
          version: 0,
          total: 0
      };
      function reload(pg) {
          var dr = data.curTimeRange;
          var tr = dr && dr.range() || { begin: null, end: null };
          api.Trade.List(args && args.user ? null : data.state == 0 ? "Selling" : data.state == 1 ? "OpenWaiting" : "Opened", tr.begin, tr.end, args && args.user, { paging: pg }).then(function (re) {
              re.Items.forEach(function (i) {
                  if (!i.ProductSelled)
                      i.ProductSelled = 0;
                  i.Time = time.format(i.Time);
                  if (i.OpenTime)
                      i.OpenTime = time.format(i.OpenTime);
                  if (i.WinSummary)
                      i.WinSummary.TradeTime = time.format(i.WinSummary.TradeTime);
                  var codes = i.Codes.split(';').map(function (i) { return 10000001 + parseInt(i); }).join(" ");
                  i.Codes = codes;
                  i.State = i.WinSummary ? "已揭晓" : i.ProductSelled < i.Total ? "正在进行..." : "等待揭晓";
              });
              data.recs = re.Items;
              if (pg.totalRequired)
                  data.total = re.Total || 0;
          });
      }
      var vm = new Vue({
          el: "#trade-history",
          data: data,
          methods: {
              setState: function (state) {
                  this.state = state;
                  this.version++;
              },
              setTimeRange: function (r) {
                  this.curTimeRange = r;
                  this.version++;
              },
              showAllCodes: function (r) {
                  var _this = this;
                  this.allCodes = "正在查询...";
                  $('#allCodes').modal('show');
                  api.Trade.AllCodes(r.Id).then(function (re) {
                      re = re.map(function (i) { return i + 10000001; });
                      _this.allCodes = re.join(" ");
                  });
              }
          },
          watch: {
              state: function (v) {
                  this.version++;
              }
          },
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  reload(pg);
              }
          }
      });
  };


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  var forms = __webpack_require__(9);
  var data = {
      id: 0,
      name: "",
      address: "",
      phone: "",
      provinceId: 0,
      cityId: 0,
      districtId: 0,
      provinces: [],
      cities: [],
      citiesParentId: 0,
      districts: [],
      districtsParentId: 0,
      isCurDefault: false
  };
  var inited = false;
  var curCallback = null;
  var validator;
  function init() {
      if (inited) {
          validator.resetForm();
          $(".form-group", $("form.addr-edit")[0]).removeClass("has-error").removeClass("has-feedback");
          return;
      }
      inited = true;
      var v = new Vue({
          el: "#addrEditModal",
          data: data,
          computed: {},
          watch: {
              provinceId: function (v) {
                  if (v == data.citiesParentId)
                      return;
                  data.cityId = 0;
                  data.districtId = 0;
                  if (!v)
                      data.cities = [];
                  else
                      api.DeliveryLocation.List(v).then(function (re) {
                          data.citiesParentId = data.provinceId;
                          data.cities = re;
                      });
              },
              cityId: function (v) {
                  if (v == data.districtsParentId)
                      return;
                  data.districtId = 0;
                  if (!v)
                      data.districts = [];
                  else
                      api.DeliveryLocation.List(v).then(function (re) {
                          data.districtsParentId = data.cityId;
                          data.districts = re;
                      });
              }
          },
          methods: {
              cancel: function () {
                  $("#addrEditModal").modal("hide");
              }
          }
      });
      api.DeliveryLocation.List(null).then(function (re) { return data.provinces = re; });
      validator = forms.validate("form.addr-edit", {
          rules: {
              ContactName: {
                  required: true,
                  minlength: 2,
              },
              ContactPhoneNumber: {
                  required: true,
                  isMobile: true
              },
              Address: {
                  required: true,
                  minlength: 3
              },
              ProvinceId: {
                  required: true
              },
              CityId: {
                  required: true
              },
              DistrictId: {
                  required: true
              }
          },
          messages: {
              ContactName: {
                  required: "请输入联系人姓名",
                  minlength: "联系人姓名至少需要2个汉字"
              },
              ContactPhoneNumber: {
                  required: "请输入联系人电话",
              },
              Address: {
                  required: "请输入具体地址",
                  minlength: "地址太短"
              },
              ProvinceId: {
                  required: "请选择省份"
              },
              CityId: {
                  required: "请选择城市"
              },
              DistrictId: {
                  required: "请选择地区"
              }
          },
          submitHandler: function (form, e) {
              e.preventDefault();
              $(".message", form).html("正在保存...");
              $("button.btn-primary", form).prop("disabled", true);
              var addr = {};
              $(form).serializeArray().forEach(function (p) { return addr[p.name] = p.value; });
              addr.Id = data.id;
              api.DeliveryAddress.UpdateAddress(addr).then(function (u) {
                  curCallback(u);
                  curCallback = null;
                  $(".message", form).html("");
                  $("button.btn-primary", form).prop("disabled", false);
                  $("#addrEditModal").modal("hide");
              }, function (err) {
                  $("button.btn-primary").prop("disabled", false);
                  $(".message", form).html(err._error);
              });
          },
          invalidHandler: function (form, validator) {
              return false;
          }
      });
  }
  function show(id, cb) {
      init();
      curCallback = cb;
      $("#addrEditModal").modal("show");
      $("#addrEditModal").one("hidden.bs.modal", function () {
          if (!curCallback)
              return;
          curCallback(0);
          curCallback = null;
      });
      if (!id) {
          data.id = 0;
          data.name = "";
          data.address = "";
          data.phone = "";
          data.provinceId = 0;
          data.cityId = 0;
          data.districtId = 0;
          data.isCurDefault = false;
      }
      else {
          api.DeliveryAddress.LoadForEditAsync(id).then(function (r) {
              Promise.all([
                  api.DeliveryLocation.List(r.CityId),
                  api.DeliveryLocation.List(r.ProvinceId)
              ]).then(function (re) {
                  data.id = r.Id;
                  data.name = r.ContactName;
                  data.address = r.Address;
                  data.phone = r.ContactPhoneNumber;
                  data.isCurDefault = r.IsDefaultAddress;
                  data.citiesParentId = r.ProvinceId;
                  data.districtsParentId = r.CityId;
                  data.provinceId = r.ProvinceId;
                  data.cityId = r.CityId;
                  data.districtId = r.DistrictId;
                  data.cities = re[1];
                  data.districts = re[0];
              });
          });
      }
  }
  exports.show = show;
  ;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  //moment.locale("zh-cn");
  var header = __webpack_require__(6);
  var auth = __webpack_require__(7);
  module.exports = function (args) {
      header();
      var today = moment().startOf("day");
      var data = {
          recs: [],
      };
      var vm = new Vue({
          el: "#win-records",
          data: data,
          methods: {}
      });
      return api.Round.ListWinnerRounds(args.user, { paging: { limit: 10 } }).then(function (re) {
          re.Items.forEach(function (r) {
              r.OpenTime = time.format(r.OpenTime);
              r.WinSummary.TradeTime = time.format(r.WinSummary.TradeTime);
          });
          data.recs = re.Items;
      });
  };


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  //moment.locale("zh-cn");
  var header = __webpack_require__(6);
  var editor = __webpack_require__(159);
  var forms = __webpack_require__(9);
  module.exports = function (args) {
      header();
      var data = {
          addrs: []
      };
      var reload = function () {
          return api.DeliveryAddress.ListUserAddresses().then(function (re) {
              return data.addrs = re;
          });
      };
      new Vue({
          el: "#user-addresses",
          data: data,
          computed: {},
          watch: {},
          methods: {
              edit: function (i) {
                  editor.show(i.Id, function (i) {
                      if (!i)
                          return;
                      reload();
                  });
              },
              remove: function (i) {
                  if (!confirm("您确定要删除此地址么？"))
                      return;
                  api.DeliveryAddress.RemoveAddress(i.Id).then(function (re) {
                      reload();
                  });
              },
              add: function () {
                  editor.show(0, function (i) {
                      if (!i)
                          return;
                      if (forms.tryJumpBack())
                          return;
                      reload();
                  });
              }
          }
      });
      api.DeliveryAddress.ListUserAddresses().then(function (re) {
          data.addrs = re;
      });
  };


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var forms = __webpack_require__(9);
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  module.exports = function () {
      var form = $("form.bind-phonenumber");
      var password = form.find("input[name=password]");
      var ident = form.find("input[name=ident]");
      var code = form.find("input[name=code]");
      var sendCode = form.find("button[data-action=sendVerifyCode]");
      var message = form.find(".message");
      forms.initShowPassword(password, form.find(".show-password"));
      actions.init({
          sendVerifyCode: function () {
              forms.sendVerifyCode(ident, sendCode, code, function (number) {
                  return api.User.BindPhoneNumberSendTokenMessage(number);
              });
          }
      });
      forms.validate(form, {
          rules: {
              ident: {
                  required: true,
                  isMobile: true
              },
              code: {
                  required: true,
                  length: 6
              }
          },
          messages: {
              ident: {
                  required: "请输入手机号"
              },
              code: {
                  required: "请输入验证码",
                  length: "请输入6位验证码"
              }
          },
          submitHandler: function () {
              message.html("正在绑定手机号...");
              $("button.submit").prop("disabled", true);
              var args = forms.getFormValues(form);
              api.User.BindPhoneNumber(args.ident, args.code).then(function (u) {
                  $("button.submit").prop("disabled", false);
                  message.html("绑定成功,正在为您登录...");
                  setTimeout(function () {
                      if (forms.tryJumpBack())
                          return;
                      window.location.href = "/";
                  }, 3000);
              }, function (err) {
                  $("button.submit").prop("disabled", false);
                  message.html(err._error);
              });
          },
          invalidHandler: function (form, validator) {
              return false;
          }
      });
  };


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  //moment.locale("zh-cn");
  var header = __webpack_require__(6);
  var data_table_1 = __webpack_require__(8);
  var curUserId = 0;
  function initSharedTab() {
      var data = {
          recs: [],
          version: 0,
          total: 0
      };
      var vm = new Vue({
          el: "#shared",
          data: data,
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  api.CFWinShared.ListSharedRounds(curUserId, { paging: pg }).then(function (re) {
                      re.Items.forEach(function (r) {
                          r.CreatedTime = time.format(r.CreatedTime);
                      });
                      data.recs = re.Items;
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                  });
              }
          }
      });
  }
  var unsharedTabInited = false;
  function initUnsharedTab() {
      if (unsharedTabInited)
          return;
      unsharedTabInited = true;
      var data = {
          recs: [],
          version: 0,
          total: 0
      };
      var items = [];
      var vm = new Vue({
          el: "#unshared",
          data: data,
          methods: {},
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  data.recs = items.slice(pg.offset, pg.offset + pg.limit);
              }
          }
      });
      api.CFWinShared.ListUnsharedRounds().then(function (re) {
          items = re.Items;
          items.forEach(function (r) {
              r.OpenTime = time.format(r.OpenTime);
              r.WinSummary.TradeTime = time.format(r.WinSummary.TradeTime);
          });
          data.total = items.length;
          data.version++;
      });
  }
  module.exports = function (args) {
      curUserId = args && args.user;
      header();
      initSharedTab();
      $('#unshared-link').on('shown.bs.tab', function () { return initUnsharedTab(); });
  };


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var header = __webpack_require__(6);
  module.exports = function () {
      header();
  };


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var header = __webpack_require__(6);
  module.exports = function () {
      header();
  };


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  //moment.locale("zh-cn");
  var header = __webpack_require__(6);
  var auth = __webpack_require__(7);
  var data_table_1 = __webpack_require__(8);
  var notification = __webpack_require__(14);
  module.exports = function () {
      header();
      var today = moment().startOf("day");
      var data = {
          sysRecs: [],
          recs: [],
          version: 0,
          total: 0
      };
      function clearNotification() {
          var bids = data.sysRecs.filter(function (r) { return !r.ReadTime; }).map(function (r) { return r.Id; });
          var nids = data.recs.filter(function (r) { return !r.ReadTime; }).map(function (r) { return r.Id; });
          if (bids.length || nids.length)
              api.UserNotificationService.SetReaded({
                  BroadcastIds: bids,
                  NormalIds: nids
              }).then(function (re) {
                  notification.clear();
              });
      }
      var vm = new Vue({
          el: "#user-notification",
          data: data,
          methods: {
              remove: function (n, sys) {
                  if (sys)
                      api.UserNotificationService.DeleteBroadcastNotification(n.Id).then(function (re) {
                          data.sysRecs = data.sysRecs.filter(function (r) { return r != n; });
                          notification.clear();
                      });
                  else
                      api.UserNotificationService.DeleteNormalNotification(n.Id).then(function (re) {
                          data.recs = data.recs.filter(function (r) { return r != n; });
                          notification.clear();
                      });
              }
          },
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  api.UserNotificationService.QueryUserNotification({ paging: pg }).then(function (re) {
                      re.Items.forEach(function (r) {
                          r.Time = time.format(r.Time);
                      });
                      data.recs = re.Items;
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                      clearNotification();
                  });
              }
          }
      });
      api.UserNotificationService.QueryBroadcastNotification().then(function (re) {
          re.forEach(function (r) {
              r.Time = time.format(r.Time);
          });
          data.sysRecs = re;
          clearNotification();
      });
  };


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var forms = __webpack_require__(9);
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  module.exports = function () {
      var form = $("form.reset-password");
      var password = form.find("input[name=password]");
      var ident = form.find("input[name=ident]");
      var code = form.find("input[name=code]");
      var sendCode = form.find("button[data-action=sendVerifyCode]");
      var message = form.find(".message");
      forms.initShowPassword(password, form.find(".show-password"));
      actions.init({
          sendVerifyCode: function () {
              forms.sendVerifyCode(ident, sendCode, code, function (number) {
                  return api.User.ResetPasswordSendTokenMessage(number);
              });
          }
      });
      function clear() {
          $("#resetpassword-ident").val("");
          $("#resetpassword-password").val("");
          $("#resetpassword-code").val("");
      }
      setTimeout(clear, 100);
      forms.validate(form, {
          rules: {
              ident: {
                  required: true,
                  isMobile: true
              },
              password: {
                  required: true,
                  minlength: 5
              },
              code: {
                  required: true,
                  length: 6
              }
          },
          messages: {
              ident: {
                  required: "请输入手机号"
              },
              password: {
                  required: "请输入新密码",
                  minlength: jQuery.validator.format("密码不能少于{0}个字符")
              },
              code: {
                  required: "请输入验证码",
                  length: "请输入6位验证码"
              }
          },
          submitHandler: function () {
              message.html("正在重置密码...");
              $("button.submit").prop("disabled", true);
              var args = forms.getFormValues(form);
              api.User.ResetPassword({
                  PhoneNumber: args.ident,
                  Token: args.code,
                  NewPassword: args.password
              }).then(function (u) {
                  $("button.submit").prop("disabled", false);
                  message.html("重置成功,正在为您登录...");
                  setTimeout(function () {
                      if (forms.tryJumpBack())
                          return;
                      window.location.href = "/";
                  }, 3000);
              }, function (err) {
                  $("button.submit").prop("disabled", false);
                  message.html(err._error);
              });
          },
          invalidHandler: function (form, validator) {
              return false;
          }
      });
  };


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var forms = __webpack_require__(9);
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  function handleChangePassword() {
      var form = $("#changePassword");
      var message = form.find(".message");
      forms.validate(form, {
          rules: {
              cur_password: {
                  required: true,
              },
              new_password: {
                  required: true,
                  password: true
              },
              repeat_password: {
                  required: true,
                  equalTo: "#new_password"
              }
          },
          messages: {
              cur_password: {
                  required: "请输入旧密码",
              },
              new_password: {
                  required: "请输入新密码",
              },
              repeat_password: {
                  required: "请再次输入新密码",
              }
          },
          submitHandler: function () {
              message.html("正在修改密码...");
              form.children("button.btn-primary").prop("disabled", true);
              var args = forms.getFormValues(form);
              api.User.SetPassword({ CurPassword: args.cur_password, NewPassword: args.new_password })
                  .then(function (u) {
                  form.children("button.btn-primary").prop("disabled", false);
                  message.html("密码修改成功");
                  setTimeout(function () {
                      form[0].reset();
                      message.html("");
                      $("#collapseOne").collapse('hide');
                  }, 1000);
              }, function (err) {
                  $("button.btn-primary").prop("disabled", false);
                  message.html(err._error);
              });
          },
          invalidHandler: function (form, validator) {
              return false;
          }
      });
  }
  module.exports = function () {
      handleChangePassword();
      actions.init({});
  };


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  //moment.locale("zh-cn");
  var header = __webpack_require__(6);
  var product = 0;
  var round = 0;
  var id = 0;
  var shareInited = false;
  var shareData = {
      title: "",
      content: "",
      title_touched: false,
      content_touched: false,
      title_message: "",
      content_message: "",
      try_submitted: false,
      executing: false,
      message: "",
      images: [],
      round: { WinSummary: { User: {} } }
  };
  function handleIconUpload() {
      var file = $('#shareImageUpload');
      file.attr("data-url", "/api/media/upload");
      file.fileupload({
          dataType: 'text',
          done: function (e, data) {
              shareData.images.push({ image: data.result });
          }
      });
  }
  module.exports = function (args) {
      header();
      if (args.id) {
          api.CFWinShared.LoadForEdit(args.id).then(function (re) {
              id = args.id;
              product = re.TargetId;
              round = re.Round;
              shareData.title = re.Title;
              shareData.content = re.Content;
              shareData.images = JSON.parse(re.Images);
              api.Round.Get(product, round).then(function (re) {
                  re.OpenTime = time.format(re.OpenTime);
                  shareData.round = re;
              });
          });
      }
      else {
          product = args.product;
          round = args.round;
      }
      handleIconUpload();
      shareInited = true;
      new Vue({
          el: "#user-win-share",
          data: shareData,
          computed: {
              title_message: function () {
                  return !shareData.title_touched || shareData.title.length > 4 ? "" : !shareData.title ? "请输入标题" : "标题至少需要4字";
              },
              content_message: function () {
                  return !shareData.content_touched || shareData.content.length > 15 ? "" : !shareData.content ? "请输入晒单内容" : "晒单内容至少需要15字";
              },
              disabled: function () {
                  return shareData.title.length < 4 ||
                      shareData.content.length < 15 ||
                      shareData.try_submitted && shareData.images.length < 2 ||
                      shareData.executing;
              },
              pic_alert: function () {
                  return shareData.try_submitted && shareData.images.length < 2;
              }
          },
          watch: {
              title: function (v) {
                  shareData.title_touched = true;
              },
              content: function (v) {
                  shareData.content_touched = true;
              },
          },
          methods: {
              remove: function (i) {
                  shareData.images = shareData.images.filter(function (img) { return img != i; });
              },
              submit: function () {
                  shareData.try_submitted = true;
                  if (shareData.images.length < 2)
                      return;
                  shareData.message = "正在晒单...";
                  shareData.executing = true;
                  var args = {
                      Id: id,
                      Title: shareData.title,
                      Content: shareData.content,
                      Images: JSON.stringify(shareData.images),
                      Image: shareData.images[0].image,
                      TargetId: product,
                      Round: round
                  };
                  if (id)
                      api.CFWinShared.UpdateAsync(args).then(function (r) {
                          shareData.executing = true;
                          shareData.message = "晒单成功，正在跳转...";
                          window.location.href = "/user/expose";
                      }, function (e) {
                          shareData.executing = false;
                          shareData.message = e._error;
                      });
                  else
                      api.CFWinShared.CreateAsync(args).then(function (r) {
                          shareData.executing = true;
                          shareData.message = "晒单成功，正在跳转...";
                          window.location.href = "/user/expose";
                      }, function (e) {
                          shareData.executing = false;
                          shareData.message = e._error;
                      });
              },
              upload: function () {
                  $('#shareImageUpload').click();
              }
          }
      });
      api.Round.Get(product, round).then(function (re) {
          re.OpenTime = time.format(re.OpenTime);
          shareData.round = re;
      });
  };


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var forms = __webpack_require__(9);
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  var weichat = __webpack_require__(22);
  var validator = __webpack_require__(15);
  var userTracking = __webpack_require__(13);
  function signin(args) {
  }
  module.exports = function (pageArgs) {
      actions.init({
          signin: signin,
          signinWeixin: function () {
              weichat.Signin(forms.getJumpBackUrl() || "/");
          },
          clear: clear
      });
      function clear() {
          $("#signin-user").val("");
          $("#signin-password").val("");
      }
      setTimeout(clear, 100);
      forms.validate("form.signin", {
          rules: {
              ident: {
                  required: true,
              },
              password: {
                  required: true,
                  minlength: 5
              }
          },
          messages: {
              ident: {
                  required: "请输入账号"
              },
              password: {
                  required: "请输入密码",
                  minlength: jQuery.validator.format("密码不能少于{0}个字符")
              }
          },
          submitHandler: function (form, e) {
              e.preventDefault();
              $(".message", form).html("正在登录...");
              $("button.btn-primary").prop("disabled", true);
              var args = {};
              $(form).serializeArray().forEach(function (p) { return args[p.name] = p.value; });
              api.User.Signin(args).then(function (u) {
                  $(".message", form).html("登录成功,正在跳转...");
                  if (pageArgs && pageArgs.jump === false) {
                      window.location.reload();
                      return;
                  }
                  if (forms.tryJumpBack())
                      return;
                  window.location.href = pageArgs && pageArgs.jump || "/";
              }, function (err) {
                  $("button.btn-primary").prop("disabled", false);
                  $(".message", form).html(err._error);
              });
          },
          invalidHandler: function (form, validator) {
              return false;
          }
      });
      var lastCheckPhoneNumber = null;
      $("#signin-password").on("focus", function () {
          var phonenumber = $("#signin-user").val().trim();
          if (!validator.isMobile(phonenumber))
              return;
          if (phonenumber == lastCheckPhoneNumber)
              return;
          lastCheckPhoneNumber = phonenumber;
          api.User.ExistsWeiXinUser(phonenumber).then(function (re) {
              if (!re) {
                  $("#wx-signin-qr").hide();
                  return;
              }
              userTracking.getUserTracking().then(function (utd) {
                  var href = location.href;
                  var i = href.indexOf("/", 10);
                  href = href.substring(0, i) + "/api/externalauthorization/callback/wcsite";
                  api.ExternalAuthorization.GetAuthState(forms.getJumpBackUrl() || "/", utd.uc || null, utd.ui || null).then(function (re) {
                      var obj = new window["WxLogin"]({
                          id: "wx-signin-qr-container",
                          appid: "wxcec91c6d06d685aa",
                          scope: "snsapi_login",
                          redirect_uri: href,
                          state: re,
                          style: "",
                          href: ""
                      });
                      $("#wx-signin-qr").show();
                  });
              });
          });
      });
      //$('form.signin').validate({
      //    rules: {
      //        firstname: {
      //            minlength: 3,
      //            maxlength: 15,
      //            required: true
      //        },
      //        lastname: {
      //            minlength: 3,
      //            maxlength: 15,
      //            required: true
      //        }
      //    },
      //    highlight: function (element) {
      //        $(element).closest('.form-group').addClass('has-error');
      //    },
      //    unhighlight: function (element) {
      //        $(element).closest('.form-group').removeClass('has-error');
      //    },
      //    errorElement: 'span',
      //    errorClass: 'help-block',
      //    errorPlacement: function (error, element) {
      //        if (element.parent('.input-group').length) {
      //            error.insertAfter(element.parent());
      //        } else {
      //            error.insertAfter(element);
      //        }
      //    }
      //});
  };


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var forms = __webpack_require__(9);
  var actions = __webpack_require__(5);
  var api = __webpack_require__(2);
  var userTracking = __webpack_require__(13);
  var auth = __webpack_require__(7);
  var weichat = __webpack_require__(22);
  module.exports = function (pageArgs) {
      var form = $("form.signup");
      var password = form.find("input[name=password]");
      var ident = form.find("input[name=ident]");
      var code = form.find("input[name=code]");
      var sendCode = form.find("button[data-action=sendVerifyCode]");
      var message = form.find(".message");
      forms.initShowPassword(password, form.find(".show-password"));
      actions.init({
          sendVerifyCode: function () {
              forms.sendVerifyCode(ident, sendCode, code, function (number) {
                  return api.User.SignupSendTokenMessage(number);
              });
          },
          showSignup: function () {
              $("#dlg-signup").modal();
          },
          signinWeixin: function () {
              weichat.Signin(forms.getJumpBackUrl() || "/");
          }
      });
      function clear() {
          $("#signup-ident").val("");
          $("#signup-password").val("");
          $("#signup-code").val("");
      }
      setTimeout(clear, 100);
      $("#accepted").on("click", function () {
          $("#register").prop("disabled", !$("#accepted").prop("checked"));
      });
      forms.validate(form, {
          rules: {
              ident: {
                  required: true,
                  isMobile: true
              },
              password: {
                  required: true,
                  password: true
              },
              code: {
                  required: true,
                  length: 6
              }
          },
          messages: {
              ident: {
                  required: "请输入手机号"
              },
              password: {
                  required: "请输入密码",
              },
              code: {
                  required: "请输入验证码",
                  length: "请输入6位验证码"
              }
          },
          submitHandler: function () {
              message.html("正在注册...");
              $("button.submit").prop("disabled", true);
              userTracking.getUserTracking().then(function (utd) {
                  var args = forms.getFormValues(form);
                  api.User.Signup({
                      PhoneNumber: args.ident,
                      Password: args.password,
                      Token: args.code,
                      UserSourceId: parseInt(utd.uc) || null,
                      UserInviterId: utd.ui || null
                  }).then(function (u) {
                      $("button.submit").prop("disabled", false);
                      if (pageArgs && pageArgs.jump === false) {
                          window["user"] = auth.user();
                          $(document).trigger("signin");
                          return;
                      }
                      $(".message", form).html("注册成功,正在跳转...");
                      if (forms.tryJumpBack())
                          return;
                      window.location.href = "/";
                  }, function (err) {
                      $("button.submit").prop("disabled", false);
                      message.html(err._error);
                  });
              });
          },
          invalidHandler: function (form, validator) {
              return false;
          }
      });
  };


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var api = __webpack_require__(2);
  var time = __webpack_require__(4);
  var Vue = __webpack_require__(3);
  var moment = __webpack_require__(1);
  //moment.locale("zh-cn");
  var header = __webpack_require__(6);
  var auth = __webpack_require__(7);
  var data_table_1 = __webpack_require__(8);
  var userAddrs = null;
  function initWinTab() {
      var today = moment().startOf("day");
      var data = {
          recs: [],
          addrs: [],
          version: 0,
          total: 0
      };
      var itemFormat = function (r) {
          if (!r.Status && !r.IsVirtual) {
              var a = data.addrs.filter(function (a) { return a.IsDefaultAddress; });
              r.addr = a.length && a[0].Id || data.addrs.length && data.addrs[0].Id || 0;
          }
          r.Round.OpenTime = time.format(r.Round.OpenTime);
          r.Round.WinSummary.TradeTime = time.format(r.Round.WinSummary.TradeTime);
      };
      var initSpecs = function (recs) {
          var ops = {};
          recs.filter(function (r) { return !r.Status; }).forEach(function (i) {
              ops["" + i.Round.ProductId] = 1;
          });
          var opids = [];
          for (var k in ops)
              opids.push(k);
          if (!opids.length)
              return;
          Promise.all(opids.map(function (oi) { return api.Product.ListSpec(oi); })).then(function (re) {
              var specMap = {};
              for (var i = 0; i < opids.length; i++) {
                  if (re[i] && re[i].length)
                      specMap[opids[i]] = re[i];
              }
              data.recs = recs.map(function (r) {
                  return {
                      Round: r.Round,
                      Status: r.Status,
                      TradeIdent: r.TradeIdent,
                      IsVirtual: r.IsVirtual,
                      ProductSpecName: r.ProductSpecName,
                      addr: r.addr,
                      spec: "",
                      specs: specMap[r.Round.ProductId + ""] || null
                  };
              });
          });
      };
      var vm = new Vue({
          el: "#win-records",
          data: data,
          methods: {
              verifyAddress: function (r) {
                  api.DeliveryCreate.Create(r.Round.ProductId, r.Round.Round, r.addr, r.spec).then(function (re) {
                      return api.CFWinRecord.Get(r.Round.ProductId, r.Round.Round).then(function (rec) {
                          itemFormat(rec);
                          data.recs = data.recs.map(function (cr) { return cr == r ? rec : cr; });
                      });
                  });
              },
              verifyReceived: function (r) {
                  api.DeliveryControl.Received(r.Status.Id).then(function (re) {
                      return api.CFWinRecord.Get(r.Round.ProductId, r.Round.Round).then(function (rec) {
                          itemFormat(rec);
                          data.recs = data.recs.map(function (cr) { return cr == r ? rec : cr; });
                      });
                  });
              },
              readToken: function (r) {
                  $('#dialog-title').html(r.Round.Title);
                  $('#dialog-body').html("<div class='win-virtual-item-token'>\u6B63\u5728\u8F7D\u5165...</div>");
                  $('#dialog').modal('show');
                  if (r.Status.State != "Received")
                      $('#dialog').one('hidden.bs.modal', function (e) {
                          window.location.reload();
                      });
                  api.DeliveryControl.GetVirtualItemToken(r.Status.Id).then(function (re) {
                      return $('#dialog-body').html("\n<div class='win-virtual-item-token'>\n" + re.replace(/\n/g, '<br/>') + "</div>    \n<hr/><button type='button' class='btn btn-primary btn-lg' data-dismiss='modal'>\u786E \u5B9A</button>\n                    ");
                  });
              },
          },
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  var u = auth.user();
                  if (!u || !u.id)
                      return;
                  api.CFWinRecord.List(null, null, { paging: pg }).then(function (re) {
                      re.Items.forEach(itemFormat);
                      data.recs = re.Items;
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                      initSpecs(re.Items);
                  });
              }
          }
      });
      if (userAddrs)
          data.addrs = userAddrs;
      else
          api.DeliveryAddress.ListUserAddresses().then(function (re) {
              data.addrs = userAddrs = re;
          });
  }
  function initObjectPrizeRecordTab() {
      var today = moment().startOf("day");
      var data = {
          recs: [],
          addrs: [],
          version: 0,
          total: 0
      };
      var itemFormat = function (r) {
          if (!r.Status) {
              var a = data.addrs.filter(function (a) { return a.IsDefaultAddress; });
              r.addr = a.length && a[0].Id || data.addrs.length && data.addrs[0].Id || 0;
          }
          else
              r.addr = 0;
          r.Record.Time = time.format(r.Record.Time);
      };
      var initSpecs = function (recs) {
          var ops = {};
          recs.filter(function (r) { return !r.Status; }).forEach(function (i) {
              ops[i.Record.ObjectPrizeId.toString()] = 1;
          });
          var opids = [];
          for (var k in ops)
              opids.push(k);
          if (!opids.length)
              return;
          Promise.all(opids.map(function (oi) { return api.ObjectPrize.ListSpec(oi); })).then(function (re) {
              var specMap = {};
              for (var i = 0; i < opids.length; i++) {
                  if (re[i] && re[i].length)
                      specMap[opids[i]] = re[i];
              }
              data.recs = recs.map(function (r) {
                  return {
                      Record: r.Record,
                      Status: r.Status,
                      addr: r.addr,
                      spec: "",
                      specs: specMap[r.Record.ObjectPrizeId + ""] || null
                  };
              });
          });
      };
      var vm = new Vue({
          el: "#objectprize",
          data: data,
          methods: {
              verifyAddress: function (r) {
                  api.DeliveryCreate.CreateObjectPrizeDelivery(r.Record.Id, r.addr, r.spec).then(function (re) {
                      return api.Promotion.ListUserObjectPrizeRecord({
                          RecordId: r.Record.Id
                      }).then(function (recs) {
                          var rec = recs.Items[0];
                          itemFormat(rec);
                          data.recs = data.recs.map(function (cr) { return cr == r ? rec : cr; });
                      });
                  });
              },
              verifyReceived: function (r) {
                  api.DeliveryControl.Received(r.Status.Id, r.addr).then(function (re) {
                      return api.Promotion.ListUserObjectPrizeRecord({
                          RecordId: r.Record.Id
                      }).then(function (recs) {
                          var rec = recs.Items[0];
                          itemFormat(rec);
                          data.recs = data.recs.map(function (cr) { return cr == r ? rec : cr; });
                      });
                  });
              },
              readToken: function (r) {
                  $('#dialog-title').html(r.Record.ObjectPrizeName);
                  $('#dialog-body').html("<div class='win-virtual-item-token'>\u6B63\u5728\u8F7D\u5165...</div>");
                  $('#dialog').modal('show');
                  //if (r.Status.State != "Received")
                  $('#dialog').one('hidden.bs.modal', function (e) {
                      if (window.location.href.indexOf("#activity") == -1)
                          window.location.href += "#activity";
                      window.location.reload();
                  });
                  api.DeliveryControl.GetVirtualItemToken(r.Status.Id).then(function (re) {
                      return $('#dialog-body').html("\n<div class='win-virtual-item-token'>\n" + re.replace(/\n/g, '<br/>') + "</div>    \n<hr/><button type='button' class='btn btn-primary btn-lg' data-dismiss='modal'>\u786E \u5B9A</button>\n                    ");
                  });
              },
          },
          components: {
              dataTable: data_table_1.default
          },
          events: {
              loadTableData: function (pg) {
                  var u = auth.user();
                  if (!u || !u.id)
                      return;
                  api.Promotion.ListUserObjectPrizeRecord({
                      RecordId: null,
                      Time: { Begin: null, End: null }
                  }, { paging: pg }).then(function (re) {
                      re.Items.forEach(itemFormat);
                      data.recs = re.Items;
                      if (pg.totalRequired)
                          data.total = re.Total || 0;
                      initSpecs(re.Items);
                  });
              }
          }
      });
      if (userAddrs)
          data.addrs = userAddrs;
      else
          api.DeliveryAddress.ListUserAddresses().then(function (re) {
              data.addrs = userAddrs = re;
          });
  }
  module.exports = function () {
      header();
      initWinTab();
      $('#objectprize-link').on('shown.bs.tab', function () { return initObjectPrizeRecordTab(); });
      if (window.location.href.indexOf("#activity") != -1)
          $('#objectprize-link').click();
  };


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

  //var React = require('react');
  //var Slider = require('react-slick');
  "use strict";
  var slick = __webpack_require__(179);
  module.exports = function (e) {
      $(e).slick({
          dots: true,
          infinite: true,
          speed: 500,
          slidesToShow: 1,
          slidesToScroll: 1,
          autoplay: true,
          autoplaySpeed: 5000
      });
  };


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  var time = __webpack_require__(4);
  module.exports = function (e, cb) {
      setInterval(function () {
          e.innerHTML = time.format(new Date(), "HH:mm:ss");
      }, 1000);
  };


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process, global, setImmediate) {/* @preserve
   * The MIT License (MIT)
   * 
   * Copyright (c) 2013-2015 Petka Antonov
   * 
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   * 
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   * 
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   * 
   */
  /**
   * bluebird build version 3.4.0
   * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, using, timers, filter, any, each
  */
  !function(e){if(true)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Promise=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof _dereq_=="function"&&_dereq_;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof _dereq_=="function"&&_dereq_;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise) {
  var SomePromiseArray = Promise._SomePromiseArray;
  function any(promises) {
      var ret = new SomePromiseArray(promises);
      var promise = ret.promise();
      ret.setHowMany(1);
      ret.setUnwrap();
      ret.init();
      return promise;
  }

  Promise.any = function (promises) {
      return any(promises);
  };

  Promise.prototype.any = function () {
      return any(this);
  };

  };

  },{}],2:[function(_dereq_,module,exports){
  "use strict";
  var firstLineError;
  try {throw new Error(); } catch (e) {firstLineError = e;}
  var schedule = _dereq_("./schedule");
  var Queue = _dereq_("./queue");
  var util = _dereq_("./util");

  function Async() {
      this._customScheduler = false;
      this._isTickUsed = false;
      this._lateQueue = new Queue(16);
      this._normalQueue = new Queue(16);
      this._haveDrainedQueues = false;
      this._trampolineEnabled = true;
      var self = this;
      this.drainQueues = function () {
          self._drainQueues();
      };
      this._schedule = schedule;
  }

  Async.prototype.setScheduler = function(fn) {
      var prev = this._schedule;
      this._schedule = fn;
      this._customScheduler = true;
      return prev;
  };

  Async.prototype.hasCustomScheduler = function() {
      return this._customScheduler;
  };

  Async.prototype.enableTrampoline = function() {
      this._trampolineEnabled = true;
  };

  Async.prototype.disableTrampolineIfNecessary = function() {
      if (util.hasDevTools) {
          this._trampolineEnabled = false;
      }
  };

  Async.prototype.haveItemsQueued = function () {
      return this._isTickUsed || this._haveDrainedQueues;
  };


  Async.prototype.fatalError = function(e, isNode) {
      if (isNode) {
          process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
              "\n");
          process.exit(2);
      } else {
          this.throwLater(e);
      }
  };

  Async.prototype.throwLater = function(fn, arg) {
      if (arguments.length === 1) {
          arg = fn;
          fn = function () { throw arg; };
      }
      if (typeof setTimeout !== "undefined") {
          setTimeout(function() {
              fn(arg);
          }, 0);
      } else try {
          this._schedule(function() {
              fn(arg);
          });
      } catch (e) {
          throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
  };

  function AsyncInvokeLater(fn, receiver, arg) {
      this._lateQueue.push(fn, receiver, arg);
      this._queueTick();
  }

  function AsyncInvoke(fn, receiver, arg) {
      this._normalQueue.push(fn, receiver, arg);
      this._queueTick();
  }

  function AsyncSettlePromises(promise) {
      this._normalQueue._pushOne(promise);
      this._queueTick();
  }

  if (!util.hasDevTools) {
      Async.prototype.invokeLater = AsyncInvokeLater;
      Async.prototype.invoke = AsyncInvoke;
      Async.prototype.settlePromises = AsyncSettlePromises;
  } else {
      Async.prototype.invokeLater = function (fn, receiver, arg) {
          if (this._trampolineEnabled) {
              AsyncInvokeLater.call(this, fn, receiver, arg);
          } else {
              this._schedule(function() {
                  setTimeout(function() {
                      fn.call(receiver, arg);
                  }, 100);
              });
          }
      };

      Async.prototype.invoke = function (fn, receiver, arg) {
          if (this._trampolineEnabled) {
              AsyncInvoke.call(this, fn, receiver, arg);
          } else {
              this._schedule(function() {
                  fn.call(receiver, arg);
              });
          }
      };

      Async.prototype.settlePromises = function(promise) {
          if (this._trampolineEnabled) {
              AsyncSettlePromises.call(this, promise);
          } else {
              this._schedule(function() {
                  promise._settlePromises();
              });
          }
      };
  }

  Async.prototype.invokeFirst = function (fn, receiver, arg) {
      this._normalQueue.unshift(fn, receiver, arg);
      this._queueTick();
  };

  Async.prototype._drainQueue = function(queue) {
      while (queue.length() > 0) {
          var fn = queue.shift();
          if (typeof fn !== "function") {
              fn._settlePromises();
              continue;
          }
          var receiver = queue.shift();
          var arg = queue.shift();
          fn.call(receiver, arg);
      }
  };

  Async.prototype._drainQueues = function () {
      this._drainQueue(this._normalQueue);
      this._reset();
      this._haveDrainedQueues = true;
      this._drainQueue(this._lateQueue);
  };

  Async.prototype._queueTick = function () {
      if (!this._isTickUsed) {
          this._isTickUsed = true;
          this._schedule(this.drainQueues);
      }
  };

  Async.prototype._reset = function () {
      this._isTickUsed = false;
  };

  module.exports = Async;
  module.exports.firstLineError = firstLineError;

  },{"./queue":26,"./schedule":29,"./util":36}],3:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL, tryConvertToPromise, debug) {
  var calledBind = false;
  var rejectThis = function(_, e) {
      this._reject(e);
  };

  var targetRejected = function(e, context) {
      context.promiseRejectionQueued = true;
      context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
  };

  var bindingResolved = function(thisArg, context) {
      if (((this._bitField & 50397184) === 0)) {
          this._resolveCallback(context.target);
      }
  };

  var bindingRejected = function(e, context) {
      if (!context.promiseRejectionQueued) this._reject(e);
  };

  Promise.prototype.bind = function (thisArg) {
      if (!calledBind) {
          calledBind = true;
          Promise.prototype._propagateFrom = debug.propagateFromFunction();
          Promise.prototype._boundValue = debug.boundValueFunction();
      }
      var maybePromise = tryConvertToPromise(thisArg);
      var ret = new Promise(INTERNAL);
      ret._propagateFrom(this, 1);
      var target = this._target();
      ret._setBoundTo(maybePromise);
      if (maybePromise instanceof Promise) {
          var context = {
              promiseRejectionQueued: false,
              promise: ret,
              target: target,
              bindingPromise: maybePromise
          };
          target._then(INTERNAL, targetRejected, undefined, ret, context);
          maybePromise._then(
              bindingResolved, bindingRejected, undefined, ret, context);
          ret._setOnCancel(maybePromise);
      } else {
          ret._resolveCallback(target);
      }
      return ret;
  };

  Promise.prototype._setBoundTo = function (obj) {
      if (obj !== undefined) {
          this._bitField = this._bitField | 2097152;
          this._boundTo = obj;
      } else {
          this._bitField = this._bitField & (~2097152);
      }
  };

  Promise.prototype._isBound = function () {
      return (this._bitField & 2097152) === 2097152;
  };

  Promise.bind = function (thisArg, value) {
      return Promise.resolve(value).bind(thisArg);
  };
  };

  },{}],4:[function(_dereq_,module,exports){
  "use strict";
  var old;
  if (typeof Promise !== "undefined") old = Promise;
  function noConflict() {
      try { if (Promise === bluebird) Promise = old; }
      catch (e) {}
      return bluebird;
  }
  var bluebird = _dereq_("./promise")();
  bluebird.noConflict = noConflict;
  module.exports = bluebird;

  },{"./promise":22}],5:[function(_dereq_,module,exports){
  "use strict";
  var cr = Object.create;
  if (cr) {
      var callerCache = cr(null);
      var getterCache = cr(null);
      callerCache[" size"] = getterCache[" size"] = 0;
  }

  module.exports = function(Promise) {
  var util = _dereq_("./util");
  var canEvaluate = util.canEvaluate;
  var isIdentifier = util.isIdentifier;

  var getMethodCaller;
  var getGetter;
  if (false) {
  var makeMethodCaller = function (methodName) {
      return new Function("ensureMethod", "                                    \n\
          return function(obj) {                                               \n\
              'use strict'                                                     \n\
              var len = this.length;                                           \n\
              ensureMethod(obj, 'methodName');                                 \n\
              switch(len) {                                                    \n\
                  case 1: return obj.methodName(this[0]);                      \n\
                  case 2: return obj.methodName(this[0], this[1]);             \n\
                  case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                  case 0: return obj.methodName();                             \n\
                  default:                                                     \n\
                      return obj.methodName.apply(obj, this);                  \n\
              }                                                                \n\
          };                                                                   \n\
          ".replace(/methodName/g, methodName))(ensureMethod);
  };

  var makeGetter = function (propertyName) {
      return new Function("obj", "                                             \n\
          'use strict';                                                        \n\
          return obj.propertyName;                                             \n\
          ".replace("propertyName", propertyName));
  };

  var getCompiled = function(name, compiler, cache) {
      var ret = cache[name];
      if (typeof ret !== "function") {
          if (!isIdentifier(name)) {
              return null;
          }
          ret = compiler(name);
          cache[name] = ret;
          cache[" size"]++;
          if (cache[" size"] > 512) {
              var keys = Object.keys(cache);
              for (var i = 0; i < 256; ++i) delete cache[keys[i]];
              cache[" size"] = keys.length - 256;
          }
      }
      return ret;
  };

  getMethodCaller = function(name) {
      return getCompiled(name, makeMethodCaller, callerCache);
  };

  getGetter = function(name) {
      return getCompiled(name, makeGetter, getterCache);
  };
  }

  function ensureMethod(obj, methodName) {
      var fn;
      if (obj != null) fn = obj[methodName];
      if (typeof fn !== "function") {
          var message = "Object " + util.classString(obj) + " has no method '" +
              util.toString(methodName) + "'";
          throw new Promise.TypeError(message);
      }
      return fn;
  }

  function caller(obj) {
      var methodName = this.pop();
      var fn = ensureMethod(obj, methodName);
      return fn.apply(obj, this);
  }
  Promise.prototype.call = function (methodName) {
      var args = [].slice.call(arguments, 1);;
      if (false) {
          if (canEvaluate) {
              var maybeCaller = getMethodCaller(methodName);
              if (maybeCaller !== null) {
                  return this._then(
                      maybeCaller, undefined, undefined, args, undefined);
              }
          }
      }
      args.push(methodName);
      return this._then(caller, undefined, undefined, args, undefined);
  };

  function namedGetter(obj) {
      return obj[this];
  }
  function indexedGetter(obj) {
      var index = +this;
      if (index < 0) index = Math.max(0, index + obj.length);
      return obj[index];
  }
  Promise.prototype.get = function (propertyName) {
      var isIndex = (typeof propertyName === "number");
      var getter;
      if (!isIndex) {
          if (canEvaluate) {
              var maybeGetter = getGetter(propertyName);
              getter = maybeGetter !== null ? maybeGetter : namedGetter;
          } else {
              getter = namedGetter;
          }
      } else {
          getter = indexedGetter;
      }
      return this._then(getter, undefined, undefined, propertyName, undefined);
  };
  };

  },{"./util":36}],6:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, PromiseArray, apiRejection, debug) {
  var util = _dereq_("./util");
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;
  var async = Promise._async;

  Promise.prototype["break"] = Promise.prototype.cancel = function() {
      if (!debug.cancellation()) return this._warn("cancellation is disabled");

      var promise = this;
      var child = promise;
      while (promise.isCancellable()) {
          if (!promise._cancelBy(child)) {
              if (child._isFollowing()) {
                  child._followee().cancel();
              } else {
                  child._cancelBranched();
              }
              break;
          }

          var parent = promise._cancellationParent;
          if (parent == null || !parent.isCancellable()) {
              if (promise._isFollowing()) {
                  promise._followee().cancel();
              } else {
                  promise._cancelBranched();
              }
              break;
          } else {
              if (promise._isFollowing()) promise._followee().cancel();
              child = promise;
              promise = parent;
          }
      }
  };

  Promise.prototype._branchHasCancelled = function() {
      this._branchesRemainingToCancel--;
  };

  Promise.prototype._enoughBranchesHaveCancelled = function() {
      return this._branchesRemainingToCancel === undefined ||
             this._branchesRemainingToCancel <= 0;
  };

  Promise.prototype._cancelBy = function(canceller) {
      if (canceller === this) {
          this._branchesRemainingToCancel = 0;
          this._invokeOnCancel();
          return true;
      } else {
          this._branchHasCancelled();
          if (this._enoughBranchesHaveCancelled()) {
              this._invokeOnCancel();
              return true;
          }
      }
      return false;
  };

  Promise.prototype._cancelBranched = function() {
      if (this._enoughBranchesHaveCancelled()) {
          this._cancel();
      }
  };

  Promise.prototype._cancel = function() {
      if (!this.isCancellable()) return;

      this._setCancelled();
      async.invoke(this._cancelPromises, this, undefined);
  };

  Promise.prototype._cancelPromises = function() {
      if (this._length() > 0) this._settlePromises();
  };

  Promise.prototype._unsetOnCancel = function() {
      this._onCancelField = undefined;
  };

  Promise.prototype.isCancellable = function() {
      return this.isPending() && !this.isCancelled();
  };

  Promise.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) {
      if (util.isArray(onCancelCallback)) {
          for (var i = 0; i < onCancelCallback.length; ++i) {
              this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
          }
      } else if (onCancelCallback !== undefined) {
          if (typeof onCancelCallback === "function") {
              if (!internalOnly) {
                  var e = tryCatch(onCancelCallback).call(this._boundValue());
                  if (e === errorObj) {
                      this._attachExtraTrace(e.e);
                      async.throwLater(e.e);
                  }
              }
          } else {
              onCancelCallback._resultCancelled(this);
          }
      }
  };

  Promise.prototype._invokeOnCancel = function() {
      var onCancelCallback = this._onCancel();
      this._unsetOnCancel();
      async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
  };

  Promise.prototype._invokeInternalOnCancel = function() {
      if (this.isCancellable()) {
          this._doInvokeOnCancel(this._onCancel(), true);
          this._unsetOnCancel();
      }
  };

  Promise.prototype._resultCancelled = function() {
      this.cancel();
  };

  };

  },{"./util":36}],7:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(NEXT_FILTER) {
  var util = _dereq_("./util");
  var getKeys = _dereq_("./es5").keys;
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;

  function catchFilter(instances, cb, promise) {
      return function(e) {
          var boundTo = promise._boundValue();
          predicateLoop: for (var i = 0; i < instances.length; ++i) {
              var item = instances[i];

              if (item === Error ||
                  (item != null && item.prototype instanceof Error)) {
                  if (e instanceof item) {
                      return tryCatch(cb).call(boundTo, e);
                  }
              } else if (typeof item === "function") {
                  var matchesPredicate = tryCatch(item).call(boundTo, e);
                  if (matchesPredicate === errorObj) {
                      return matchesPredicate;
                  } else if (matchesPredicate) {
                      return tryCatch(cb).call(boundTo, e);
                  }
              } else if (util.isObject(e)) {
                  var keys = getKeys(item);
                  for (var j = 0; j < keys.length; ++j) {
                      var key = keys[j];
                      if (item[key] != e[key]) {
                          continue predicateLoop;
                      }
                  }
                  return tryCatch(cb).call(boundTo, e);
              }
          }
          return NEXT_FILTER;
      };
  }

  return catchFilter;
  };

  },{"./es5":13,"./util":36}],8:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise) {
  var longStackTraces = false;
  var contextStack = [];

  Promise.prototype._promiseCreated = function() {};
  Promise.prototype._pushContext = function() {};
  Promise.prototype._popContext = function() {return null;};
  Promise._peekContext = Promise.prototype._peekContext = function() {};

  function Context() {
      this._trace = new Context.CapturedTrace(peekContext());
  }
  Context.prototype._pushContext = function () {
      if (this._trace !== undefined) {
          this._trace._promiseCreated = null;
          contextStack.push(this._trace);
      }
  };

  Context.prototype._popContext = function () {
      if (this._trace !== undefined) {
          var trace = contextStack.pop();
          var ret = trace._promiseCreated;
          trace._promiseCreated = null;
          return ret;
      }
      return null;
  };

  function createContext() {
      if (longStackTraces) return new Context();
  }

  function peekContext() {
      var lastIndex = contextStack.length - 1;
      if (lastIndex >= 0) {
          return contextStack[lastIndex];
      }
      return undefined;
  }
  Context.CapturedTrace = null;
  Context.create = createContext;
  Context.deactivateLongStackTraces = function() {};
  Context.activateLongStackTraces = function() {
      var Promise_pushContext = Promise.prototype._pushContext;
      var Promise_popContext = Promise.prototype._popContext;
      var Promise_PeekContext = Promise._peekContext;
      var Promise_peekContext = Promise.prototype._peekContext;
      var Promise_promiseCreated = Promise.prototype._promiseCreated;
      Context.deactivateLongStackTraces = function() {
          Promise.prototype._pushContext = Promise_pushContext;
          Promise.prototype._popContext = Promise_popContext;
          Promise._peekContext = Promise_PeekContext;
          Promise.prototype._peekContext = Promise_peekContext;
          Promise.prototype._promiseCreated = Promise_promiseCreated;
          longStackTraces = false;
      };
      longStackTraces = true;
      Promise.prototype._pushContext = Context.prototype._pushContext;
      Promise.prototype._popContext = Context.prototype._popContext;
      Promise._peekContext = Promise.prototype._peekContext = peekContext;
      Promise.prototype._promiseCreated = function() {
          var ctx = this._peekContext();
          if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
      };
  };
  return Context;
  };

  },{}],9:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, Context) {
  var getDomain = Promise._getDomain;
  var async = Promise._async;
  var Warning = _dereq_("./errors").Warning;
  var util = _dereq_("./util");
  var canAttachTrace = util.canAttachTrace;
  var unhandledRejectionHandled;
  var possiblyUnhandledRejection;
  var bluebirdFramePattern =
      /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
  var stackFramePattern = null;
  var formatStack = null;
  var indentStackFrames = false;
  var printWarning;
  var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 &&
                          (true ||
                           util.env("BLUEBIRD_DEBUG") ||
                           util.env("NODE_ENV") === "development"));

  var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 &&
      (debugging || util.env("BLUEBIRD_WARNINGS")));

  var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 &&
      (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));

  var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 &&
      (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));

  Promise.prototype.suppressUnhandledRejections = function() {
      var target = this._target();
      target._bitField = ((target._bitField & (~1048576)) |
                        524288);
  };

  Promise.prototype._ensurePossibleRejectionHandled = function () {
      if ((this._bitField & 524288) !== 0) return;
      this._setRejectionIsUnhandled();
      async.invokeLater(this._notifyUnhandledRejection, this, undefined);
  };

  Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
      fireRejectionEvent("rejectionHandled",
                                    unhandledRejectionHandled, undefined, this);
  };

  Promise.prototype._setReturnedNonUndefined = function() {
      this._bitField = this._bitField | 268435456;
  };

  Promise.prototype._returnedNonUndefined = function() {
      return (this._bitField & 268435456) !== 0;
  };

  Promise.prototype._notifyUnhandledRejection = function () {
      if (this._isRejectionUnhandled()) {
          var reason = this._settledValue();
          this._setUnhandledRejectionIsNotified();
          fireRejectionEvent("unhandledRejection",
                                        possiblyUnhandledRejection, reason, this);
      }
  };

  Promise.prototype._setUnhandledRejectionIsNotified = function () {
      this._bitField = this._bitField | 262144;
  };

  Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
      this._bitField = this._bitField & (~262144);
  };

  Promise.prototype._isUnhandledRejectionNotified = function () {
      return (this._bitField & 262144) > 0;
  };

  Promise.prototype._setRejectionIsUnhandled = function () {
      this._bitField = this._bitField | 1048576;
  };

  Promise.prototype._unsetRejectionIsUnhandled = function () {
      this._bitField = this._bitField & (~1048576);
      if (this._isUnhandledRejectionNotified()) {
          this._unsetUnhandledRejectionIsNotified();
          this._notifyUnhandledRejectionIsHandled();
      }
  };

  Promise.prototype._isRejectionUnhandled = function () {
      return (this._bitField & 1048576) > 0;
  };

  Promise.prototype._warn = function(message, shouldUseOwnTrace, promise) {
      return warn(message, shouldUseOwnTrace, promise || this);
  };

  Promise.onPossiblyUnhandledRejection = function (fn) {
      var domain = getDomain();
      possiblyUnhandledRejection =
          typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
                                   : undefined;
  };

  Promise.onUnhandledRejectionHandled = function (fn) {
      var domain = getDomain();
      unhandledRejectionHandled =
          typeof fn === "function" ? (domain === null ? fn : domain.bind(fn))
                                   : undefined;
  };

  var disableLongStackTraces = function() {};
  Promise.longStackTraces = function () {
      if (async.haveItemsQueued() && !config.longStackTraces) {
          throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      if (!config.longStackTraces && longStackTracesIsSupported()) {
          var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
          var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
          config.longStackTraces = true;
          disableLongStackTraces = function() {
              if (async.haveItemsQueued() && !config.longStackTraces) {
                  throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
              }
              Promise.prototype._captureStackTrace = Promise_captureStackTrace;
              Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
              Context.deactivateLongStackTraces();
              async.enableTrampoline();
              config.longStackTraces = false;
          };
          Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
          Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
          Context.activateLongStackTraces();
          async.disableTrampolineIfNecessary();
      }
  };

  Promise.hasLongStackTraces = function () {
      return config.longStackTraces && longStackTracesIsSupported();
  };

  var fireDomEvent = (function() {
      try {
          var event = document.createEvent("CustomEvent");
          event.initCustomEvent("testingtheevent", false, true, {});
          util.global.dispatchEvent(event);
          return function(name, event) {
              var domEvent = document.createEvent("CustomEvent");
              domEvent.initCustomEvent(name.toLowerCase(), false, true, event);
              return !util.global.dispatchEvent(domEvent);
          };
      } catch (e) {}
      return function() {
          return false;
      };
  })();

  var fireGlobalEvent = (function() {
      if (util.isNode) {
          return function() {
              return process.emit.apply(process, arguments);
          };
      } else {
          if (!util.global) {
              return function() {
                  return false;
              };
          }
          return function(name) {
              var methodName = "on" + name.toLowerCase();
              var method = util.global[methodName];
              if (!method) return false;
              method.apply(util.global, [].slice.call(arguments, 1));
              return true;
          };
      }
  })();

  function generatePromiseLifecycleEventObject(name, promise) {
      return {promise: promise};
  }

  var eventToObjectGenerator = {
      promiseCreated: generatePromiseLifecycleEventObject,
      promiseFulfilled: generatePromiseLifecycleEventObject,
      promiseRejected: generatePromiseLifecycleEventObject,
      promiseResolved: generatePromiseLifecycleEventObject,
      promiseCancelled: generatePromiseLifecycleEventObject,
      promiseChained: function(name, promise, child) {
          return {promise: promise, child: child};
      },
      warning: function(name, warning) {
          return {warning: warning};
      },
      unhandledRejection: function (name, reason, promise) {
          return {reason: reason, promise: promise};
      },
      rejectionHandled: generatePromiseLifecycleEventObject
  };

  var activeFireEvent = function (name) {
      var globalEventFired = false;
      try {
          globalEventFired = fireGlobalEvent.apply(null, arguments);
      } catch (e) {
          async.throwLater(e);
          globalEventFired = true;
      }

      var domEventFired = false;
      try {
          domEventFired = fireDomEvent(name,
                      eventToObjectGenerator[name].apply(null, arguments));
      } catch (e) {
          async.throwLater(e);
          domEventFired = true;
      }

      return domEventFired || globalEventFired;
  };

  Promise.config = function(opts) {
      opts = Object(opts);
      if ("longStackTraces" in opts) {
          if (opts.longStackTraces) {
              Promise.longStackTraces();
          } else if (!opts.longStackTraces && Promise.hasLongStackTraces()) {
              disableLongStackTraces();
          }
      }
      if ("warnings" in opts) {
          var warningsOption = opts.warnings;
          config.warnings = !!warningsOption;
          wForgottenReturn = config.warnings;

          if (util.isObject(warningsOption)) {
              if ("wForgottenReturn" in warningsOption) {
                  wForgottenReturn = !!warningsOption.wForgottenReturn;
              }
          }
      }
      if ("cancellation" in opts && opts.cancellation && !config.cancellation) {
          if (async.haveItemsQueued()) {
              throw new Error(
                  "cannot enable cancellation after promises are in use");
          }
          Promise.prototype._clearCancellationData =
              cancellationClearCancellationData;
          Promise.prototype._propagateFrom = cancellationPropagateFrom;
          Promise.prototype._onCancel = cancellationOnCancel;
          Promise.prototype._setOnCancel = cancellationSetOnCancel;
          Promise.prototype._attachCancellationCallback =
              cancellationAttachCancellationCallback;
          Promise.prototype._execute = cancellationExecute;
          propagateFromFunction = cancellationPropagateFrom;
          config.cancellation = true;
      }
      if ("monitoring" in opts) {
          if (opts.monitoring && !config.monitoring) {
              config.monitoring = true;
              Promise.prototype._fireEvent = activeFireEvent;
          } else if (!opts.monitoring && config.monitoring) {
              config.monitoring = false;
              Promise.prototype._fireEvent = defaultFireEvent;
          }
      }
  };

  function defaultFireEvent() { return false; }

  Promise.prototype._fireEvent = defaultFireEvent;
  Promise.prototype._execute = function(executor, resolve, reject) {
      try {
          executor(resolve, reject);
      } catch (e) {
          return e;
      }
  };
  Promise.prototype._onCancel = function () {};
  Promise.prototype._setOnCancel = function (handler) { ; };
  Promise.prototype._attachCancellationCallback = function(onCancel) {
      ;
  };
  Promise.prototype._captureStackTrace = function () {};
  Promise.prototype._attachExtraTrace = function () {};
  Promise.prototype._clearCancellationData = function() {};
  Promise.prototype._propagateFrom = function (parent, flags) {
      ;
      ;
  };

  function cancellationExecute(executor, resolve, reject) {
      var promise = this;
      try {
          executor(resolve, reject, function(onCancel) {
              if (typeof onCancel !== "function") {
                  throw new TypeError("onCancel must be a function, got: " +
                                      util.toString(onCancel));
              }
              promise._attachCancellationCallback(onCancel);
          });
      } catch (e) {
          return e;
      }
  }

  function cancellationAttachCancellationCallback(onCancel) {
      if (!this.isCancellable()) return this;

      var previousOnCancel = this._onCancel();
      if (previousOnCancel !== undefined) {
          if (util.isArray(previousOnCancel)) {
              previousOnCancel.push(onCancel);
          } else {
              this._setOnCancel([previousOnCancel, onCancel]);
          }
      } else {
          this._setOnCancel(onCancel);
      }
  }

  function cancellationOnCancel() {
      return this._onCancelField;
  }

  function cancellationSetOnCancel(onCancel) {
      this._onCancelField = onCancel;
  }

  function cancellationClearCancellationData() {
      this._cancellationParent = undefined;
      this._onCancelField = undefined;
  }

  function cancellationPropagateFrom(parent, flags) {
      if ((flags & 1) !== 0) {
          this._cancellationParent = parent;
          var branchesRemainingToCancel = parent._branchesRemainingToCancel;
          if (branchesRemainingToCancel === undefined) {
              branchesRemainingToCancel = 0;
          }
          parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
      }
      if ((flags & 2) !== 0 && parent._isBound()) {
          this._setBoundTo(parent._boundTo);
      }
  }

  function bindingPropagateFrom(parent, flags) {
      if ((flags & 2) !== 0 && parent._isBound()) {
          this._setBoundTo(parent._boundTo);
      }
  }
  var propagateFromFunction = bindingPropagateFrom;

  function boundValueFunction() {
      var ret = this._boundTo;
      if (ret !== undefined) {
          if (ret instanceof Promise) {
              if (ret.isFulfilled()) {
                  return ret.value();
              } else {
                  return undefined;
              }
          }
      }
      return ret;
  }

  function longStackTracesCaptureStackTrace() {
      this._trace = new CapturedTrace(this._peekContext());
  }

  function longStackTracesAttachExtraTrace(error, ignoreSelf) {
      if (canAttachTrace(error)) {
          var trace = this._trace;
          if (trace !== undefined) {
              if (ignoreSelf) trace = trace._parent;
          }
          if (trace !== undefined) {
              trace.attachExtraTrace(error);
          } else if (!error.__stackCleaned__) {
              var parsed = parseStackAndMessage(error);
              util.notEnumerableProp(error, "stack",
                  parsed.message + "\n" + parsed.stack.join("\n"));
              util.notEnumerableProp(error, "__stackCleaned__", true);
          }
      }
  }

  function checkForgottenReturns(returnValue, promiseCreated, name, promise,
                                 parent) {
      if (returnValue === undefined && promiseCreated !== null &&
          wForgottenReturn) {
          if (parent !== undefined && parent._returnedNonUndefined()) return;
          if ((promise._bitField & 65535) === 0) return;

          if (name) name = name + " ";
          var msg = "a promise was created in a " + name +
              "handler but was not returned from it";
          promise._warn(msg, true, promiseCreated);
      }
  }

  function deprecated(name, replacement) {
      var message = name +
          " is deprecated and will be removed in a future version.";
      if (replacement) message += " Use " + replacement + " instead.";
      return warn(message);
  }

  function warn(message, shouldUseOwnTrace, promise) {
      if (!config.warnings) return;
      var warning = new Warning(message);
      var ctx;
      if (shouldUseOwnTrace) {
          promise._attachExtraTrace(warning);
      } else if (config.longStackTraces && (ctx = Promise._peekContext())) {
          ctx.attachExtraTrace(warning);
      } else {
          var parsed = parseStackAndMessage(warning);
          warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
      }

      if (!activeFireEvent("warning", warning)) {
          formatAndLogError(warning, "", true);
      }
  }

  function reconstructStack(message, stacks) {
      for (var i = 0; i < stacks.length - 1; ++i) {
          stacks[i].push("From previous event:");
          stacks[i] = stacks[i].join("\n");
      }
      if (i < stacks.length) {
          stacks[i] = stacks[i].join("\n");
      }
      return message + "\n" + stacks.join("\n");
  }

  function removeDuplicateOrEmptyJumps(stacks) {
      for (var i = 0; i < stacks.length; ++i) {
          if (stacks[i].length === 0 ||
              ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) {
              stacks.splice(i, 1);
              i--;
          }
      }
  }

  function removeCommonRoots(stacks) {
      var current = stacks[0];
      for (var i = 1; i < stacks.length; ++i) {
          var prev = stacks[i];
          var currentLastIndex = current.length - 1;
          var currentLastLine = current[currentLastIndex];
          var commonRootMeetPoint = -1;

          for (var j = prev.length - 1; j >= 0; --j) {
              if (prev[j] === currentLastLine) {
                  commonRootMeetPoint = j;
                  break;
              }
          }

          for (var j = commonRootMeetPoint; j >= 0; --j) {
              var line = prev[j];
              if (current[currentLastIndex] === line) {
                  current.pop();
                  currentLastIndex--;
              } else {
                  break;
              }
          }
          current = prev;
      }
  }

  function cleanStack(stack) {
      var ret = [];
      for (var i = 0; i < stack.length; ++i) {
          var line = stack[i];
          var isTraceLine = "    (No stack trace)" === line ||
              stackFramePattern.test(line);
          var isInternalFrame = isTraceLine && shouldIgnore(line);
          if (isTraceLine && !isInternalFrame) {
              if (indentStackFrames && line.charAt(0) !== " ") {
                  line = "    " + line;
              }
              ret.push(line);
          }
      }
      return ret;
  }

  function stackFramesAsArray(error) {
      var stack = error.stack.replace(/\s+$/g, "").split("\n");
      for (var i = 0; i < stack.length; ++i) {
          var line = stack[i];
          if ("    (No stack trace)" === line || stackFramePattern.test(line)) {
              break;
          }
      }
      if (i > 0) {
          stack = stack.slice(i);
      }
      return stack;
  }

  function parseStackAndMessage(error) {
      var stack = error.stack;
      var message = error.toString();
      stack = typeof stack === "string" && stack.length > 0
                  ? stackFramesAsArray(error) : ["    (No stack trace)"];
      return {
          message: message,
          stack: cleanStack(stack)
      };
  }

  function formatAndLogError(error, title, isSoft) {
      if (typeof console !== "undefined") {
          var message;
          if (util.isObject(error)) {
              var stack = error.stack;
              message = title + formatStack(stack, error);
          } else {
              message = title + String(error);
          }
          if (typeof printWarning === "function") {
              printWarning(message, isSoft);
          } else if (typeof console.log === "function" ||
              typeof console.log === "object") {
              console.log(message);
          }
      }
  }

  function fireRejectionEvent(name, localHandler, reason, promise) {
      var localEventFired = false;
      try {
          if (typeof localHandler === "function") {
              localEventFired = true;
              if (name === "rejectionHandled") {
                  localHandler(promise);
              } else {
                  localHandler(reason, promise);
              }
          }
      } catch (e) {
          async.throwLater(e);
      }

      if (name === "unhandledRejection") {
          if (!activeFireEvent(name, reason, promise) && !localEventFired) {
              formatAndLogError(reason, "Unhandled rejection ");
          }
      } else {
          activeFireEvent(name, promise);
      }
  }

  function formatNonError(obj) {
      var str;
      if (typeof obj === "function") {
          str = "[function " +
              (obj.name || "anonymous") +
              "]";
      } else {
          str = obj && typeof obj.toString === "function"
              ? obj.toString() : util.toString(obj);
          var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
          if (ruselessToString.test(str)) {
              try {
                  var newStr = JSON.stringify(obj);
                  str = newStr;
              }
              catch(e) {

              }
          }
          if (str.length === 0) {
              str = "(empty array)";
          }
      }
      return ("(<" + snip(str) + ">, no stack trace)");
  }

  function snip(str) {
      var maxChars = 41;
      if (str.length < maxChars) {
          return str;
      }
      return str.substr(0, maxChars - 3) + "...";
  }

  function longStackTracesIsSupported() {
      return typeof captureStackTrace === "function";
  }

  var shouldIgnore = function() { return false; };
  var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
  function parseLineInfo(line) {
      var matches = line.match(parseLineInfoRegex);
      if (matches) {
          return {
              fileName: matches[1],
              line: parseInt(matches[2], 10)
          };
      }
  }

  function setBounds(firstLineError, lastLineError) {
      if (!longStackTracesIsSupported()) return;
      var firstStackLines = firstLineError.stack.split("\n");
      var lastStackLines = lastLineError.stack.split("\n");
      var firstIndex = -1;
      var lastIndex = -1;
      var firstFileName;
      var lastFileName;
      for (var i = 0; i < firstStackLines.length; ++i) {
          var result = parseLineInfo(firstStackLines[i]);
          if (result) {
              firstFileName = result.fileName;
              firstIndex = result.line;
              break;
          }
      }
      for (var i = 0; i < lastStackLines.length; ++i) {
          var result = parseLineInfo(lastStackLines[i]);
          if (result) {
              lastFileName = result.fileName;
              lastIndex = result.line;
              break;
          }
      }
      if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
          firstFileName !== lastFileName || firstIndex >= lastIndex) {
          return;
      }

      shouldIgnore = function(line) {
          if (bluebirdFramePattern.test(line)) return true;
          var info = parseLineInfo(line);
          if (info) {
              if (info.fileName === firstFileName &&
                  (firstIndex <= info.line && info.line <= lastIndex)) {
                  return true;
              }
          }
          return false;
      };
  }

  function CapturedTrace(parent) {
      this._parent = parent;
      this._promisesCreated = 0;
      var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
      captureStackTrace(this, CapturedTrace);
      if (length > 32) this.uncycle();
  }
  util.inherits(CapturedTrace, Error);
  Context.CapturedTrace = CapturedTrace;

  CapturedTrace.prototype.uncycle = function() {
      var length = this._length;
      if (length < 2) return;
      var nodes = [];
      var stackToIndex = {};

      for (var i = 0, node = this; node !== undefined; ++i) {
          nodes.push(node);
          node = node._parent;
      }
      length = this._length = i;
      for (var i = length - 1; i >= 0; --i) {
          var stack = nodes[i].stack;
          if (stackToIndex[stack] === undefined) {
              stackToIndex[stack] = i;
          }
      }
      for (var i = 0; i < length; ++i) {
          var currentStack = nodes[i].stack;
          var index = stackToIndex[currentStack];
          if (index !== undefined && index !== i) {
              if (index > 0) {
                  nodes[index - 1]._parent = undefined;
                  nodes[index - 1]._length = 1;
              }
              nodes[i]._parent = undefined;
              nodes[i]._length = 1;
              var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

              if (index < length - 1) {
                  cycleEdgeNode._parent = nodes[index + 1];
                  cycleEdgeNode._parent.uncycle();
                  cycleEdgeNode._length =
                      cycleEdgeNode._parent._length + 1;
              } else {
                  cycleEdgeNode._parent = undefined;
                  cycleEdgeNode._length = 1;
              }
              var currentChildLength = cycleEdgeNode._length + 1;
              for (var j = i - 2; j >= 0; --j) {
                  nodes[j]._length = currentChildLength;
                  currentChildLength++;
              }
              return;
          }
      }
  };

  CapturedTrace.prototype.attachExtraTrace = function(error) {
      if (error.__stackCleaned__) return;
      this.uncycle();
      var parsed = parseStackAndMessage(error);
      var message = parsed.message;
      var stacks = [parsed.stack];

      var trace = this;
      while (trace !== undefined) {
          stacks.push(cleanStack(trace.stack.split("\n")));
          trace = trace._parent;
      }
      removeCommonRoots(stacks);
      removeDuplicateOrEmptyJumps(stacks);
      util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
      util.notEnumerableProp(error, "__stackCleaned__", true);
  };

  var captureStackTrace = (function stackDetection() {
      var v8stackFramePattern = /^\s*at\s*/;
      var v8stackFormatter = function(stack, error) {
          if (typeof stack === "string") return stack;

          if (error.name !== undefined &&
              error.message !== undefined) {
              return error.toString();
          }
          return formatNonError(error);
      };

      if (typeof Error.stackTraceLimit === "number" &&
          typeof Error.captureStackTrace === "function") {
          Error.stackTraceLimit += 6;
          stackFramePattern = v8stackFramePattern;
          formatStack = v8stackFormatter;
          var captureStackTrace = Error.captureStackTrace;

          shouldIgnore = function(line) {
              return bluebirdFramePattern.test(line);
          };
          return function(receiver, ignoreUntil) {
              Error.stackTraceLimit += 6;
              captureStackTrace(receiver, ignoreUntil);
              Error.stackTraceLimit -= 6;
          };
      }
      var err = new Error();

      if (typeof err.stack === "string" &&
          err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) {
          stackFramePattern = /@/;
          formatStack = v8stackFormatter;
          indentStackFrames = true;
          return function captureStackTrace(o) {
              o.stack = new Error().stack;
          };
      }

      var hasStackAfterThrow;
      try { throw new Error(); }
      catch(e) {
          hasStackAfterThrow = ("stack" in e);
      }
      if (!("stack" in err) && hasStackAfterThrow &&
          typeof Error.stackTraceLimit === "number") {
          stackFramePattern = v8stackFramePattern;
          formatStack = v8stackFormatter;
          return function captureStackTrace(o) {
              Error.stackTraceLimit += 6;
              try { throw new Error(); }
              catch(e) { o.stack = e.stack; }
              Error.stackTraceLimit -= 6;
          };
      }

      formatStack = function(stack, error) {
          if (typeof stack === "string") return stack;

          if ((typeof error === "object" ||
              typeof error === "function") &&
              error.name !== undefined &&
              error.message !== undefined) {
              return error.toString();
          }
          return formatNonError(error);
      };

      return null;

  })([]);

  if (typeof console !== "undefined" && typeof console.warn !== "undefined") {
      printWarning = function (message) {
          console.warn(message);
      };
      if (util.isNode && process.stderr.isTTY) {
          printWarning = function(message, isSoft) {
              var color = isSoft ? "\u001b[33m" : "\u001b[31m";
              console.warn(color + message + "\u001b[0m\n");
          };
      } else if (!util.isNode && typeof (new Error().stack) === "string") {
          printWarning = function(message, isSoft) {
              console.warn("%c" + message,
                          isSoft ? "color: darkorange" : "color: red");
          };
      }
  }

  var config = {
      warnings: warnings,
      longStackTraces: false,
      cancellation: false,
      monitoring: false
  };

  if (longStackTraces) Promise.longStackTraces();

  return {
      longStackTraces: function() {
          return config.longStackTraces;
      },
      warnings: function() {
          return config.warnings;
      },
      cancellation: function() {
          return config.cancellation;
      },
      monitoring: function() {
          return config.monitoring;
      },
      propagateFromFunction: function() {
          return propagateFromFunction;
      },
      boundValueFunction: function() {
          return boundValueFunction;
      },
      checkForgottenReturns: checkForgottenReturns,
      setBounds: setBounds,
      warn: warn,
      deprecated: deprecated,
      CapturedTrace: CapturedTrace,
      fireDomEvent: fireDomEvent,
      fireGlobalEvent: fireGlobalEvent
  };
  };

  },{"./errors":12,"./util":36}],10:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise) {
  function returner() {
      return this.value;
  }
  function thrower() {
      throw this.reason;
  }

  Promise.prototype["return"] =
  Promise.prototype.thenReturn = function (value) {
      if (value instanceof Promise) value.suppressUnhandledRejections();
      return this._then(
          returner, undefined, undefined, {value: value}, undefined);
  };

  Promise.prototype["throw"] =
  Promise.prototype.thenThrow = function (reason) {
      return this._then(
          thrower, undefined, undefined, {reason: reason}, undefined);
  };

  Promise.prototype.catchThrow = function (reason) {
      if (arguments.length <= 1) {
          return this._then(
              undefined, thrower, undefined, {reason: reason}, undefined);
      } else {
          var _reason = arguments[1];
          var handler = function() {throw _reason;};
          return this.caught(reason, handler);
      }
  };

  Promise.prototype.catchReturn = function (value) {
      if (arguments.length <= 1) {
          if (value instanceof Promise) value.suppressUnhandledRejections();
          return this._then(
              undefined, returner, undefined, {value: value}, undefined);
      } else {
          var _value = arguments[1];
          if (_value instanceof Promise) _value.suppressUnhandledRejections();
          var handler = function() {return _value;};
          return this.caught(value, handler);
      }
  };
  };

  },{}],11:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL) {
  var PromiseReduce = Promise.reduce;
  var PromiseAll = Promise.all;

  function promiseAllThis() {
      return PromiseAll(this);
  }

  function PromiseMapSeries(promises, fn) {
      return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
  }

  Promise.prototype.each = function (fn) {
      return this.mapSeries(fn)
              ._then(promiseAllThis, undefined, undefined, this, undefined);
  };

  Promise.prototype.mapSeries = function (fn) {
      return PromiseReduce(this, fn, INTERNAL, INTERNAL);
  };

  Promise.each = function (promises, fn) {
      return PromiseMapSeries(promises, fn)
              ._then(promiseAllThis, undefined, undefined, promises, undefined);
  };

  Promise.mapSeries = PromiseMapSeries;
  };

  },{}],12:[function(_dereq_,module,exports){
  "use strict";
  var es5 = _dereq_("./es5");
  var Objectfreeze = es5.freeze;
  var util = _dereq_("./util");
  var inherits = util.inherits;
  var notEnumerableProp = util.notEnumerableProp;

  function subError(nameProperty, defaultMessage) {
      function SubError(message) {
          if (!(this instanceof SubError)) return new SubError(message);
          notEnumerableProp(this, "message",
              typeof message === "string" ? message : defaultMessage);
          notEnumerableProp(this, "name", nameProperty);
          if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
          } else {
              Error.call(this);
          }
      }
      inherits(SubError, Error);
      return SubError;
  }

  var _TypeError, _RangeError;
  var Warning = subError("Warning", "warning");
  var CancellationError = subError("CancellationError", "cancellation error");
  var TimeoutError = subError("TimeoutError", "timeout error");
  var AggregateError = subError("AggregateError", "aggregate error");
  try {
      _TypeError = TypeError;
      _RangeError = RangeError;
  } catch(e) {
      _TypeError = subError("TypeError", "type error");
      _RangeError = subError("RangeError", "range error");
  }

  var methods = ("join pop push shift unshift slice filter forEach some " +
      "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

  for (var i = 0; i < methods.length; ++i) {
      if (typeof Array.prototype[methods[i]] === "function") {
          AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
      }
  }

  es5.defineProperty(AggregateError.prototype, "length", {
      value: 0,
      configurable: false,
      writable: true,
      enumerable: true
  });
  AggregateError.prototype["isOperational"] = true;
  var level = 0;
  AggregateError.prototype.toString = function() {
      var indent = Array(level * 4 + 1).join(" ");
      var ret = "\n" + indent + "AggregateError of:" + "\n";
      level++;
      indent = Array(level * 4 + 1).join(" ");
      for (var i = 0; i < this.length; ++i) {
          var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
          var lines = str.split("\n");
          for (var j = 0; j < lines.length; ++j) {
              lines[j] = indent + lines[j];
          }
          str = lines.join("\n");
          ret += str + "\n";
      }
      level--;
      return ret;
  };

  function OperationalError(message) {
      if (!(this instanceof OperationalError))
          return new OperationalError(message);
      notEnumerableProp(this, "name", "OperationalError");
      notEnumerableProp(this, "message", message);
      this.cause = message;
      this["isOperational"] = true;

      if (message instanceof Error) {
          notEnumerableProp(this, "message", message.message);
          notEnumerableProp(this, "stack", message.stack);
      } else if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
      }

  }
  inherits(OperationalError, Error);

  var errorTypes = Error["__BluebirdErrorTypes__"];
  if (!errorTypes) {
      errorTypes = Objectfreeze({
          CancellationError: CancellationError,
          TimeoutError: TimeoutError,
          OperationalError: OperationalError,
          RejectionError: OperationalError,
          AggregateError: AggregateError
      });
      es5.defineProperty(Error, "__BluebirdErrorTypes__", {
          value: errorTypes,
          writable: false,
          enumerable: false,
          configurable: false
      });
  }

  module.exports = {
      Error: Error,
      TypeError: _TypeError,
      RangeError: _RangeError,
      CancellationError: errorTypes.CancellationError,
      OperationalError: errorTypes.OperationalError,
      TimeoutError: errorTypes.TimeoutError,
      AggregateError: errorTypes.AggregateError,
      Warning: Warning
  };

  },{"./es5":13,"./util":36}],13:[function(_dereq_,module,exports){
  var isES5 = (function(){
      "use strict";
      return this === undefined;
  })();

  if (isES5) {
      module.exports = {
          freeze: Object.freeze,
          defineProperty: Object.defineProperty,
          getDescriptor: Object.getOwnPropertyDescriptor,
          keys: Object.keys,
          names: Object.getOwnPropertyNames,
          getPrototypeOf: Object.getPrototypeOf,
          isArray: Array.isArray,
          isES5: isES5,
          propertyIsWritable: function(obj, prop) {
              var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
              return !!(!descriptor || descriptor.writable || descriptor.set);
          }
      };
  } else {
      var has = {}.hasOwnProperty;
      var str = {}.toString;
      var proto = {}.constructor.prototype;

      var ObjectKeys = function (o) {
          var ret = [];
          for (var key in o) {
              if (has.call(o, key)) {
                  ret.push(key);
              }
          }
          return ret;
      };

      var ObjectGetDescriptor = function(o, key) {
          return {value: o[key]};
      };

      var ObjectDefineProperty = function (o, key, desc) {
          o[key] = desc.value;
          return o;
      };

      var ObjectFreeze = function (obj) {
          return obj;
      };

      var ObjectGetPrototypeOf = function (obj) {
          try {
              return Object(obj).constructor.prototype;
          }
          catch (e) {
              return proto;
          }
      };

      var ArrayIsArray = function (obj) {
          try {
              return str.call(obj) === "[object Array]";
          }
          catch(e) {
              return false;
          }
      };

      module.exports = {
          isArray: ArrayIsArray,
          keys: ObjectKeys,
          names: ObjectKeys,
          defineProperty: ObjectDefineProperty,
          getDescriptor: ObjectGetDescriptor,
          freeze: ObjectFreeze,
          getPrototypeOf: ObjectGetPrototypeOf,
          isES5: isES5,
          propertyIsWritable: function() {
              return true;
          }
      };
  }

  },{}],14:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL) {
  var PromiseMap = Promise.map;

  Promise.prototype.filter = function (fn, options) {
      return PromiseMap(this, fn, options, INTERNAL);
  };

  Promise.filter = function (promises, fn, options) {
      return PromiseMap(promises, fn, options, INTERNAL);
  };
  };

  },{}],15:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, tryConvertToPromise) {
  var util = _dereq_("./util");
  var CancellationError = Promise.CancellationError;
  var errorObj = util.errorObj;

  function PassThroughHandlerContext(promise, type, handler) {
      this.promise = promise;
      this.type = type;
      this.handler = handler;
      this.called = false;
      this.cancelPromise = null;
  }

  PassThroughHandlerContext.prototype.isFinallyHandler = function() {
      return this.type === 0;
  };

  function FinallyHandlerCancelReaction(finallyHandler) {
      this.finallyHandler = finallyHandler;
  }

  FinallyHandlerCancelReaction.prototype._resultCancelled = function() {
      checkCancel(this.finallyHandler);
  };

  function checkCancel(ctx, reason) {
      if (ctx.cancelPromise != null) {
          if (arguments.length > 1) {
              ctx.cancelPromise._reject(reason);
          } else {
              ctx.cancelPromise._cancel();
          }
          ctx.cancelPromise = null;
          return true;
      }
      return false;
  }

  function succeed() {
      return finallyHandler.call(this, this.promise._target()._settledValue());
  }
  function fail(reason) {
      if (checkCancel(this, reason)) return;
      errorObj.e = reason;
      return errorObj;
  }
  function finallyHandler(reasonOrValue) {
      var promise = this.promise;
      var handler = this.handler;

      if (!this.called) {
          this.called = true;
          var ret = this.isFinallyHandler()
              ? handler.call(promise._boundValue())
              : handler.call(promise._boundValue(), reasonOrValue);
          if (ret !== undefined) {
              promise._setReturnedNonUndefined();
              var maybePromise = tryConvertToPromise(ret, promise);
              if (maybePromise instanceof Promise) {
                  if (this.cancelPromise != null) {
                      if (maybePromise.isCancelled()) {
                          var reason =
                              new CancellationError("late cancellation observer");
                          promise._attachExtraTrace(reason);
                          errorObj.e = reason;
                          return errorObj;
                      } else if (maybePromise.isPending()) {
                          maybePromise._attachCancellationCallback(
                              new FinallyHandlerCancelReaction(this));
                      }
                  }
                  return maybePromise._then(
                      succeed, fail, undefined, this, undefined);
              }
          }
      }

      if (promise.isRejected()) {
          checkCancel(this);
          errorObj.e = reasonOrValue;
          return errorObj;
      } else {
          checkCancel(this);
          return reasonOrValue;
      }
  }

  Promise.prototype._passThrough = function(handler, type, success, fail) {
      if (typeof handler !== "function") return this.then();
      return this._then(success,
                        fail,
                        undefined,
                        new PassThroughHandlerContext(this, type, handler),
                        undefined);
  };

  Promise.prototype.lastly =
  Promise.prototype["finally"] = function (handler) {
      return this._passThrough(handler,
                               0,
                               finallyHandler,
                               finallyHandler);
  };

  Promise.prototype.tap = function (handler) {
      return this._passThrough(handler, 1, finallyHandler);
  };

  return PassThroughHandlerContext;
  };

  },{"./util":36}],16:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise,
                            apiRejection,
                            INTERNAL,
                            tryConvertToPromise,
                            Proxyable,
                            debug) {
  var errors = _dereq_("./errors");
  var TypeError = errors.TypeError;
  var util = _dereq_("./util");
  var errorObj = util.errorObj;
  var tryCatch = util.tryCatch;
  var yieldHandlers = [];

  function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
      for (var i = 0; i < yieldHandlers.length; ++i) {
          traceParent._pushContext();
          var result = tryCatch(yieldHandlers[i])(value);
          traceParent._popContext();
          if (result === errorObj) {
              traceParent._pushContext();
              var ret = Promise.reject(errorObj.e);
              traceParent._popContext();
              return ret;
          }
          var maybePromise = tryConvertToPromise(result, traceParent);
          if (maybePromise instanceof Promise) return maybePromise;
      }
      return null;
  }

  function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
      if (debug.cancellation()) {
          var internal = new Promise(INTERNAL);
          var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
          this._promise = internal.lastly(function() {
              return _finallyPromise;
          });
          internal._captureStackTrace();
          internal._setOnCancel(this);
      } else {
          var promise = this._promise = new Promise(INTERNAL);
          promise._captureStackTrace();
      }
      this._stack = stack;
      this._generatorFunction = generatorFunction;
      this._receiver = receiver;
      this._generator = undefined;
      this._yieldHandlers = typeof yieldHandler === "function"
          ? [yieldHandler].concat(yieldHandlers)
          : yieldHandlers;
      this._yieldedPromise = null;
      this._cancellationPhase = false;
  }
  util.inherits(PromiseSpawn, Proxyable);

  PromiseSpawn.prototype._isResolved = function() {
      return this._promise === null;
  };

  PromiseSpawn.prototype._cleanup = function() {
      this._promise = this._generator = null;
      if (debug.cancellation() && this._finallyPromise !== null) {
          this._finallyPromise._fulfill();
          this._finallyPromise = null;
      }
  };

  PromiseSpawn.prototype._promiseCancelled = function() {
      if (this._isResolved()) return;
      var implementsReturn = typeof this._generator["return"] !== "undefined";

      var result;
      if (!implementsReturn) {
          var reason = new Promise.CancellationError(
              "generator .return() sentinel");
          Promise.coroutine.returnSentinel = reason;
          this._promise._attachExtraTrace(reason);
          this._promise._pushContext();
          result = tryCatch(this._generator["throw"]).call(this._generator,
                                                           reason);
          this._promise._popContext();
      } else {
          this._promise._pushContext();
          result = tryCatch(this._generator["return"]).call(this._generator,
                                                            undefined);
          this._promise._popContext();
      }
      this._cancellationPhase = true;
      this._yieldedPromise = null;
      this._continue(result);
  };

  PromiseSpawn.prototype._promiseFulfilled = function(value) {
      this._yieldedPromise = null;
      this._promise._pushContext();
      var result = tryCatch(this._generator.next).call(this._generator, value);
      this._promise._popContext();
      this._continue(result);
  };

  PromiseSpawn.prototype._promiseRejected = function(reason) {
      this._yieldedPromise = null;
      this._promise._attachExtraTrace(reason);
      this._promise._pushContext();
      var result = tryCatch(this._generator["throw"])
          .call(this._generator, reason);
      this._promise._popContext();
      this._continue(result);
  };

  PromiseSpawn.prototype._resultCancelled = function() {
      if (this._yieldedPromise instanceof Promise) {
          var promise = this._yieldedPromise;
          this._yieldedPromise = null;
          promise.cancel();
      }
  };

  PromiseSpawn.prototype.promise = function () {
      return this._promise;
  };

  PromiseSpawn.prototype._run = function () {
      this._generator = this._generatorFunction.call(this._receiver);
      this._receiver =
          this._generatorFunction = undefined;
      this._promiseFulfilled(undefined);
  };

  PromiseSpawn.prototype._continue = function (result) {
      var promise = this._promise;
      if (result === errorObj) {
          this._cleanup();
          if (this._cancellationPhase) {
              return promise.cancel();
          } else {
              return promise._rejectCallback(result.e, false);
          }
      }

      var value = result.value;
      if (result.done === true) {
          this._cleanup();
          if (this._cancellationPhase) {
              return promise.cancel();
          } else {
              return promise._resolveCallback(value);
          }
      } else {
          var maybePromise = tryConvertToPromise(value, this._promise);
          if (!(maybePromise instanceof Promise)) {
              maybePromise =
                  promiseFromYieldHandler(maybePromise,
                                          this._yieldHandlers,
                                          this._promise);
              if (maybePromise === null) {
                  this._promiseRejected(
                      new TypeError(
                          "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", value) +
                          "From coroutine:\u000a" +
                          this._stack.split("\n").slice(1, -7).join("\n")
                      )
                  );
                  return;
              }
          }
          maybePromise = maybePromise._target();
          var bitField = maybePromise._bitField;
          ;
          if (((bitField & 50397184) === 0)) {
              this._yieldedPromise = maybePromise;
              maybePromise._proxy(this, null);
          } else if (((bitField & 33554432) !== 0)) {
              this._promiseFulfilled(maybePromise._value());
          } else if (((bitField & 16777216) !== 0)) {
              this._promiseRejected(maybePromise._reason());
          } else {
              this._promiseCancelled();
          }
      }
  };

  Promise.coroutine = function (generatorFunction, options) {
      if (typeof generatorFunction !== "function") {
          throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      var yieldHandler = Object(options).yieldHandler;
      var PromiseSpawn$ = PromiseSpawn;
      var stack = new Error().stack;
      return function () {
          var generator = generatorFunction.apply(this, arguments);
          var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                        stack);
          var ret = spawn.promise();
          spawn._generator = generator;
          spawn._promiseFulfilled(undefined);
          return ret;
      };
  };

  Promise.coroutine.addYieldHandler = function(fn) {
      if (typeof fn !== "function") {
          throw new TypeError("expecting a function but got " + util.classString(fn));
      }
      yieldHandlers.push(fn);
  };

  Promise.spawn = function (generatorFunction) {
      debug.deprecated("Promise.spawn()", "Promise.coroutine()");
      if (typeof generatorFunction !== "function") {
          return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      var spawn = new PromiseSpawn(generatorFunction, this);
      var ret = spawn.promise();
      spawn._run(Promise.spawn);
      return ret;
  };
  };

  },{"./errors":12,"./util":36}],17:[function(_dereq_,module,exports){
  "use strict";
  module.exports =
  function(Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
  var util = _dereq_("./util");
  var canEvaluate = util.canEvaluate;
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;
  var reject;

  if (false) {
  if (canEvaluate) {
      var thenCallback = function(i) {
          return new Function("value", "holder", "                             \n\
              'use strict';                                                    \n\
              holder.pIndex = value;                                           \n\
              holder.checkFulfillment(this);                                   \n\
              ".replace(/Index/g, i));
      };

      var promiseSetter = function(i) {
          return new Function("promise", "holder", "                           \n\
              'use strict';                                                    \n\
              holder.pIndex = promise;                                         \n\
              ".replace(/Index/g, i));
      };

      var generateHolderClass = function(total) {
          var props = new Array(total);
          for (var i = 0; i < props.length; ++i) {
              props[i] = "this.p" + (i+1);
          }
          var assignment = props.join(" = ") + " = null;";
          var cancellationCode= "var promise;\n" + props.map(function(prop) {
              return "                                                         \n\
                  promise = " + prop + ";                                      \n\
                  if (promise instanceof Promise) {                            \n\
                      promise.cancel();                                        \n\
                  }                                                            \n\
              ";
          }).join("\n");
          var passedArguments = props.join(", ");
          var name = "Holder$" + total;


          var code = "return function(tryCatch, errorObj, Promise) {           \n\
              'use strict';                                                    \n\
              function [TheName](fn) {                                         \n\
                  [TheProperties]                                              \n\
                  this.fn = fn;                                                \n\
                  this.now = 0;                                                \n\
              }                                                                \n\
              [TheName].prototype.checkFulfillment = function(promise) {       \n\
                  var now = ++this.now;                                        \n\
                  if (now === [TheTotal]) {                                    \n\
                      promise._pushContext();                                  \n\
                      var callback = this.fn;                                  \n\
                      var ret = tryCatch(callback)([ThePassedArguments]);      \n\
                      promise._popContext();                                   \n\
                      if (ret === errorObj) {                                  \n\
                          promise._rejectCallback(ret.e, false);               \n\
                      } else {                                                 \n\
                          promise._resolveCallback(ret);                       \n\
                      }                                                        \n\
                  }                                                            \n\
              };                                                               \n\
                                                                               \n\
              [TheName].prototype._resultCancelled = function() {              \n\
                  [CancellationCode]                                           \n\
              };                                                               \n\
                                                                               \n\
              return [TheName];                                                \n\
          }(tryCatch, errorObj, Promise);                                      \n\
          ";

          code = code.replace(/\[TheName\]/g, name)
              .replace(/\[TheTotal\]/g, total)
              .replace(/\[ThePassedArguments\]/g, passedArguments)
              .replace(/\[TheProperties\]/g, assignment)
              .replace(/\[CancellationCode\]/g, cancellationCode);

          return new Function("tryCatch", "errorObj", "Promise", code)
                             (tryCatch, errorObj, Promise);
      };

      var holderClasses = [];
      var thenCallbacks = [];
      var promiseSetters = [];

      for (var i = 0; i < 8; ++i) {
          holderClasses.push(generateHolderClass(i + 1));
          thenCallbacks.push(thenCallback(i + 1));
          promiseSetters.push(promiseSetter(i + 1));
      }

      reject = function (reason) {
          this._reject(reason);
      };
  }}

  Promise.join = function () {
      var last = arguments.length - 1;
      var fn;
      if (last > 0 && typeof arguments[last] === "function") {
          fn = arguments[last];
          if (false) {
              if (last <= 8 && canEvaluate) {
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  var HolderClass = holderClasses[last - 1];
                  var holder = new HolderClass(fn);
                  var callbacks = thenCallbacks;

                  for (var i = 0; i < last; ++i) {
                      var maybePromise = tryConvertToPromise(arguments[i], ret);
                      if (maybePromise instanceof Promise) {
                          maybePromise = maybePromise._target();
                          var bitField = maybePromise._bitField;
                          ;
                          if (((bitField & 50397184) === 0)) {
                              maybePromise._then(callbacks[i], reject,
                                                 undefined, ret, holder);
                              promiseSetters[i](maybePromise, holder);
                          } else if (((bitField & 33554432) !== 0)) {
                              callbacks[i].call(ret,
                                                maybePromise._value(), holder);
                          } else if (((bitField & 16777216) !== 0)) {
                              ret._reject(maybePromise._reason());
                          } else {
                              ret._cancel();
                          }
                      } else {
                          callbacks[i].call(ret, maybePromise, holder);
                      }
                  }
                  if (!ret._isFateSealed()) {
                      ret._setAsyncGuaranteed();
                      ret._setOnCancel(holder);
                  }
                  return ret;
              }
          }
      }
      var args = [].slice.call(arguments);;
      if (fn) args.pop();
      var ret = new PromiseArray(args).promise();
      return fn !== undefined ? ret.spread(fn) : ret;
  };

  };

  },{"./util":36}],18:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise,
                            PromiseArray,
                            apiRejection,
                            tryConvertToPromise,
                            INTERNAL,
                            debug) {
  var getDomain = Promise._getDomain;
  var util = _dereq_("./util");
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;
  var EMPTY_ARRAY = [];

  function MappingPromiseArray(promises, fn, limit, _filter) {
      this.constructor$(promises);
      this._promise._captureStackTrace();
      var domain = getDomain();
      this._callback = domain === null ? fn : domain.bind(fn);
      this._preservedValues = _filter === INTERNAL
          ? new Array(this.length())
          : null;
      this._limit = limit;
      this._inFlight = 0;
      this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
      this._init$(undefined, -2);
  }
  util.inherits(MappingPromiseArray, PromiseArray);

  MappingPromiseArray.prototype._init = function () {};

  MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var values = this._values;
      var length = this.length();
      var preservedValues = this._preservedValues;
      var limit = this._limit;

      if (index < 0) {
          index = (index * -1) - 1;
          values[index] = value;
          if (limit >= 1) {
              this._inFlight--;
              this._drainQueue();
              if (this._isResolved()) return true;
          }
      } else {
          if (limit >= 1 && this._inFlight >= limit) {
              values[index] = value;
              this._queue.push(index);
              return false;
          }
          if (preservedValues !== null) preservedValues[index] = value;

          var promise = this._promise;
          var callback = this._callback;
          var receiver = promise._boundValue();
          promise._pushContext();
          var ret = tryCatch(callback).call(receiver, value, index, length);
          var promiseCreated = promise._popContext();
          debug.checkForgottenReturns(
              ret,
              promiseCreated,
              preservedValues !== null ? "Promise.filter" : "Promise.map",
              promise
          );
          if (ret === errorObj) {
              this._reject(ret.e);
              return true;
          }

          var maybePromise = tryConvertToPromise(ret, this._promise);
          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              var bitField = maybePromise._bitField;
              ;
              if (((bitField & 50397184) === 0)) {
                  if (limit >= 1) this._inFlight++;
                  values[index] = maybePromise;
                  maybePromise._proxy(this, (index + 1) * -1);
                  return false;
              } else if (((bitField & 33554432) !== 0)) {
                  ret = maybePromise._value();
              } else if (((bitField & 16777216) !== 0)) {
                  this._reject(maybePromise._reason());
                  return true;
              } else {
                  this._cancel();
                  return true;
              }
          }
          values[index] = ret;
      }
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= length) {
          if (preservedValues !== null) {
              this._filter(values, preservedValues);
          } else {
              this._resolve(values);
          }
          return true;
      }
      return false;
  };

  MappingPromiseArray.prototype._drainQueue = function () {
      var queue = this._queue;
      var limit = this._limit;
      var values = this._values;
      while (queue.length > 0 && this._inFlight < limit) {
          if (this._isResolved()) return;
          var index = queue.pop();
          this._promiseFulfilled(values[index], index);
      }
  };

  MappingPromiseArray.prototype._filter = function (booleans, values) {
      var len = values.length;
      var ret = new Array(len);
      var j = 0;
      for (var i = 0; i < len; ++i) {
          if (booleans[i]) ret[j++] = values[i];
      }
      ret.length = j;
      this._resolve(ret);
  };

  MappingPromiseArray.prototype.preservedValues = function () {
      return this._preservedValues;
  };

  function map(promises, fn, options, _filter) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util.classString(fn));
      }

      var limit = 0;
      if (options !== undefined) {
          if (typeof options === "object" && options !== null) {
              if (typeof options.concurrency !== "number") {
                  return Promise.reject(
                      new TypeError("'concurrency' must be a number but it is " +
                                      util.classString(options.concurrency)));
              }
              limit = options.concurrency;
          } else {
              return Promise.reject(new TypeError(
                              "options argument must be an object but it is " +
                               util.classString(options)));
          }
      }
      limit = typeof limit === "number" &&
          isFinite(limit) && limit >= 1 ? limit : 0;
      return new MappingPromiseArray(promises, fn, limit, _filter).promise();
  }

  Promise.prototype.map = function (fn, options) {
      return map(this, fn, options, null);
  };

  Promise.map = function (promises, fn, options, _filter) {
      return map(promises, fn, options, _filter);
  };


  };

  },{"./util":36}],19:[function(_dereq_,module,exports){
  "use strict";
  module.exports =
  function(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) {
  var util = _dereq_("./util");
  var tryCatch = util.tryCatch;

  Promise.method = function (fn) {
      if (typeof fn !== "function") {
          throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
      }
      return function () {
          var ret = new Promise(INTERNAL);
          ret._captureStackTrace();
          ret._pushContext();
          var value = tryCatch(fn).apply(this, arguments);
          var promiseCreated = ret._popContext();
          debug.checkForgottenReturns(
              value, promiseCreated, "Promise.method", ret);
          ret._resolveFromSyncValue(value);
          return ret;
      };
  };

  Promise.attempt = Promise["try"] = function (fn) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util.classString(fn));
      }
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      ret._pushContext();
      var value;
      if (arguments.length > 1) {
          debug.deprecated("calling Promise.try with more than 1 argument");
          var arg = arguments[1];
          var ctx = arguments[2];
          value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg)
                                    : tryCatch(fn).call(ctx, arg);
      } else {
          value = tryCatch(fn)();
      }
      var promiseCreated = ret._popContext();
      debug.checkForgottenReturns(
          value, promiseCreated, "Promise.try", ret);
      ret._resolveFromSyncValue(value);
      return ret;
  };

  Promise.prototype._resolveFromSyncValue = function (value) {
      if (value === util.errorObj) {
          this._rejectCallback(value.e, false);
      } else {
          this._resolveCallback(value, true);
      }
  };
  };

  },{"./util":36}],20:[function(_dereq_,module,exports){
  "use strict";
  var util = _dereq_("./util");
  var maybeWrapAsError = util.maybeWrapAsError;
  var errors = _dereq_("./errors");
  var OperationalError = errors.OperationalError;
  var es5 = _dereq_("./es5");

  function isUntypedError(obj) {
      return obj instanceof Error &&
          es5.getPrototypeOf(obj) === Error.prototype;
  }

  var rErrorKey = /^(?:name|message|stack|cause)$/;
  function wrapAsOperationalError(obj) {
      var ret;
      if (isUntypedError(obj)) {
          ret = new OperationalError(obj);
          ret.name = obj.name;
          ret.message = obj.message;
          ret.stack = obj.stack;
          var keys = es5.keys(obj);
          for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              if (!rErrorKey.test(key)) {
                  ret[key] = obj[key];
              }
          }
          return ret;
      }
      util.markAsOriginatingFromRejection(obj);
      return obj;
  }

  function nodebackForPromise(promise, multiArgs) {
      return function(err, value) {
          if (promise === null) return;
          if (err) {
              var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
              promise._attachExtraTrace(wrapped);
              promise._reject(wrapped);
          } else if (!multiArgs) {
              promise._fulfill(value);
          } else {
              var args = [].slice.call(arguments, 1);;
              promise._fulfill(args);
          }
          promise = null;
      };
  }

  module.exports = nodebackForPromise;

  },{"./errors":12,"./es5":13,"./util":36}],21:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise) {
  var util = _dereq_("./util");
  var async = Promise._async;
  var tryCatch = util.tryCatch;
  var errorObj = util.errorObj;

  function spreadAdapter(val, nodeback) {
      var promise = this;
      if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
      var ret =
          tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }

  function successAdapter(val, nodeback) {
      var promise = this;
      var receiver = promise._boundValue();
      var ret = val === undefined
          ? tryCatch(nodeback).call(receiver, null)
          : tryCatch(nodeback).call(receiver, null, val);
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }
  function errorAdapter(reason, nodeback) {
      var promise = this;
      if (!reason) {
          var newReason = new Error(reason + "");
          newReason.cause = reason;
          reason = newReason;
      }
      var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
      if (ret === errorObj) {
          async.throwLater(ret.e);
      }
  }

  Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
                                                                       options) {
      if (typeof nodeback == "function") {
          var adapter = successAdapter;
          if (options !== undefined && Object(options).spread) {
              adapter = spreadAdapter;
          }
          this._then(
              adapter,
              errorAdapter,
              undefined,
              this,
              nodeback
          );
      }
      return this;
  };
  };

  },{"./util":36}],22:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function() {
  var makeSelfResolutionError = function () {
      return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  };
  var reflectHandler = function() {
      return new Promise.PromiseInspection(this._target());
  };
  var apiRejection = function(msg) {
      return Promise.reject(new TypeError(msg));
  };
  function Proxyable() {}
  var UNDEFINED_BINDING = {};
  var util = _dereq_("./util");

  var getDomain;
  if (util.isNode) {
      getDomain = function() {
          var ret = process.domain;
          if (ret === undefined) ret = null;
          return ret;
      };
  } else {
      getDomain = function() {
          return null;
      };
  }
  util.notEnumerableProp(Promise, "_getDomain", getDomain);

  var es5 = _dereq_("./es5");
  var Async = _dereq_("./async");
  var async = new Async();
  es5.defineProperty(Promise, "_async", {value: async});
  var errors = _dereq_("./errors");
  var TypeError = Promise.TypeError = errors.TypeError;
  Promise.RangeError = errors.RangeError;
  var CancellationError = Promise.CancellationError = errors.CancellationError;
  Promise.TimeoutError = errors.TimeoutError;
  Promise.OperationalError = errors.OperationalError;
  Promise.RejectionError = errors.OperationalError;
  Promise.AggregateError = errors.AggregateError;
  var INTERNAL = function(){};
  var APPLY = {};
  var NEXT_FILTER = {};
  var tryConvertToPromise = _dereq_("./thenables")(Promise, INTERNAL);
  var PromiseArray =
      _dereq_("./promise_array")(Promise, INTERNAL,
                                 tryConvertToPromise, apiRejection, Proxyable);
  var Context = _dereq_("./context")(Promise);
   /*jshint unused:false*/
  var createContext = Context.create;
  var debug = _dereq_("./debuggability")(Promise, Context);
  var CapturedTrace = debug.CapturedTrace;
  var PassThroughHandlerContext =
      _dereq_("./finally")(Promise, tryConvertToPromise);
  var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);
  var nodebackForPromise = _dereq_("./nodeback");
  var errorObj = util.errorObj;
  var tryCatch = util.tryCatch;
  function check(self, executor) {
      if (typeof executor !== "function") {
          throw new TypeError("expecting a function but got " + util.classString(executor));
      }
      if (self.constructor !== Promise) {
          throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
  }

  function Promise(executor) {
      this._bitField = 0;
      this._fulfillmentHandler0 = undefined;
      this._rejectionHandler0 = undefined;
      this._promise0 = undefined;
      this._receiver0 = undefined;
      if (executor !== INTERNAL) {
          check(this, executor);
          this._resolveFromExecutor(executor);
      }
      this._promiseCreated();
      this._fireEvent("promiseCreated", this);
  }

  Promise.prototype.toString = function () {
      return "[object Promise]";
  };

  Promise.prototype.caught = Promise.prototype["catch"] = function (fn) {
      var len = arguments.length;
      if (len > 1) {
          var catchInstances = new Array(len - 1),
              j = 0, i;
          for (i = 0; i < len - 1; ++i) {
              var item = arguments[i];
              if (util.isObject(item)) {
                  catchInstances[j++] = item;
              } else {
                  return apiRejection("expecting an object but got " + util.classString(item));
              }
          }
          catchInstances.length = j;
          fn = arguments[i];
          return this.then(undefined, catchFilter(catchInstances, fn, this));
      }
      return this.then(undefined, fn);
  };

  Promise.prototype.reflect = function () {
      return this._then(reflectHandler,
          reflectHandler, undefined, this, undefined);
  };

  Promise.prototype.then = function (didFulfill, didReject) {
      if (debug.warnings() && arguments.length > 0 &&
          typeof didFulfill !== "function" &&
          typeof didReject !== "function") {
          var msg = ".then() only accepts functions but was passed: " +
                  util.classString(didFulfill);
          if (arguments.length > 1) {
              msg += ", " + util.classString(didReject);
          }
          this._warn(msg);
      }
      return this._then(didFulfill, didReject, undefined, undefined, undefined);
  };

  Promise.prototype.done = function (didFulfill, didReject) {
      var promise =
          this._then(didFulfill, didReject, undefined, undefined, undefined);
      promise._setIsFinal();
  };

  Promise.prototype.spread = function (fn) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util.classString(fn));
      }
      return this.all()._then(fn, undefined, undefined, APPLY, undefined);
  };

  Promise.prototype.toJSON = function () {
      var ret = {
          isFulfilled: false,
          isRejected: false,
          fulfillmentValue: undefined,
          rejectionReason: undefined
      };
      if (this.isFulfilled()) {
          ret.fulfillmentValue = this.value();
          ret.isFulfilled = true;
      } else if (this.isRejected()) {
          ret.rejectionReason = this.reason();
          ret.isRejected = true;
      }
      return ret;
  };

  Promise.prototype.all = function () {
      if (arguments.length > 0) {
          this._warn(".all() was passed arguments but it does not take any");
      }
      return new PromiseArray(this).promise();
  };

  Promise.prototype.error = function (fn) {
      return this.caught(util.originatesFromRejection, fn);
  };

  Promise.is = function (val) {
      return val instanceof Promise;
  };

  Promise.fromNode = Promise.fromCallback = function(fn) {
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs
                                           : false;
      var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
      if (result === errorObj) {
          ret._rejectCallback(result.e, true);
      }
      if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
      return ret;
  };

  Promise.all = function (promises) {
      return new PromiseArray(promises).promise();
  };

  Promise.cast = function (obj) {
      var ret = tryConvertToPromise(obj);
      if (!(ret instanceof Promise)) {
          ret = new Promise(INTERNAL);
          ret._captureStackTrace();
          ret._setFulfilled();
          ret._rejectionHandler0 = obj;
      }
      return ret;
  };

  Promise.resolve = Promise.fulfilled = Promise.cast;

  Promise.reject = Promise.rejected = function (reason) {
      var ret = new Promise(INTERNAL);
      ret._captureStackTrace();
      ret._rejectCallback(reason, true);
      return ret;
  };

  Promise.setScheduler = function(fn) {
      if (typeof fn !== "function") {
          throw new TypeError("expecting a function but got " + util.classString(fn));
      }
      return async.setScheduler(fn);
  };

  Promise.prototype._then = function (
      didFulfill,
      didReject,
      _,    receiver,
      internalData
  ) {
      var haveInternalData = internalData !== undefined;
      var promise = haveInternalData ? internalData : new Promise(INTERNAL);
      var target = this._target();
      var bitField = target._bitField;

      if (!haveInternalData) {
          promise._propagateFrom(this, 3);
          promise._captureStackTrace();
          if (receiver === undefined &&
              ((this._bitField & 2097152) !== 0)) {
              if (!((bitField & 50397184) === 0)) {
                  receiver = this._boundValue();
              } else {
                  receiver = target === this ? undefined : this._boundTo;
              }
          }
          this._fireEvent("promiseChained", this, promise);
      }

      var domain = getDomain();
      if (!((bitField & 50397184) === 0)) {
          var handler, value, settler = target._settlePromiseCtx;
          if (((bitField & 33554432) !== 0)) {
              value = target._rejectionHandler0;
              handler = didFulfill;
          } else if (((bitField & 16777216) !== 0)) {
              value = target._fulfillmentHandler0;
              handler = didReject;
              target._unsetRejectionIsUnhandled();
          } else {
              settler = target._settlePromiseLateCancellationObserver;
              value = new CancellationError("late cancellation observer");
              target._attachExtraTrace(value);
              handler = didReject;
          }

          async.invoke(settler, target, {
              handler: domain === null ? handler
                  : (typeof handler === "function" && domain.bind(handler)),
              promise: promise,
              receiver: receiver,
              value: value
          });
      } else {
          target._addCallbacks(didFulfill, didReject, promise, receiver, domain);
      }

      return promise;
  };

  Promise.prototype._length = function () {
      return this._bitField & 65535;
  };

  Promise.prototype._isFateSealed = function () {
      return (this._bitField & 117506048) !== 0;
  };

  Promise.prototype._isFollowing = function () {
      return (this._bitField & 67108864) === 67108864;
  };

  Promise.prototype._setLength = function (len) {
      this._bitField = (this._bitField & -65536) |
          (len & 65535);
  };

  Promise.prototype._setFulfilled = function () {
      this._bitField = this._bitField | 33554432;
      this._fireEvent("promiseFulfilled", this);
  };

  Promise.prototype._setRejected = function () {
      this._bitField = this._bitField | 16777216;
      this._fireEvent("promiseRejected", this);
  };

  Promise.prototype._setFollowing = function () {
      this._bitField = this._bitField | 67108864;
      this._fireEvent("promiseResolved", this);
  };

  Promise.prototype._setIsFinal = function () {
      this._bitField = this._bitField | 4194304;
  };

  Promise.prototype._isFinal = function () {
      return (this._bitField & 4194304) > 0;
  };

  Promise.prototype._unsetCancelled = function() {
      this._bitField = this._bitField & (~65536);
  };

  Promise.prototype._setCancelled = function() {
      this._bitField = this._bitField | 65536;
      this._fireEvent("promiseCancelled", this);
  };

  Promise.prototype._setAsyncGuaranteed = function() {
      if (async.hasCustomScheduler()) return;
      this._bitField = this._bitField | 134217728;
  };

  Promise.prototype._receiverAt = function (index) {
      var ret = index === 0 ? this._receiver0 : this[
              index * 4 - 4 + 3];
      if (ret === UNDEFINED_BINDING) {
          return undefined;
      } else if (ret === undefined && this._isBound()) {
          return this._boundValue();
      }
      return ret;
  };

  Promise.prototype._promiseAt = function (index) {
      return this[
              index * 4 - 4 + 2];
  };

  Promise.prototype._fulfillmentHandlerAt = function (index) {
      return this[
              index * 4 - 4 + 0];
  };

  Promise.prototype._rejectionHandlerAt = function (index) {
      return this[
              index * 4 - 4 + 1];
  };

  Promise.prototype._boundValue = function() {};

  Promise.prototype._migrateCallback0 = function (follower) {
      var bitField = follower._bitField;
      var fulfill = follower._fulfillmentHandler0;
      var reject = follower._rejectionHandler0;
      var promise = follower._promise0;
      var receiver = follower._receiverAt(0);
      if (receiver === undefined) receiver = UNDEFINED_BINDING;
      this._addCallbacks(fulfill, reject, promise, receiver, null);
  };

  Promise.prototype._migrateCallbackAt = function (follower, index) {
      var fulfill = follower._fulfillmentHandlerAt(index);
      var reject = follower._rejectionHandlerAt(index);
      var promise = follower._promiseAt(index);
      var receiver = follower._receiverAt(index);
      if (receiver === undefined) receiver = UNDEFINED_BINDING;
      this._addCallbacks(fulfill, reject, promise, receiver, null);
  };

  Promise.prototype._addCallbacks = function (
      fulfill,
      reject,
      promise,
      receiver,
      domain
  ) {
      var index = this._length();

      if (index >= 65535 - 4) {
          index = 0;
          this._setLength(0);
      }

      if (index === 0) {
          this._promise0 = promise;
          this._receiver0 = receiver;
          if (typeof fulfill === "function") {
              this._fulfillmentHandler0 =
                  domain === null ? fulfill : domain.bind(fulfill);
          }
          if (typeof reject === "function") {
              this._rejectionHandler0 =
                  domain === null ? reject : domain.bind(reject);
          }
      } else {
          var base = index * 4 - 4;
          this[base + 2] = promise;
          this[base + 3] = receiver;
          if (typeof fulfill === "function") {
              this[base + 0] =
                  domain === null ? fulfill : domain.bind(fulfill);
          }
          if (typeof reject === "function") {
              this[base + 1] =
                  domain === null ? reject : domain.bind(reject);
          }
      }
      this._setLength(index + 1);
      return index;
  };

  Promise.prototype._proxy = function (proxyable, arg) {
      this._addCallbacks(undefined, undefined, arg, proxyable, null);
  };

  Promise.prototype._resolveCallback = function(value, shouldBind) {
      if (((this._bitField & 117506048) !== 0)) return;
      if (value === this)
          return this._rejectCallback(makeSelfResolutionError(), false);
      var maybePromise = tryConvertToPromise(value, this);
      if (!(maybePromise instanceof Promise)) return this._fulfill(value);

      if (shouldBind) this._propagateFrom(maybePromise, 2);

      var promise = maybePromise._target();

      if (promise === this) {
          this._reject(makeSelfResolutionError());
          return;
      }

      var bitField = promise._bitField;
      if (((bitField & 50397184) === 0)) {
          var len = this._length();
          if (len > 0) promise._migrateCallback0(this);
          for (var i = 1; i < len; ++i) {
              promise._migrateCallbackAt(this, i);
          }
          this._setFollowing();
          this._setLength(0);
          this._setFollowee(promise);
      } else if (((bitField & 33554432) !== 0)) {
          this._fulfill(promise._value());
      } else if (((bitField & 16777216) !== 0)) {
          this._reject(promise._reason());
      } else {
          var reason = new CancellationError("late cancellation observer");
          promise._attachExtraTrace(reason);
          this._reject(reason);
      }
  };

  Promise.prototype._rejectCallback =
  function(reason, synchronous, ignoreNonErrorWarnings) {
      var trace = util.ensureErrorObject(reason);
      var hasStack = trace === reason;
      if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) {
          var message = "a promise was rejected with a non-error: " +
              util.classString(reason);
          this._warn(message, true);
      }
      this._attachExtraTrace(trace, synchronous ? hasStack : false);
      this._reject(reason);
  };

  Promise.prototype._resolveFromExecutor = function (executor) {
      var promise = this;
      this._captureStackTrace();
      this._pushContext();
      var synchronous = true;
      var r = this._execute(executor, function(value) {
          promise._resolveCallback(value);
      }, function (reason) {
          promise._rejectCallback(reason, synchronous);
      });
      synchronous = false;
      this._popContext();

      if (r !== undefined) {
          promise._rejectCallback(r, true);
      }
  };

  Promise.prototype._settlePromiseFromHandler = function (
      handler, receiver, value, promise
  ) {
      var bitField = promise._bitField;
      if (((bitField & 65536) !== 0)) return;
      promise._pushContext();
      var x;
      if (receiver === APPLY) {
          if (!value || typeof value.length !== "number") {
              x = errorObj;
              x.e = new TypeError("cannot .spread() a non-array: " +
                                      util.classString(value));
          } else {
              x = tryCatch(handler).apply(this._boundValue(), value);
          }
      } else {
          x = tryCatch(handler).call(receiver, value);
      }
      var promiseCreated = promise._popContext();
      bitField = promise._bitField;
      if (((bitField & 65536) !== 0)) return;

      if (x === NEXT_FILTER) {
          promise._reject(value);
      } else if (x === errorObj) {
          promise._rejectCallback(x.e, false);
      } else {
          debug.checkForgottenReturns(x, promiseCreated, "",  promise, this);
          promise._resolveCallback(x);
      }
  };

  Promise.prototype._target = function() {
      var ret = this;
      while (ret._isFollowing()) ret = ret._followee();
      return ret;
  };

  Promise.prototype._followee = function() {
      return this._rejectionHandler0;
  };

  Promise.prototype._setFollowee = function(promise) {
      this._rejectionHandler0 = promise;
  };

  Promise.prototype._settlePromise = function(promise, handler, receiver, value) {
      var isPromise = promise instanceof Promise;
      var bitField = this._bitField;
      var asyncGuaranteed = ((bitField & 134217728) !== 0);
      if (((bitField & 65536) !== 0)) {
          if (isPromise) promise._invokeInternalOnCancel();

          if (receiver instanceof PassThroughHandlerContext &&
              receiver.isFinallyHandler()) {
              receiver.cancelPromise = promise;
              if (tryCatch(handler).call(receiver, value) === errorObj) {
                  promise._reject(errorObj.e);
              }
          } else if (handler === reflectHandler) {
              promise._fulfill(reflectHandler.call(receiver));
          } else if (receiver instanceof Proxyable) {
              receiver._promiseCancelled(promise);
          } else if (isPromise || promise instanceof PromiseArray) {
              promise._cancel();
          } else {
              receiver.cancel();
          }
      } else if (typeof handler === "function") {
          if (!isPromise) {
              handler.call(receiver, value, promise);
          } else {
              if (asyncGuaranteed) promise._setAsyncGuaranteed();
              this._settlePromiseFromHandler(handler, receiver, value, promise);
          }
      } else if (receiver instanceof Proxyable) {
          if (!receiver._isResolved()) {
              if (((bitField & 33554432) !== 0)) {
                  receiver._promiseFulfilled(value, promise);
              } else {
                  receiver._promiseRejected(value, promise);
              }
          }
      } else if (isPromise) {
          if (asyncGuaranteed) promise._setAsyncGuaranteed();
          if (((bitField & 33554432) !== 0)) {
              promise._fulfill(value);
          } else {
              promise._reject(value);
          }
      }
  };

  Promise.prototype._settlePromiseLateCancellationObserver = function(ctx) {
      var handler = ctx.handler;
      var promise = ctx.promise;
      var receiver = ctx.receiver;
      var value = ctx.value;
      if (typeof handler === "function") {
          if (!(promise instanceof Promise)) {
              handler.call(receiver, value, promise);
          } else {
              this._settlePromiseFromHandler(handler, receiver, value, promise);
          }
      } else if (promise instanceof Promise) {
          promise._reject(value);
      }
  };

  Promise.prototype._settlePromiseCtx = function(ctx) {
      this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
  };

  Promise.prototype._settlePromise0 = function(handler, value, bitField) {
      var promise = this._promise0;
      var receiver = this._receiverAt(0);
      this._promise0 = undefined;
      this._receiver0 = undefined;
      this._settlePromise(promise, handler, receiver, value);
  };

  Promise.prototype._clearCallbackDataAtIndex = function(index) {
      var base = index * 4 - 4;
      this[base + 2] =
      this[base + 3] =
      this[base + 0] =
      this[base + 1] = undefined;
  };

  Promise.prototype._fulfill = function (value) {
      var bitField = this._bitField;
      if (((bitField & 117506048) >>> 16)) return;
      if (value === this) {
          var err = makeSelfResolutionError();
          this._attachExtraTrace(err);
          return this._reject(err);
      }
      this._setFulfilled();
      this._rejectionHandler0 = value;

      if ((bitField & 65535) > 0) {
          if (((bitField & 134217728) !== 0)) {
              this._settlePromises();
          } else {
              async.settlePromises(this);
          }
      }
  };

  Promise.prototype._reject = function (reason) {
      var bitField = this._bitField;
      if (((bitField & 117506048) >>> 16)) return;
      this._setRejected();
      this._fulfillmentHandler0 = reason;

      if (this._isFinal()) {
          return async.fatalError(reason, util.isNode);
      }

      if ((bitField & 65535) > 0) {
          async.settlePromises(this);
      } else {
          this._ensurePossibleRejectionHandled();
      }
  };

  Promise.prototype._fulfillPromises = function (len, value) {
      for (var i = 1; i < len; i++) {
          var handler = this._fulfillmentHandlerAt(i);
          var promise = this._promiseAt(i);
          var receiver = this._receiverAt(i);
          this._clearCallbackDataAtIndex(i);
          this._settlePromise(promise, handler, receiver, value);
      }
  };

  Promise.prototype._rejectPromises = function (len, reason) {
      for (var i = 1; i < len; i++) {
          var handler = this._rejectionHandlerAt(i);
          var promise = this._promiseAt(i);
          var receiver = this._receiverAt(i);
          this._clearCallbackDataAtIndex(i);
          this._settlePromise(promise, handler, receiver, reason);
      }
  };

  Promise.prototype._settlePromises = function () {
      var bitField = this._bitField;
      var len = (bitField & 65535);

      if (len > 0) {
          if (((bitField & 16842752) !== 0)) {
              var reason = this._fulfillmentHandler0;
              this._settlePromise0(this._rejectionHandler0, reason, bitField);
              this._rejectPromises(len, reason);
          } else {
              var value = this._rejectionHandler0;
              this._settlePromise0(this._fulfillmentHandler0, value, bitField);
              this._fulfillPromises(len, value);
          }
          this._setLength(0);
      }
      this._clearCancellationData();
  };

  Promise.prototype._settledValue = function() {
      var bitField = this._bitField;
      if (((bitField & 33554432) !== 0)) {
          return this._rejectionHandler0;
      } else if (((bitField & 16777216) !== 0)) {
          return this._fulfillmentHandler0;
      }
  };

  function deferResolve(v) {this.promise._resolveCallback(v);}
  function deferReject(v) {this.promise._rejectCallback(v, false);}

  Promise.defer = Promise.pending = function() {
      debug.deprecated("Promise.defer", "new Promise");
      var promise = new Promise(INTERNAL);
      return {
          promise: promise,
          resolve: deferResolve,
          reject: deferReject
      };
  };

  util.notEnumerableProp(Promise,
                         "_makeSelfResolutionError",
                         makeSelfResolutionError);

  _dereq_("./method")(Promise, INTERNAL, tryConvertToPromise, apiRejection,
      debug);
  _dereq_("./bind")(Promise, INTERNAL, tryConvertToPromise, debug);
  _dereq_("./cancel")(Promise, PromiseArray, apiRejection, debug);
  _dereq_("./direct_resolve")(Promise);
  _dereq_("./synchronous_inspection")(Promise);
  _dereq_("./join")(
      Promise, PromiseArray, tryConvertToPromise, INTERNAL, debug);
  Promise.Promise = Promise;
  Promise.version = "3.4.0";
  _dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
  _dereq_('./call_get.js')(Promise);
  _dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
  _dereq_('./timers.js')(Promise, INTERNAL, debug);
  _dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
  _dereq_('./nodeify.js')(Promise);
  _dereq_('./promisify.js')(Promise, INTERNAL);
  _dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
  _dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
  _dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
  _dereq_('./settle.js')(Promise, PromiseArray, debug);
  _dereq_('./some.js')(Promise, PromiseArray, apiRejection);
  _dereq_('./filter.js')(Promise, INTERNAL);
  _dereq_('./each.js')(Promise, INTERNAL);
  _dereq_('./any.js')(Promise);
                                                           
      util.toFastProperties(Promise);                                          
      util.toFastProperties(Promise.prototype);                                
      function fillTypes(value) {                                              
          var p = new Promise(INTERNAL);                                       
          p._fulfillmentHandler0 = value;                                      
          p._rejectionHandler0 = value;                                        
          p._promise0 = value;                                                 
          p._receiver0 = value;                                                
      }                                                                        
      // Complete slack tracking, opt out of field-type tracking and           
      // stabilize map                                                         
      fillTypes({a: 1});                                                       
      fillTypes({b: 2});                                                       
      fillTypes({c: 3});                                                       
      fillTypes(1);                                                            
      fillTypes(function(){});                                                 
      fillTypes(undefined);                                                    
      fillTypes(false);                                                        
      fillTypes(new Promise(INTERNAL));                                        
      debug.setBounds(Async.firstLineError, util.lastLineError);               
      return Promise;                                                          

  };

  },{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL, tryConvertToPromise,
      apiRejection, Proxyable) {
  var util = _dereq_("./util");
  var isArray = util.isArray;

  function toResolutionValue(val) {
      switch(val) {
      case -2: return [];
      case -3: return {};
      }
  }

  function PromiseArray(values) {
      var promise = this._promise = new Promise(INTERNAL);
      if (values instanceof Promise) {
          promise._propagateFrom(values, 3);
      }
      promise._setOnCancel(this);
      this._values = values;
      this._length = 0;
      this._totalResolved = 0;
      this._init(undefined, -2);
  }
  util.inherits(PromiseArray, Proxyable);

  PromiseArray.prototype.length = function () {
      return this._length;
  };

  PromiseArray.prototype.promise = function () {
      return this._promise;
  };

  PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
      var values = tryConvertToPromise(this._values, this._promise);
      if (values instanceof Promise) {
          values = values._target();
          var bitField = values._bitField;
          ;
          this._values = values;

          if (((bitField & 50397184) === 0)) {
              this._promise._setAsyncGuaranteed();
              return values._then(
                  init,
                  this._reject,
                  undefined,
                  this,
                  resolveValueIfEmpty
             );
          } else if (((bitField & 33554432) !== 0)) {
              values = values._value();
          } else if (((bitField & 16777216) !== 0)) {
              return this._reject(values._reason());
          } else {
              return this._cancel();
          }
      }
      values = util.asArray(values);
      if (values === null) {
          var err = apiRejection(
              "expecting an array or an iterable object but got " + util.classString(values)).reason();
          this._promise._rejectCallback(err, false);
          return;
      }

      if (values.length === 0) {
          if (resolveValueIfEmpty === -5) {
              this._resolveEmptyArray();
          }
          else {
              this._resolve(toResolutionValue(resolveValueIfEmpty));
          }
          return;
      }
      this._iterate(values);
  };

  PromiseArray.prototype._iterate = function(values) {
      var len = this.getActualLength(values.length);
      this._length = len;
      this._values = this.shouldCopyValues() ? new Array(len) : this._values;
      var result = this._promise;
      var isResolved = false;
      var bitField = null;
      for (var i = 0; i < len; ++i) {
          var maybePromise = tryConvertToPromise(values[i], result);

          if (maybePromise instanceof Promise) {
              maybePromise = maybePromise._target();
              bitField = maybePromise._bitField;
          } else {
              bitField = null;
          }

          if (isResolved) {
              if (bitField !== null) {
                  maybePromise.suppressUnhandledRejections();
              }
          } else if (bitField !== null) {
              if (((bitField & 50397184) === 0)) {
                  maybePromise._proxy(this, i);
                  this._values[i] = maybePromise;
              } else if (((bitField & 33554432) !== 0)) {
                  isResolved = this._promiseFulfilled(maybePromise._value(), i);
              } else if (((bitField & 16777216) !== 0)) {
                  isResolved = this._promiseRejected(maybePromise._reason(), i);
              } else {
                  isResolved = this._promiseCancelled(i);
              }
          } else {
              isResolved = this._promiseFulfilled(maybePromise, i);
          }
      }
      if (!isResolved) result._setAsyncGuaranteed();
  };

  PromiseArray.prototype._isResolved = function () {
      return this._values === null;
  };

  PromiseArray.prototype._resolve = function (value) {
      this._values = null;
      this._promise._fulfill(value);
  };

  PromiseArray.prototype._cancel = function() {
      if (this._isResolved() || !this._promise.isCancellable()) return;
      this._values = null;
      this._promise._cancel();
  };

  PromiseArray.prototype._reject = function (reason) {
      this._values = null;
      this._promise._rejectCallback(reason, false);
  };

  PromiseArray.prototype._promiseFulfilled = function (value, index) {
      this._values[index] = value;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          this._resolve(this._values);
          return true;
      }
      return false;
  };

  PromiseArray.prototype._promiseCancelled = function() {
      this._cancel();
      return true;
  };

  PromiseArray.prototype._promiseRejected = function (reason) {
      this._totalResolved++;
      this._reject(reason);
      return true;
  };

  PromiseArray.prototype._resultCancelled = function() {
      if (this._isResolved()) return;
      var values = this._values;
      this._cancel();
      if (values instanceof Promise) {
          values.cancel();
      } else {
          for (var i = 0; i < values.length; ++i) {
              if (values[i] instanceof Promise) {
                  values[i].cancel();
              }
          }
      }
  };

  PromiseArray.prototype.shouldCopyValues = function () {
      return true;
  };

  PromiseArray.prototype.getActualLength = function (len) {
      return len;
  };

  return PromiseArray;
  };

  },{"./util":36}],24:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL) {
  var THIS = {};
  var util = _dereq_("./util");
  var nodebackForPromise = _dereq_("./nodeback");
  var withAppended = util.withAppended;
  var maybeWrapAsError = util.maybeWrapAsError;
  var canEvaluate = util.canEvaluate;
  var TypeError = _dereq_("./errors").TypeError;
  var defaultSuffix = "Async";
  var defaultPromisified = {__isPromisified__: true};
  var noCopyProps = [
      "arity",    "length",
      "name",
      "arguments",
      "caller",
      "callee",
      "prototype",
      "__isPromisified__"
  ];
  var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

  var defaultFilter = function(name) {
      return util.isIdentifier(name) &&
          name.charAt(0) !== "_" &&
          name !== "constructor";
  };

  function propsFilter(key) {
      return !noCopyPropsPattern.test(key);
  }

  function isPromisified(fn) {
      try {
          return fn.__isPromisified__ === true;
      }
      catch (e) {
          return false;
      }
  }

  function hasPromisified(obj, key, suffix) {
      var val = util.getDataPropertyOrDefault(obj, key + suffix,
                                              defaultPromisified);
      return val ? isPromisified(val) : false;
  }
  function checkValid(ret, suffix, suffixRegexp) {
      for (var i = 0; i < ret.length; i += 2) {
          var key = ret[i];
          if (suffixRegexp.test(key)) {
              var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
              for (var j = 0; j < ret.length; j += 2) {
                  if (ret[j] === keyWithoutAsyncSuffix) {
                      throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a"
                          .replace("%s", suffix));
                  }
              }
          }
      }
  }

  function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
      var keys = util.inheritedDataKeys(obj);
      var ret = [];
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          var value = obj[key];
          var passesDefaultFilter = filter === defaultFilter
              ? true : defaultFilter(key, value, obj);
          if (typeof value === "function" &&
              !isPromisified(value) &&
              !hasPromisified(obj, key, suffix) &&
              filter(key, value, obj, passesDefaultFilter)) {
              ret.push(key, value);
          }
      }
      checkValid(ret, suffix, suffixRegexp);
      return ret;
  }

  var escapeIdentRegex = function(str) {
      return str.replace(/([$])/, "\\$");
  };

  var makeNodePromisifiedEval;
  if (false) {
  var switchCaseArgumentOrder = function(likelyArgumentCount) {
      var ret = [likelyArgumentCount];
      var min = Math.max(0, likelyArgumentCount - 1 - 3);
      for(var i = likelyArgumentCount - 1; i >= min; --i) {
          ret.push(i);
      }
      for(var i = likelyArgumentCount + 1; i <= 3; ++i) {
          ret.push(i);
      }
      return ret;
  };

  var argumentSequence = function(argumentCount) {
      return util.filledRange(argumentCount, "_arg", "");
  };

  var parameterDeclaration = function(parameterCount) {
      return util.filledRange(
          Math.max(parameterCount, 3), "_arg", "");
  };

  var parameterCount = function(fn) {
      if (typeof fn.length === "number") {
          return Math.max(Math.min(fn.length, 1023 + 1), 0);
      }
      return 0;
  };

  makeNodePromisifiedEval =
  function(callback, receiver, originalName, fn, _, multiArgs) {
      var newParameterCount = Math.max(0, parameterCount(fn) - 1);
      var argumentOrder = switchCaseArgumentOrder(newParameterCount);
      var shouldProxyThis = typeof callback === "string" || receiver === THIS;

      function generateCallForArgumentCount(count) {
          var args = argumentSequence(count).join(", ");
          var comma = count > 0 ? ", " : "";
          var ret;
          if (shouldProxyThis) {
              ret = "ret = callback.call(this, {{args}}, nodeback); break;\n";
          } else {
              ret = receiver === undefined
                  ? "ret = callback({{args}}, nodeback); break;\n"
                  : "ret = callback.call(receiver, {{args}}, nodeback); break;\n";
          }
          return ret.replace("{{args}}", args).replace(", ", comma);
      }

      function generateArgumentSwitchCase() {
          var ret = "";
          for (var i = 0; i < argumentOrder.length; ++i) {
              ret += "case " + argumentOrder[i] +":" +
                  generateCallForArgumentCount(argumentOrder[i]);
          }

          ret += "                                                             \n\
          default:                                                             \n\
              var args = new Array(len + 1);                                   \n\
              var i = 0;                                                       \n\
              for (var i = 0; i < len; ++i) {                                  \n\
                 args[i] = arguments[i];                                       \n\
              }                                                                \n\
              args[i] = nodeback;                                              \n\
              [CodeForCall]                                                    \n\
              break;                                                           \n\
          ".replace("[CodeForCall]", (shouldProxyThis
                                  ? "ret = callback.apply(this, args);\n"
                                  : "ret = callback.apply(receiver, args);\n"));
          return ret;
      }

      var getFunctionCode = typeof callback === "string"
                                  ? ("this != null ? this['"+callback+"'] : fn")
                                  : "fn";
      var body = "'use strict';                                                \n\
          var ret = function (Parameters) {                                    \n\
              'use strict';                                                    \n\
              var len = arguments.length;                                      \n\
              var promise = new Promise(INTERNAL);                             \n\
              promise._captureStackTrace();                                    \n\
              var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
              var ret;                                                         \n\
              var callback = tryCatch([GetFunctionCode]);                      \n\
              switch(len) {                                                    \n\
                  [CodeForSwitchCase]                                          \n\
              }                                                                \n\
              if (ret === errorObj) {                                          \n\
                  promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
              }                                                                \n\
              if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
              return promise;                                                  \n\
          };                                                                   \n\
          notEnumerableProp(ret, '__isPromisified__', true);                   \n\
          return ret;                                                          \n\
      ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
          .replace("[GetFunctionCode]", getFunctionCode);
      body = body.replace("Parameters", parameterDeclaration(newParameterCount));
      return new Function("Promise",
                          "fn",
                          "receiver",
                          "withAppended",
                          "maybeWrapAsError",
                          "nodebackForPromise",
                          "tryCatch",
                          "errorObj",
                          "notEnumerableProp",
                          "INTERNAL",
                          body)(
                      Promise,
                      fn,
                      receiver,
                      withAppended,
                      maybeWrapAsError,
                      nodebackForPromise,
                      util.tryCatch,
                      util.errorObj,
                      util.notEnumerableProp,
                      INTERNAL);
  };
  }

  function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) {
      var defaultThis = (function() {return this;})();
      var method = callback;
      if (typeof method === "string") {
          callback = fn;
      }
      function promisified() {
          var _receiver = receiver;
          if (receiver === THIS) _receiver = this;
          var promise = new Promise(INTERNAL);
          promise._captureStackTrace();
          var cb = typeof method === "string" && this !== defaultThis
              ? this[method] : callback;
          var fn = nodebackForPromise(promise, multiArgs);
          try {
              cb.apply(_receiver, withAppended(arguments, fn));
          } catch(e) {
              promise._rejectCallback(maybeWrapAsError(e), true, true);
          }
          if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
          return promise;
      }
      util.notEnumerableProp(promisified, "__isPromisified__", true);
      return promisified;
  }

  var makeNodePromisified = canEvaluate
      ? makeNodePromisifiedEval
      : makeNodePromisifiedClosure;

  function promisifyAll(obj, suffix, filter, promisifier, multiArgs) {
      var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
      var methods =
          promisifiableMethods(obj, suffix, suffixRegexp, filter);

      for (var i = 0, len = methods.length; i < len; i+= 2) {
          var key = methods[i];
          var fn = methods[i+1];
          var promisifiedKey = key + suffix;
          if (promisifier === makeNodePromisified) {
              obj[promisifiedKey] =
                  makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
          } else {
              var promisified = promisifier(fn, function() {
                  return makeNodePromisified(key, THIS, key,
                                             fn, suffix, multiArgs);
              });
              util.notEnumerableProp(promisified, "__isPromisified__", true);
              obj[promisifiedKey] = promisified;
          }
      }
      util.toFastProperties(obj);
      return obj;
  }

  function promisify(callback, receiver, multiArgs) {
      return makeNodePromisified(callback, receiver, undefined,
                                  callback, null, multiArgs);
  }

  Promise.promisify = function (fn, options) {
      if (typeof fn !== "function") {
          throw new TypeError("expecting a function but got " + util.classString(fn));
      }
      if (isPromisified(fn)) {
          return fn;
      }
      options = Object(options);
      var receiver = options.context === undefined ? THIS : options.context;
      var multiArgs = !!options.multiArgs;
      var ret = promisify(fn, receiver, multiArgs);
      util.copyDescriptors(fn, ret, propsFilter);
      return ret;
  };

  Promise.promisifyAll = function (target, options) {
      if (typeof target !== "function" && typeof target !== "object") {
          throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      options = Object(options);
      var multiArgs = !!options.multiArgs;
      var suffix = options.suffix;
      if (typeof suffix !== "string") suffix = defaultSuffix;
      var filter = options.filter;
      if (typeof filter !== "function") filter = defaultFilter;
      var promisifier = options.promisifier;
      if (typeof promisifier !== "function") promisifier = makeNodePromisified;

      if (!util.isIdentifier(suffix)) {
          throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }

      var keys = util.inheritedDataKeys(target);
      for (var i = 0; i < keys.length; ++i) {
          var value = target[keys[i]];
          if (keys[i] !== "constructor" &&
              util.isClass(value)) {
              promisifyAll(value.prototype, suffix, filter, promisifier,
                  multiArgs);
              promisifyAll(value, suffix, filter, promisifier, multiArgs);
          }
      }

      return promisifyAll(target, suffix, filter, promisifier, multiArgs);
  };
  };


  },{"./errors":12,"./nodeback":20,"./util":36}],25:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(
      Promise, PromiseArray, tryConvertToPromise, apiRejection) {
  var util = _dereq_("./util");
  var isObject = util.isObject;
  var es5 = _dereq_("./es5");
  var Es6Map;
  if (typeof Map === "function") Es6Map = Map;

  var mapToEntries = (function() {
      var index = 0;
      var size = 0;

      function extractEntry(value, key) {
          this[index] = value;
          this[index + size] = key;
          index++;
      }

      return function mapToEntries(map) {
          size = map.size;
          index = 0;
          var ret = new Array(map.size * 2);
          map.forEach(extractEntry, ret);
          return ret;
      };
  })();

  var entriesToMap = function(entries) {
      var ret = new Es6Map();
      var length = entries.length / 2 | 0;
      for (var i = 0; i < length; ++i) {
          var key = entries[length + i];
          var value = entries[i];
          ret.set(key, value);
      }
      return ret;
  };

  function PropertiesPromiseArray(obj) {
      var isMap = false;
      var entries;
      if (Es6Map !== undefined && obj instanceof Es6Map) {
          entries = mapToEntries(obj);
          isMap = true;
      } else {
          var keys = es5.keys(obj);
          var len = keys.length;
          entries = new Array(len * 2);
          for (var i = 0; i < len; ++i) {
              var key = keys[i];
              entries[i] = obj[key];
              entries[i + len] = key;
          }
      }
      this.constructor$(entries);
      this._isMap = isMap;
      this._init$(undefined, -3);
  }
  util.inherits(PropertiesPromiseArray, PromiseArray);

  PropertiesPromiseArray.prototype._init = function () {};

  PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
      this._values[index] = value;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          var val;
          if (this._isMap) {
              val = entriesToMap(this._values);
          } else {
              val = {};
              var keyOffset = this.length();
              for (var i = 0, len = this.length(); i < len; ++i) {
                  val[this._values[i + keyOffset]] = this._values[i];
              }
          }
          this._resolve(val);
          return true;
      }
      return false;
  };

  PropertiesPromiseArray.prototype.shouldCopyValues = function () {
      return false;
  };

  PropertiesPromiseArray.prototype.getActualLength = function (len) {
      return len >> 1;
  };

  function props(promises) {
      var ret;
      var castValue = tryConvertToPromise(promises);

      if (!isObject(castValue)) {
          return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      } else if (castValue instanceof Promise) {
          ret = castValue._then(
              Promise.props, undefined, undefined, undefined, undefined);
      } else {
          ret = new PropertiesPromiseArray(castValue).promise();
      }

      if (castValue instanceof Promise) {
          ret._propagateFrom(castValue, 2);
      }
      return ret;
  }

  Promise.prototype.props = function () {
      return props(this);
  };

  Promise.props = function (promises) {
      return props(promises);
  };
  };

  },{"./es5":13,"./util":36}],26:[function(_dereq_,module,exports){
  "use strict";
  function arrayMove(src, srcIndex, dst, dstIndex, len) {
      for (var j = 0; j < len; ++j) {
          dst[j + dstIndex] = src[j + srcIndex];
          src[j + srcIndex] = void 0;
      }
  }

  function Queue(capacity) {
      this._capacity = capacity;
      this._length = 0;
      this._front = 0;
  }

  Queue.prototype._willBeOverCapacity = function (size) {
      return this._capacity < size;
  };

  Queue.prototype._pushOne = function (arg) {
      var length = this.length();
      this._checkCapacity(length + 1);
      var i = (this._front + length) & (this._capacity - 1);
      this[i] = arg;
      this._length = length + 1;
  };

  Queue.prototype._unshiftOne = function(value) {
      var capacity = this._capacity;
      this._checkCapacity(this.length() + 1);
      var front = this._front;
      var i = (((( front - 1 ) &
                      ( capacity - 1) ) ^ capacity ) - capacity );
      this[i] = value;
      this._front = i;
      this._length = this.length() + 1;
  };

  Queue.prototype.unshift = function(fn, receiver, arg) {
      this._unshiftOne(arg);
      this._unshiftOne(receiver);
      this._unshiftOne(fn);
  };

  Queue.prototype.push = function (fn, receiver, arg) {
      var length = this.length() + 3;
      if (this._willBeOverCapacity(length)) {
          this._pushOne(fn);
          this._pushOne(receiver);
          this._pushOne(arg);
          return;
      }
      var j = this._front + length - 3;
      this._checkCapacity(length);
      var wrapMask = this._capacity - 1;
      this[(j + 0) & wrapMask] = fn;
      this[(j + 1) & wrapMask] = receiver;
      this[(j + 2) & wrapMask] = arg;
      this._length = length;
  };

  Queue.prototype.shift = function () {
      var front = this._front,
          ret = this[front];

      this[front] = undefined;
      this._front = (front + 1) & (this._capacity - 1);
      this._length--;
      return ret;
  };

  Queue.prototype.length = function () {
      return this._length;
  };

  Queue.prototype._checkCapacity = function (size) {
      if (this._capacity < size) {
          this._resizeTo(this._capacity << 1);
      }
  };

  Queue.prototype._resizeTo = function (capacity) {
      var oldCapacity = this._capacity;
      this._capacity = capacity;
      var front = this._front;
      var length = this._length;
      var moveItemsCount = (front + length) & (oldCapacity - 1);
      arrayMove(this, 0, this, oldCapacity, moveItemsCount);
  };

  module.exports = Queue;

  },{}],27:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(
      Promise, INTERNAL, tryConvertToPromise, apiRejection) {
  var util = _dereq_("./util");

  var raceLater = function (promise) {
      return promise.then(function(array) {
          return race(array, promise);
      });
  };

  function race(promises, parent) {
      var maybePromise = tryConvertToPromise(promises);

      if (maybePromise instanceof Promise) {
          return raceLater(maybePromise);
      } else {
          promises = util.asArray(promises);
          if (promises === null)
              return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
      }

      var ret = new Promise(INTERNAL);
      if (parent !== undefined) {
          ret._propagateFrom(parent, 3);
      }
      var fulfill = ret._fulfill;
      var reject = ret._reject;
      for (var i = 0, len = promises.length; i < len; ++i) {
          var val = promises[i];

          if (val === undefined && !(i in promises)) {
              continue;
          }

          Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
      }
      return ret;
  }

  Promise.race = function (promises) {
      return race(promises, undefined);
  };

  Promise.prototype.race = function () {
      return race(this, undefined);
  };

  };

  },{"./util":36}],28:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise,
                            PromiseArray,
                            apiRejection,
                            tryConvertToPromise,
                            INTERNAL,
                            debug) {
  var getDomain = Promise._getDomain;
  var util = _dereq_("./util");
  var tryCatch = util.tryCatch;

  function ReductionPromiseArray(promises, fn, initialValue, _each) {
      this.constructor$(promises);
      var domain = getDomain();
      this._fn = domain === null ? fn : domain.bind(fn);
      if (initialValue !== undefined) {
          initialValue = Promise.resolve(initialValue);
          initialValue._attachCancellationCallback(this);
      }
      this._initialValue = initialValue;
      this._currentCancellable = null;
      this._eachValues = _each === INTERNAL ? [] : undefined;
      this._promise._captureStackTrace();
      this._init$(undefined, -5);
  }
  util.inherits(ReductionPromiseArray, PromiseArray);

  ReductionPromiseArray.prototype._gotAccum = function(accum) {
      if (this._eachValues !== undefined && accum !== INTERNAL) {
          this._eachValues.push(accum);
      }
  };

  ReductionPromiseArray.prototype._eachComplete = function(value) {
      this._eachValues.push(value);
      return this._eachValues;
  };

  ReductionPromiseArray.prototype._init = function() {};

  ReductionPromiseArray.prototype._resolveEmptyArray = function() {
      this._resolve(this._eachValues !== undefined ? this._eachValues
                                                   : this._initialValue);
  };

  ReductionPromiseArray.prototype.shouldCopyValues = function () {
      return false;
  };

  ReductionPromiseArray.prototype._resolve = function(value) {
      this._promise._resolveCallback(value);
      this._values = null;
  };

  ReductionPromiseArray.prototype._resultCancelled = function(sender) {
      if (sender === this._initialValue) return this._cancel();
      if (this._isResolved()) return;
      this._resultCancelled$();
      if (this._currentCancellable instanceof Promise) {
          this._currentCancellable.cancel();
      }
      if (this._initialValue instanceof Promise) {
          this._initialValue.cancel();
      }
  };

  ReductionPromiseArray.prototype._iterate = function (values) {
      this._values = values;
      var value;
      var i;
      var length = values.length;
      if (this._initialValue !== undefined) {
          value = this._initialValue;
          i = 0;
      } else {
          value = Promise.resolve(values[0]);
          i = 1;
      }

      this._currentCancellable = value;

      if (!value.isRejected()) {
          for (; i < length; ++i) {
              var ctx = {
                  accum: null,
                  value: values[i],
                  index: i,
                  length: length,
                  array: this
              };
              value = value._then(gotAccum, undefined, undefined, ctx, undefined);
          }
      }

      if (this._eachValues !== undefined) {
          value = value
              ._then(this._eachComplete, undefined, undefined, this, undefined);
      }
      value._then(completed, completed, undefined, value, this);
  };

  Promise.prototype.reduce = function (fn, initialValue) {
      return reduce(this, fn, initialValue, null);
  };

  Promise.reduce = function (promises, fn, initialValue, _each) {
      return reduce(promises, fn, initialValue, _each);
  };

  function completed(valueOrReason, array) {
      if (this.isFulfilled()) {
          array._resolve(valueOrReason);
      } else {
          array._reject(valueOrReason);
      }
  }

  function reduce(promises, fn, initialValue, _each) {
      if (typeof fn !== "function") {
          return apiRejection("expecting a function but got " + util.classString(fn));
      }
      var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
      return array.promise();
  }

  function gotAccum(accum) {
      this.accum = accum;
      this.array._gotAccum(accum);
      var value = tryConvertToPromise(this.value, this.array._promise);
      if (value instanceof Promise) {
          this.array._currentCancellable = value;
          return value._then(gotValue, undefined, undefined, this, undefined);
      } else {
          return gotValue.call(this, value);
      }
  }

  function gotValue(value) {
      var array = this.array;
      var promise = array._promise;
      var fn = tryCatch(array._fn);
      promise._pushContext();
      var ret;
      if (array._eachValues !== undefined) {
          ret = fn.call(promise._boundValue(), value, this.index, this.length);
      } else {
          ret = fn.call(promise._boundValue(),
                                this.accum, value, this.index, this.length);
      }
      if (ret instanceof Promise) {
          array._currentCancellable = ret;
      }
      var promiseCreated = promise._popContext();
      debug.checkForgottenReturns(
          ret,
          promiseCreated,
          array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
          promise
      );
      return ret;
  }
  };

  },{"./util":36}],29:[function(_dereq_,module,exports){
  "use strict";
  var util = _dereq_("./util");
  var schedule;
  var noAsyncScheduler = function() {
      throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  };
  var NativePromise = util.getNativePromise();
  if (util.isNode && typeof MutationObserver === "undefined") {
      var GlobalSetImmediate = global.setImmediate;
      var ProcessNextTick = process.nextTick;
      schedule = util.isRecentNode
                  ? function(fn) { GlobalSetImmediate.call(global, fn); }
                  : function(fn) { ProcessNextTick.call(process, fn); };
  } else if (typeof NativePromise === "function") {
      var nativePromise = NativePromise.resolve();
      schedule = function(fn) {
          nativePromise.then(fn);
      };
  } else if ((typeof MutationObserver !== "undefined") &&
            !(typeof window !== "undefined" &&
              window.navigator &&
              window.navigator.standalone)) {
      schedule = (function() {
          var div = document.createElement("div");
          var opts = {attributes: true};
          var toggleScheduled = false;
          var div2 = document.createElement("div");
          var o2 = new MutationObserver(function() {
              div.classList.toggle("foo");
              toggleScheduled = false;
          });
          o2.observe(div2, opts);

          var scheduleToggle = function() {
              if (toggleScheduled) return;
                  toggleScheduled = true;
                  div2.classList.toggle("foo");
              };

              return function schedule(fn) {
              var o = new MutationObserver(function() {
                  o.disconnect();
                  fn();
              });
              o.observe(div, opts);
              scheduleToggle();
          };
      })();
  } else if (typeof setImmediate !== "undefined") {
      schedule = function (fn) {
          setImmediate(fn);
      };
  } else if (typeof setTimeout !== "undefined") {
      schedule = function (fn) {
          setTimeout(fn, 0);
      };
  } else {
      schedule = noAsyncScheduler;
  }
  module.exports = schedule;

  },{"./util":36}],30:[function(_dereq_,module,exports){
  "use strict";
  module.exports =
      function(Promise, PromiseArray, debug) {
  var PromiseInspection = Promise.PromiseInspection;
  var util = _dereq_("./util");

  function SettledPromiseArray(values) {
      this.constructor$(values);
  }
  util.inherits(SettledPromiseArray, PromiseArray);

  SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
      this._values[index] = inspection;
      var totalResolved = ++this._totalResolved;
      if (totalResolved >= this._length) {
          this._resolve(this._values);
          return true;
      }
      return false;
  };

  SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
      var ret = new PromiseInspection();
      ret._bitField = 33554432;
      ret._settledValueField = value;
      return this._promiseResolved(index, ret);
  };
  SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
      var ret = new PromiseInspection();
      ret._bitField = 16777216;
      ret._settledValueField = reason;
      return this._promiseResolved(index, ret);
  };

  Promise.settle = function (promises) {
      debug.deprecated(".settle()", ".reflect()");
      return new SettledPromiseArray(promises).promise();
  };

  Promise.prototype.settle = function () {
      return Promise.settle(this);
  };
  };

  },{"./util":36}],31:[function(_dereq_,module,exports){
  "use strict";
  module.exports =
  function(Promise, PromiseArray, apiRejection) {
  var util = _dereq_("./util");
  var RangeError = _dereq_("./errors").RangeError;
  var AggregateError = _dereq_("./errors").AggregateError;
  var isArray = util.isArray;
  var CANCELLATION = {};


  function SomePromiseArray(values) {
      this.constructor$(values);
      this._howMany = 0;
      this._unwrap = false;
      this._initialized = false;
  }
  util.inherits(SomePromiseArray, PromiseArray);

  SomePromiseArray.prototype._init = function () {
      if (!this._initialized) {
          return;
      }
      if (this._howMany === 0) {
          this._resolve([]);
          return;
      }
      this._init$(undefined, -5);
      var isArrayResolved = isArray(this._values);
      if (!this._isResolved() &&
          isArrayResolved &&
          this._howMany > this._canPossiblyFulfill()) {
          this._reject(this._getRangeError(this.length()));
      }
  };

  SomePromiseArray.prototype.init = function () {
      this._initialized = true;
      this._init();
  };

  SomePromiseArray.prototype.setUnwrap = function () {
      this._unwrap = true;
  };

  SomePromiseArray.prototype.howMany = function () {
      return this._howMany;
  };

  SomePromiseArray.prototype.setHowMany = function (count) {
      this._howMany = count;
  };

  SomePromiseArray.prototype._promiseFulfilled = function (value) {
      this._addFulfilled(value);
      if (this._fulfilled() === this.howMany()) {
          this._values.length = this.howMany();
          if (this.howMany() === 1 && this._unwrap) {
              this._resolve(this._values[0]);
          } else {
              this._resolve(this._values);
          }
          return true;
      }
      return false;

  };
  SomePromiseArray.prototype._promiseRejected = function (reason) {
      this._addRejected(reason);
      return this._checkOutcome();
  };

  SomePromiseArray.prototype._promiseCancelled = function () {
      if (this._values instanceof Promise || this._values == null) {
          return this._cancel();
      }
      this._addRejected(CANCELLATION);
      return this._checkOutcome();
  };

  SomePromiseArray.prototype._checkOutcome = function() {
      if (this.howMany() > this._canPossiblyFulfill()) {
          var e = new AggregateError();
          for (var i = this.length(); i < this._values.length; ++i) {
              if (this._values[i] !== CANCELLATION) {
                  e.push(this._values[i]);
              }
          }
          if (e.length > 0) {
              this._reject(e);
          } else {
              this._cancel();
          }
          return true;
      }
      return false;
  };

  SomePromiseArray.prototype._fulfilled = function () {
      return this._totalResolved;
  };

  SomePromiseArray.prototype._rejected = function () {
      return this._values.length - this.length();
  };

  SomePromiseArray.prototype._addRejected = function (reason) {
      this._values.push(reason);
  };

  SomePromiseArray.prototype._addFulfilled = function (value) {
      this._values[this._totalResolved++] = value;
  };

  SomePromiseArray.prototype._canPossiblyFulfill = function () {
      return this.length() - this._rejected();
  };

  SomePromiseArray.prototype._getRangeError = function (count) {
      var message = "Input array must contain at least " +
              this._howMany + " items but contains only " + count + " items";
      return new RangeError(message);
  };

  SomePromiseArray.prototype._resolveEmptyArray = function () {
      this._reject(this._getRangeError(0));
  };

  function some(promises, howMany) {
      if ((howMany | 0) !== howMany || howMany < 0) {
          return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      var ret = new SomePromiseArray(promises);
      var promise = ret.promise();
      ret.setHowMany(howMany);
      ret.init();
      return promise;
  }

  Promise.some = function (promises, howMany) {
      return some(promises, howMany);
  };

  Promise.prototype.some = function (howMany) {
      return some(this, howMany);
  };

  Promise._SomePromiseArray = SomePromiseArray;
  };

  },{"./errors":12,"./util":36}],32:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise) {
  function PromiseInspection(promise) {
      if (promise !== undefined) {
          promise = promise._target();
          this._bitField = promise._bitField;
          this._settledValueField = promise._isFateSealed()
              ? promise._settledValue() : undefined;
      }
      else {
          this._bitField = 0;
          this._settledValueField = undefined;
      }
  }

  PromiseInspection.prototype._settledValue = function() {
      return this._settledValueField;
  };

  var value = PromiseInspection.prototype.value = function () {
      if (!this.isFulfilled()) {
          throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      return this._settledValue();
  };

  var reason = PromiseInspection.prototype.error =
  PromiseInspection.prototype.reason = function () {
      if (!this.isRejected()) {
          throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
      }
      return this._settledValue();
  };

  var isFulfilled = PromiseInspection.prototype.isFulfilled = function() {
      return (this._bitField & 33554432) !== 0;
  };

  var isRejected = PromiseInspection.prototype.isRejected = function () {
      return (this._bitField & 16777216) !== 0;
  };

  var isPending = PromiseInspection.prototype.isPending = function () {
      return (this._bitField & 50397184) === 0;
  };

  var isResolved = PromiseInspection.prototype.isResolved = function () {
      return (this._bitField & 50331648) !== 0;
  };

  PromiseInspection.prototype.isCancelled =
  Promise.prototype._isCancelled = function() {
      return (this._bitField & 65536) === 65536;
  };

  Promise.prototype.isCancelled = function() {
      return this._target()._isCancelled();
  };

  Promise.prototype.isPending = function() {
      return isPending.call(this._target());
  };

  Promise.prototype.isRejected = function() {
      return isRejected.call(this._target());
  };

  Promise.prototype.isFulfilled = function() {
      return isFulfilled.call(this._target());
  };

  Promise.prototype.isResolved = function() {
      return isResolved.call(this._target());
  };

  Promise.prototype.value = function() {
      return value.call(this._target());
  };

  Promise.prototype.reason = function() {
      var target = this._target();
      target._unsetRejectionIsUnhandled();
      return reason.call(target);
  };

  Promise.prototype._value = function() {
      return this._settledValue();
  };

  Promise.prototype._reason = function() {
      this._unsetRejectionIsUnhandled();
      return this._settledValue();
  };

  Promise.PromiseInspection = PromiseInspection;
  };

  },{}],33:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL) {
  var util = _dereq_("./util");
  var errorObj = util.errorObj;
  var isObject = util.isObject;

  function tryConvertToPromise(obj, context) {
      if (isObject(obj)) {
          if (obj instanceof Promise) return obj;
          var then = getThen(obj);
          if (then === errorObj) {
              if (context) context._pushContext();
              var ret = Promise.reject(then.e);
              if (context) context._popContext();
              return ret;
          } else if (typeof then === "function") {
              if (isAnyBluebirdPromise(obj)) {
                  var ret = new Promise(INTERNAL);
                  obj._then(
                      ret._fulfill,
                      ret._reject,
                      undefined,
                      ret,
                      null
                  );
                  return ret;
              }
              return doThenable(obj, then, context);
          }
      }
      return obj;
  }

  function doGetThen(obj) {
      return obj.then;
  }

  function getThen(obj) {
      try {
          return doGetThen(obj);
      } catch (e) {
          errorObj.e = e;
          return errorObj;
      }
  }

  var hasProp = {}.hasOwnProperty;
  function isAnyBluebirdPromise(obj) {
      try {
          return hasProp.call(obj, "_promise0");
      } catch (e) {
          return false;
      }
  }

  function doThenable(x, then, context) {
      var promise = new Promise(INTERNAL);
      var ret = promise;
      if (context) context._pushContext();
      promise._captureStackTrace();
      if (context) context._popContext();
      var synchronous = true;
      var result = util.tryCatch(then).call(x, resolve, reject);
      synchronous = false;

      if (promise && result === errorObj) {
          promise._rejectCallback(result.e, true, true);
          promise = null;
      }

      function resolve(value) {
          if (!promise) return;
          promise._resolveCallback(value);
          promise = null;
      }

      function reject(reason) {
          if (!promise) return;
          promise._rejectCallback(reason, synchronous, true);
          promise = null;
      }
      return ret;
  }

  return tryConvertToPromise;
  };

  },{"./util":36}],34:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function(Promise, INTERNAL, debug) {
  var util = _dereq_("./util");
  var TimeoutError = Promise.TimeoutError;

  function HandleWrapper(handle)  {
      this.handle = handle;
  }

  HandleWrapper.prototype._resultCancelled = function() {
      clearTimeout(this.handle);
  };

  var afterValue = function(value) { return delay(+this).thenReturn(value); };
  var delay = Promise.delay = function (ms, value) {
      var ret;
      var handle;
      if (value !== undefined) {
          ret = Promise.resolve(value)
                  ._then(afterValue, null, null, ms, undefined);
          if (debug.cancellation() && value instanceof Promise) {
              ret._setOnCancel(value);
          }
      } else {
          ret = new Promise(INTERNAL);
          handle = setTimeout(function() { ret._fulfill(); }, +ms);
          if (debug.cancellation()) {
              ret._setOnCancel(new HandleWrapper(handle));
          }
      }
      ret._setAsyncGuaranteed();
      return ret;
  };

  Promise.prototype.delay = function (ms) {
      return delay(ms, this);
  };

  var afterTimeout = function (promise, message, parent) {
      var err;
      if (typeof message !== "string") {
          if (message instanceof Error) {
              err = message;
          } else {
              err = new TimeoutError("operation timed out");
          }
      } else {
          err = new TimeoutError(message);
      }
      util.markAsOriginatingFromRejection(err);
      promise._attachExtraTrace(err);
      promise._reject(err);

      if (parent != null) {
          parent.cancel();
      }
  };

  function successClear(value) {
      clearTimeout(this.handle);
      return value;
  }

  function failureClear(reason) {
      clearTimeout(this.handle);
      throw reason;
  }

  Promise.prototype.timeout = function (ms, message) {
      ms = +ms;
      var ret, parent;

      var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() {
          if (ret.isPending()) {
              afterTimeout(ret, message, parent);
          }
      }, ms));

      if (debug.cancellation()) {
          parent = this.then();
          ret = parent._then(successClear, failureClear,
                              undefined, handleWrapper, undefined);
          ret._setOnCancel(handleWrapper);
      } else {
          ret = this._then(successClear, failureClear,
                              undefined, handleWrapper, undefined);
      }

      return ret;
  };

  };

  },{"./util":36}],35:[function(_dereq_,module,exports){
  "use strict";
  module.exports = function (Promise, apiRejection, tryConvertToPromise,
      createContext, INTERNAL, debug) {
      var util = _dereq_("./util");
      var TypeError = _dereq_("./errors").TypeError;
      var inherits = _dereq_("./util").inherits;
      var errorObj = util.errorObj;
      var tryCatch = util.tryCatch;
      var NULL = {};

      function thrower(e) {
          setTimeout(function(){throw e;}, 0);
      }

      function castPreservingDisposable(thenable) {
          var maybePromise = tryConvertToPromise(thenable);
          if (maybePromise !== thenable &&
              typeof thenable._isDisposable === "function" &&
              typeof thenable._getDisposer === "function" &&
              thenable._isDisposable()) {
              maybePromise._setDisposable(thenable._getDisposer());
          }
          return maybePromise;
      }
      function dispose(resources, inspection) {
          var i = 0;
          var len = resources.length;
          var ret = new Promise(INTERNAL);
          function iterator() {
              if (i >= len) return ret._fulfill();
              var maybePromise = castPreservingDisposable(resources[i++]);
              if (maybePromise instanceof Promise &&
                  maybePromise._isDisposable()) {
                  try {
                      maybePromise = tryConvertToPromise(
                          maybePromise._getDisposer().tryDispose(inspection),
                          resources.promise);
                  } catch (e) {
                      return thrower(e);
                  }
                  if (maybePromise instanceof Promise) {
                      return maybePromise._then(iterator, thrower,
                                                null, null, null);
                  }
              }
              iterator();
          }
          iterator();
          return ret;
      }

      function Disposer(data, promise, context) {
          this._data = data;
          this._promise = promise;
          this._context = context;
      }

      Disposer.prototype.data = function () {
          return this._data;
      };

      Disposer.prototype.promise = function () {
          return this._promise;
      };

      Disposer.prototype.resource = function () {
          if (this.promise().isFulfilled()) {
              return this.promise().value();
          }
          return NULL;
      };

      Disposer.prototype.tryDispose = function(inspection) {
          var resource = this.resource();
          var context = this._context;
          if (context !== undefined) context._pushContext();
          var ret = resource !== NULL
              ? this.doDispose(resource, inspection) : null;
          if (context !== undefined) context._popContext();
          this._promise._unsetDisposable();
          this._data = null;
          return ret;
      };

      Disposer.isDisposer = function (d) {
          return (d != null &&
                  typeof d.resource === "function" &&
                  typeof d.tryDispose === "function");
      };

      function FunctionDisposer(fn, promise, context) {
          this.constructor$(fn, promise, context);
      }
      inherits(FunctionDisposer, Disposer);

      FunctionDisposer.prototype.doDispose = function (resource, inspection) {
          var fn = this.data();
          return fn.call(resource, resource, inspection);
      };

      function maybeUnwrapDisposer(value) {
          if (Disposer.isDisposer(value)) {
              this.resources[this.index]._setDisposable(value);
              return value.promise();
          }
          return value;
      }

      function ResourceList(length) {
          this.length = length;
          this.promise = null;
          this[length-1] = null;
      }

      ResourceList.prototype._resultCancelled = function() {
          var len = this.length;
          for (var i = 0; i < len; ++i) {
              var item = this[i];
              if (item instanceof Promise) {
                  item.cancel();
              }
          }
      };

      Promise.using = function () {
          var len = arguments.length;
          if (len < 2) return apiRejection(
                          "you must pass at least 2 arguments to Promise.using");
          var fn = arguments[len - 1];
          if (typeof fn !== "function") {
              return apiRejection("expecting a function but got " + util.classString(fn));
          }
          var input;
          var spreadArgs = true;
          if (len === 2 && Array.isArray(arguments[0])) {
              input = arguments[0];
              len = input.length;
              spreadArgs = false;
          } else {
              input = arguments;
              len--;
          }
          var resources = new ResourceList(len);
          for (var i = 0; i < len; ++i) {
              var resource = input[i];
              if (Disposer.isDisposer(resource)) {
                  var disposer = resource;
                  resource = resource.promise();
                  resource._setDisposable(disposer);
              } else {
                  var maybePromise = tryConvertToPromise(resource);
                  if (maybePromise instanceof Promise) {
                      resource =
                          maybePromise._then(maybeUnwrapDisposer, null, null, {
                              resources: resources,
                              index: i
                      }, undefined);
                  }
              }
              resources[i] = resource;
          }

          var reflectedResources = new Array(resources.length);
          for (var i = 0; i < reflectedResources.length; ++i) {
              reflectedResources[i] = Promise.resolve(resources[i]).reflect();
          }

          var resultPromise = Promise.all(reflectedResources)
              .then(function(inspections) {
                  for (var i = 0; i < inspections.length; ++i) {
                      var inspection = inspections[i];
                      if (inspection.isRejected()) {
                          errorObj.e = inspection.error();
                          return errorObj;
                      } else if (!inspection.isFulfilled()) {
                          resultPromise.cancel();
                          return;
                      }
                      inspections[i] = inspection.value();
                  }
                  promise._pushContext();

                  fn = tryCatch(fn);
                  var ret = spreadArgs
                      ? fn.apply(undefined, inspections) : fn(inspections);
                  var promiseCreated = promise._popContext();
                  debug.checkForgottenReturns(
                      ret, promiseCreated, "Promise.using", promise);
                  return ret;
              });

          var promise = resultPromise.lastly(function() {
              var inspection = new Promise.PromiseInspection(resultPromise);
              return dispose(resources, inspection);
          });
          resources.promise = promise;
          promise._setOnCancel(resources);
          return promise;
      };

      Promise.prototype._setDisposable = function (disposer) {
          this._bitField = this._bitField | 131072;
          this._disposer = disposer;
      };

      Promise.prototype._isDisposable = function () {
          return (this._bitField & 131072) > 0;
      };

      Promise.prototype._getDisposer = function () {
          return this._disposer;
      };

      Promise.prototype._unsetDisposable = function () {
          this._bitField = this._bitField & (~131072);
          this._disposer = undefined;
      };

      Promise.prototype.disposer = function (fn) {
          if (typeof fn === "function") {
              return new FunctionDisposer(fn, this, createContext());
          }
          throw new TypeError();
      };

  };

  },{"./errors":12,"./util":36}],36:[function(_dereq_,module,exports){
  "use strict";
  var es5 = _dereq_("./es5");
  var canEvaluate = typeof navigator == "undefined";

  var errorObj = {e: {}};
  var tryCatchTarget;
  var globalObject = typeof self !== "undefined" ? self :
      typeof window !== "undefined" ? window :
      typeof global !== "undefined" ? global :
      this !== undefined ? this : null;

  function tryCatcher() {
      try {
          var target = tryCatchTarget;
          tryCatchTarget = null;
          return target.apply(this, arguments);
      } catch (e) {
          errorObj.e = e;
          return errorObj;
      }
  }
  function tryCatch(fn) {
      tryCatchTarget = fn;
      return tryCatcher;
  }

  var inherits = function(Child, Parent) {
      var hasProp = {}.hasOwnProperty;

      function T() {
          this.constructor = Child;
          this.constructor$ = Parent;
          for (var propertyName in Parent.prototype) {
              if (hasProp.call(Parent.prototype, propertyName) &&
                  propertyName.charAt(propertyName.length-1) !== "$"
             ) {
                  this[propertyName + "$"] = Parent.prototype[propertyName];
              }
          }
      }
      T.prototype = Parent.prototype;
      Child.prototype = new T();
      return Child.prototype;
  };


  function isPrimitive(val) {
      return val == null || val === true || val === false ||
          typeof val === "string" || typeof val === "number";

  }

  function isObject(value) {
      return typeof value === "function" ||
             typeof value === "object" && value !== null;
  }

  function maybeWrapAsError(maybeError) {
      if (!isPrimitive(maybeError)) return maybeError;

      return new Error(safeToString(maybeError));
  }

  function withAppended(target, appendee) {
      var len = target.length;
      var ret = new Array(len + 1);
      var i;
      for (i = 0; i < len; ++i) {
          ret[i] = target[i];
      }
      ret[i] = appendee;
      return ret;
  }

  function getDataPropertyOrDefault(obj, key, defaultValue) {
      if (es5.isES5) {
          var desc = Object.getOwnPropertyDescriptor(obj, key);

          if (desc != null) {
              return desc.get == null && desc.set == null
                      ? desc.value
                      : defaultValue;
          }
      } else {
          return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
      }
  }

  function notEnumerableProp(obj, name, value) {
      if (isPrimitive(obj)) return obj;
      var descriptor = {
          value: value,
          configurable: true,
          enumerable: false,
          writable: true
      };
      es5.defineProperty(obj, name, descriptor);
      return obj;
  }

  function thrower(r) {
      throw r;
  }

  var inheritedDataKeys = (function() {
      var excludedPrototypes = [
          Array.prototype,
          Object.prototype,
          Function.prototype
      ];

      var isExcludedProto = function(val) {
          for (var i = 0; i < excludedPrototypes.length; ++i) {
              if (excludedPrototypes[i] === val) {
                  return true;
              }
          }
          return false;
      };

      if (es5.isES5) {
          var getKeys = Object.getOwnPropertyNames;
          return function(obj) {
              var ret = [];
              var visitedKeys = Object.create(null);
              while (obj != null && !isExcludedProto(obj)) {
                  var keys;
                  try {
                      keys = getKeys(obj);
                  } catch (e) {
                      return ret;
                  }
                  for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      if (visitedKeys[key]) continue;
                      visitedKeys[key] = true;
                      var desc = Object.getOwnPropertyDescriptor(obj, key);
                      if (desc != null && desc.get == null && desc.set == null) {
                          ret.push(key);
                      }
                  }
                  obj = es5.getPrototypeOf(obj);
              }
              return ret;
          };
      } else {
          var hasProp = {}.hasOwnProperty;
          return function(obj) {
              if (isExcludedProto(obj)) return [];
              var ret = [];

              /*jshint forin:false */
              enumeration: for (var key in obj) {
                  if (hasProp.call(obj, key)) {
                      ret.push(key);
                  } else {
                      for (var i = 0; i < excludedPrototypes.length; ++i) {
                          if (hasProp.call(excludedPrototypes[i], key)) {
                              continue enumeration;
                          }
                      }
                      ret.push(key);
                  }
              }
              return ret;
          };
      }

  })();

  var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
  function isClass(fn) {
      try {
          if (typeof fn === "function") {
              var keys = es5.names(fn.prototype);

              var hasMethods = es5.isES5 && keys.length > 1;
              var hasMethodsOtherThanConstructor = keys.length > 0 &&
                  !(keys.length === 1 && keys[0] === "constructor");
              var hasThisAssignmentAndStaticMethods =
                  thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

              if (hasMethods || hasMethodsOtherThanConstructor ||
                  hasThisAssignmentAndStaticMethods) {
                  return true;
              }
          }
          return false;
      } catch (e) {
          return false;
      }
  }

  function toFastProperties(obj) {
      /*jshint -W027,-W055,-W031*/
      function FakeConstructor() {}
      FakeConstructor.prototype = obj;
      var l = 8;
      while (l--) new FakeConstructor();
      return obj;
      eval(obj);
  }

  var rident = /^[a-z$_][a-z$_0-9]*$/i;
  function isIdentifier(str) {
      return rident.test(str);
  }

  function filledRange(count, prefix, suffix) {
      var ret = new Array(count);
      for(var i = 0; i < count; ++i) {
          ret[i] = prefix + i + suffix;
      }
      return ret;
  }

  function safeToString(obj) {
      try {
          return obj + "";
      } catch (e) {
          return "[no string representation]";
      }
  }

  function isError(obj) {
      return obj !== null &&
             typeof obj === "object" &&
             typeof obj.message === "string" &&
             typeof obj.name === "string";
  }

  function markAsOriginatingFromRejection(e) {
      try {
          notEnumerableProp(e, "isOperational", true);
      }
      catch(ignore) {}
  }

  function originatesFromRejection(e) {
      if (e == null) return false;
      return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
          e["isOperational"] === true);
  }

  function canAttachTrace(obj) {
      return isError(obj) && es5.propertyIsWritable(obj, "stack");
  }

  var ensureErrorObject = (function() {
      if (!("stack" in new Error())) {
          return function(value) {
              if (canAttachTrace(value)) return value;
              try {throw new Error(safeToString(value));}
              catch(err) {return err;}
          };
      } else {
          return function(value) {
              if (canAttachTrace(value)) return value;
              return new Error(safeToString(value));
          };
      }
  })();

  function classString(obj) {
      return {}.toString.call(obj);
  }

  function copyDescriptors(from, to, filter) {
      var keys = es5.names(from);
      for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (filter(key)) {
              try {
                  es5.defineProperty(to, key, es5.getDescriptor(from, key));
              } catch (ignore) {}
          }
      }
  }

  var asArray = function(v) {
      if (es5.isArray(v)) {
          return v;
      }
      return null;
  };

  if (typeof Symbol !== "undefined" && Symbol.iterator) {
      var ArrayFrom = typeof Array.from === "function" ? function(v) {
          return Array.from(v);
      } : function(v) {
          var ret = [];
          var it = v[Symbol.iterator]();
          var itResult;
          while (!((itResult = it.next()).done)) {
              ret.push(itResult.value);
          }
          return ret;
      };

      asArray = function(v) {
          if (es5.isArray(v)) {
              return v;
          } else if (v != null && typeof v[Symbol.iterator] === "function") {
              return ArrayFrom(v);
          }
          return null;
      };
  }

  var isNode = typeof process !== "undefined" &&
          classString(process).toLowerCase() === "[object process]";

  function env(key, def) {
      return isNode ? process.env[key] : def;
  }

  function getNativePromise() {
      if (typeof Promise === "function") {
          try {
              var promise = new Promise(function(){});
              if ({}.toString.call(promise) === "[object Promise]") {
                  return Promise;
              }
          } catch (e) {}
      }
  }

  var ret = {
      isClass: isClass,
      isIdentifier: isIdentifier,
      inheritedDataKeys: inheritedDataKeys,
      getDataPropertyOrDefault: getDataPropertyOrDefault,
      thrower: thrower,
      isArray: es5.isArray,
      asArray: asArray,
      notEnumerableProp: notEnumerableProp,
      isPrimitive: isPrimitive,
      isObject: isObject,
      isError: isError,
      canEvaluate: canEvaluate,
      errorObj: errorObj,
      tryCatch: tryCatch,
      inherits: inherits,
      withAppended: withAppended,
      maybeWrapAsError: maybeWrapAsError,
      toFastProperties: toFastProperties,
      filledRange: filledRange,
      toString: safeToString,
      canAttachTrace: canAttachTrace,
      ensureErrorObject: ensureErrorObject,
      originatesFromRejection: originatesFromRejection,
      markAsOriginatingFromRejection: markAsOriginatingFromRejection,
      classString: classString,
      copyDescriptors: copyDescriptors,
      hasDevTools: typeof chrome !== "undefined" && chrome &&
                   typeof chrome.loadTimes === "function",
      isNode: isNode,
      env: env,
      global: globalObject,
      getNativePromise: getNativePromise
  };
  ret.isRecentNode = ret.isNode && (function() {
      var version = process.versions.node.split(".").map(Number);
      return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
  })();

  if (ret.isNode) ret.toFastProperties(process);

  try {throw new Error(); } catch (e) {ret.lastLineError = e;}
  module.exports = ret;

  },{"./es5":13}]},{},[4])(4)
  });                    ;if (typeof window !== 'undefined' && window !== null) {                               window.P = window.Promise;                                                     } else if (typeof self !== 'undefined' && self !== null) {                             self.P = self.Promise;                                                         }
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(125), (function() { return this; }()), __webpack_require__(19).setImmediate))

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

  
  /**
   * Expose `Emitter`.
   */

  if (true) {
    module.exports = Emitter;
  }

  /**
   * Initialize a new `Emitter`.
   *
   * @api public
   */

  function Emitter(obj) {
    if (obj) return mixin(obj);
  };

  /**
   * Mixin the emitter properties.
   *
   * @param {Object} obj
   * @return {Object}
   * @api private
   */

  function mixin(obj) {
    for (var key in Emitter.prototype) {
      obj[key] = Emitter.prototype[key];
    }
    return obj;
  }

  /**
   * Listen on the given `event` with `fn`.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.on =
  Emitter.prototype.addEventListener = function(event, fn){
    this._callbacks = this._callbacks || {};
    (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
      .push(fn);
    return this;
  };

  /**
   * Adds an `event` listener that will be invoked a single
   * time then automatically removed.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.once = function(event, fn){
    function on() {
      this.off(event, on);
      fn.apply(this, arguments);
    }

    on.fn = fn;
    this.on(event, on);
    return this;
  };

  /**
   * Remove the given callback for `event` or all
   * registered callbacks.
   *
   * @param {String} event
   * @param {Function} fn
   * @return {Emitter}
   * @api public
   */

  Emitter.prototype.off =
  Emitter.prototype.removeListener =
  Emitter.prototype.removeAllListeners =
  Emitter.prototype.removeEventListener = function(event, fn){
    this._callbacks = this._callbacks || {};

    // all
    if (0 == arguments.length) {
      this._callbacks = {};
      return this;
    }

    // specific event
    var callbacks = this._callbacks['$' + event];
    if (!callbacks) return this;

    // remove all handlers
    if (1 == arguments.length) {
      delete this._callbacks['$' + event];
      return this;
    }

    // remove specific handler
    var cb;
    for (var i = 0; i < callbacks.length; i++) {
      cb = callbacks[i];
      if (cb === fn || cb.fn === fn) {
        callbacks.splice(i, 1);
        break;
      }
    }
    return this;
  };

  /**
   * Emit `event` with the given args.
   *
   * @param {String} event
   * @param {Mixed} ...
   * @return {Emitter}
   */

  Emitter.prototype.emit = function(event){
    this._callbacks = this._callbacks || {};
    var args = [].slice.call(arguments, 1)
      , callbacks = this._callbacks['$' + event];

    if (callbacks) {
      callbacks = callbacks.slice(0);
      for (var i = 0, len = callbacks.length; i < len; ++i) {
        callbacks[i].apply(this, args);
      }
    }

    return this;
  };

  /**
   * Return array of callbacks for `event`.
   *
   * @param {String} event
   * @return {Array}
   * @api public
   */

  Emitter.prototype.listeners = function(event){
    this._callbacks = this._callbacks || {};
    return this._callbacks['$' + event] || [];
  };

  /**
   * Check if this emitter has `event` handlers.
   *
   * @param {String} event
   * @return {Boolean}
   * @api public
   */

  Emitter.prototype.hasListeners = function(event){
    return !! this.listeners(event).length;
  };


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

  var map = {
  	"./af": 25,
  	"./af.js": 25,
  	"./ar": 29,
  	"./ar-ma": 26,
  	"./ar-ma.js": 26,
  	"./ar-sa": 27,
  	"./ar-sa.js": 27,
  	"./ar-tn": 28,
  	"./ar-tn.js": 28,
  	"./ar.js": 29,
  	"./az": 30,
  	"./az.js": 30,
  	"./be": 31,
  	"./be.js": 31,
  	"./bg": 32,
  	"./bg.js": 32,
  	"./bn": 33,
  	"./bn.js": 33,
  	"./bo": 34,
  	"./bo.js": 34,
  	"./br": 35,
  	"./br.js": 35,
  	"./bs": 36,
  	"./bs.js": 36,
  	"./ca": 37,
  	"./ca.js": 37,
  	"./cs": 38,
  	"./cs.js": 38,
  	"./cv": 39,
  	"./cv.js": 39,
  	"./cy": 40,
  	"./cy.js": 40,
  	"./da": 41,
  	"./da.js": 41,
  	"./de": 43,
  	"./de-at": 42,
  	"./de-at.js": 42,
  	"./de.js": 43,
  	"./dv": 44,
  	"./dv.js": 44,
  	"./el": 45,
  	"./el.js": 45,
  	"./en-au": 46,
  	"./en-au.js": 46,
  	"./en-ca": 47,
  	"./en-ca.js": 47,
  	"./en-gb": 48,
  	"./en-gb.js": 48,
  	"./en-ie": 49,
  	"./en-ie.js": 49,
  	"./en-nz": 50,
  	"./en-nz.js": 50,
  	"./eo": 51,
  	"./eo.js": 51,
  	"./es": 52,
  	"./es.js": 52,
  	"./et": 53,
  	"./et.js": 53,
  	"./eu": 54,
  	"./eu.js": 54,
  	"./fa": 55,
  	"./fa.js": 55,
  	"./fi": 56,
  	"./fi.js": 56,
  	"./fo": 57,
  	"./fo.js": 57,
  	"./fr": 60,
  	"./fr-ca": 58,
  	"./fr-ca.js": 58,
  	"./fr-ch": 59,
  	"./fr-ch.js": 59,
  	"./fr.js": 60,
  	"./fy": 61,
  	"./fy.js": 61,
  	"./gd": 62,
  	"./gd.js": 62,
  	"./gl": 63,
  	"./gl.js": 63,
  	"./he": 64,
  	"./he.js": 64,
  	"./hi": 65,
  	"./hi.js": 65,
  	"./hr": 66,
  	"./hr.js": 66,
  	"./hu": 67,
  	"./hu.js": 67,
  	"./hy-am": 68,
  	"./hy-am.js": 68,
  	"./id": 69,
  	"./id.js": 69,
  	"./is": 70,
  	"./is.js": 70,
  	"./it": 71,
  	"./it.js": 71,
  	"./ja": 72,
  	"./ja.js": 72,
  	"./jv": 73,
  	"./jv.js": 73,
  	"./ka": 74,
  	"./ka.js": 74,
  	"./kk": 75,
  	"./kk.js": 75,
  	"./km": 76,
  	"./km.js": 76,
  	"./ko": 77,
  	"./ko.js": 77,
  	"./ky": 78,
  	"./ky.js": 78,
  	"./lb": 79,
  	"./lb.js": 79,
  	"./lo": 80,
  	"./lo.js": 80,
  	"./lt": 81,
  	"./lt.js": 81,
  	"./lv": 82,
  	"./lv.js": 82,
  	"./me": 83,
  	"./me.js": 83,
  	"./mk": 84,
  	"./mk.js": 84,
  	"./ml": 85,
  	"./ml.js": 85,
  	"./mr": 86,
  	"./mr.js": 86,
  	"./ms": 88,
  	"./ms-my": 87,
  	"./ms-my.js": 87,
  	"./ms.js": 88,
  	"./my": 89,
  	"./my.js": 89,
  	"./nb": 90,
  	"./nb.js": 90,
  	"./ne": 91,
  	"./ne.js": 91,
  	"./nl": 92,
  	"./nl.js": 92,
  	"./nn": 93,
  	"./nn.js": 93,
  	"./pa-in": 94,
  	"./pa-in.js": 94,
  	"./pl": 95,
  	"./pl.js": 95,
  	"./pt": 97,
  	"./pt-br": 96,
  	"./pt-br.js": 96,
  	"./pt.js": 97,
  	"./ro": 98,
  	"./ro.js": 98,
  	"./ru": 99,
  	"./ru.js": 99,
  	"./se": 100,
  	"./se.js": 100,
  	"./si": 101,
  	"./si.js": 101,
  	"./sk": 102,
  	"./sk.js": 102,
  	"./sl": 103,
  	"./sl.js": 103,
  	"./sq": 104,
  	"./sq.js": 104,
  	"./sr": 106,
  	"./sr-cyrl": 105,
  	"./sr-cyrl.js": 105,
  	"./sr.js": 106,
  	"./ss": 107,
  	"./ss.js": 107,
  	"./sv": 108,
  	"./sv.js": 108,
  	"./sw": 109,
  	"./sw.js": 109,
  	"./ta": 110,
  	"./ta.js": 110,
  	"./te": 111,
  	"./te.js": 111,
  	"./th": 112,
  	"./th.js": 112,
  	"./tl-ph": 113,
  	"./tl-ph.js": 113,
  	"./tlh": 114,
  	"./tlh.js": 114,
  	"./tr": 115,
  	"./tr.js": 115,
  	"./tzl": 116,
  	"./tzl.js": 116,
  	"./tzm": 118,
  	"./tzm-latn": 117,
  	"./tzm-latn.js": 117,
  	"./tzm.js": 118,
  	"./uk": 119,
  	"./uk.js": 119,
  	"./uz": 120,
  	"./uz.js": 120,
  	"./vi": 121,
  	"./vi.js": 121,
  	"./x-pseudo": 122,
  	"./x-pseudo.js": 122,
  	"./zh-cn": 123,
  	"./zh-cn.js": 123,
  	"./zh-tw": 124,
  	"./zh-tw.js": 124
  };
  function webpackContext(req) {
  	return __webpack_require__(webpackContextResolve(req));
  };
  function webpackContextResolve(req) {
  	return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
  };
  webpackContext.keys = function webpackContextKeys() {
  	return Object.keys(map);
  };
  webpackContext.resolve = webpackContextResolve;
  module.exports = webpackContext;
  webpackContext.id = 177;


/***/ },
/* 178 */
/***/ function(module, exports) {

  
  /**
   * Reduce `arr` with `fn`.
   *
   * @param {Array} arr
   * @param {Function} fn
   * @param {Mixed} initial
   *
   * TODO: combatible error handling?
   */

  module.exports = function(arr, fn, initial){  
    var idx = 0;
    var len = arr.length;
    var curr = arguments.length == 3
      ? initial
      : arr[idx++];

    while (idx < len) {
      curr = fn.call(null, curr, arr[idx], ++idx, arr);
    }
    
    return curr;
  };

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
       _ _      _       _
   ___| (_) ___| | __  (_)___
  / __| | |/ __| |/ /  | / __|
  \__ \ | | (__|   < _ | \__ \
  |___/_|_|\___|_|\_(_)/ |___/
                     |__/

   Version: 1.6.0
    Author: Ken Wheeler
   Website: http://kenwheeler.github.io
      Docs: http://kenwheeler.github.io/slick
      Repo: http://github.com/kenwheeler/slick
    Issues: http://github.com/kenwheeler/slick/issues

   */
  /* global window, document, define, jQuery, setInterval, clearInterval */
  (function(factory) {
      'use strict';
      if (true) {
          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(128)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
      } else if (typeof exports !== 'undefined') {
          module.exports = factory(require('jquery'));
      } else {
          factory(jQuery);
      }

  }(function($) {
      'use strict';
      var Slick = window.Slick || {};

      Slick = (function() {

          var instanceUid = 0;

          function Slick(element, settings) {

              var _ = this, dataSettings;

              _.defaults = {
                  accessibility: true,
                  adaptiveHeight: false,
                  appendArrows: $(element),
                  appendDots: $(element),
                  arrows: true,
                  asNavFor: null,
                  prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                  nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                  autoplay: false,
                  autoplaySpeed: 3000,
                  centerMode: false,
                  centerPadding: '50px',
                  cssEase: 'ease',
                  customPaging: function(slider, i) {
                      return $('<button type="button" data-role="none" role="button" tabindex="0" />').text(i + 1);
                  },
                  dots: false,
                  dotsClass: 'slick-dots',
                  draggable: true,
                  easing: 'linear',
                  edgeFriction: 0.35,
                  fade: false,
                  focusOnSelect: false,
                  infinite: true,
                  initialSlide: 0,
                  lazyLoad: 'ondemand',
                  mobileFirst: false,
                  pauseOnHover: true,
                  pauseOnFocus: true,
                  pauseOnDotsHover: false,
                  respondTo: 'window',
                  responsive: null,
                  rows: 1,
                  rtl: false,
                  slide: '',
                  slidesPerRow: 1,
                  slidesToShow: 1,
                  slidesToScroll: 1,
                  speed: 500,
                  swipe: true,
                  swipeToSlide: false,
                  touchMove: true,
                  touchThreshold: 5,
                  useCSS: true,
                  useTransform: true,
                  variableWidth: false,
                  vertical: false,
                  verticalSwiping: false,
                  waitForAnimate: true,
                  zIndex: 1000
              };

              _.initials = {
                  animating: false,
                  dragging: false,
                  autoPlayTimer: null,
                  currentDirection: 0,
                  currentLeft: null,
                  currentSlide: 0,
                  direction: 1,
                  $dots: null,
                  listWidth: null,
                  listHeight: null,
                  loadIndex: 0,
                  $nextArrow: null,
                  $prevArrow: null,
                  slideCount: null,
                  slideWidth: null,
                  $slideTrack: null,
                  $slides: null,
                  sliding: false,
                  slideOffset: 0,
                  swipeLeft: null,
                  $list: null,
                  touchObject: {},
                  transformsEnabled: false,
                  unslicked: false
              };

              $.extend(_, _.initials);

              _.activeBreakpoint = null;
              _.animType = null;
              _.animProp = null;
              _.breakpoints = [];
              _.breakpointSettings = [];
              _.cssTransitions = false;
              _.focussed = false;
              _.interrupted = false;
              _.hidden = 'hidden';
              _.paused = true;
              _.positionProp = null;
              _.respondTo = null;
              _.rowCount = 1;
              _.shouldClick = true;
              _.$slider = $(element);
              _.$slidesCache = null;
              _.transformType = null;
              _.transitionType = null;
              _.visibilityChange = 'visibilitychange';
              _.windowWidth = 0;
              _.windowTimer = null;

              dataSettings = $(element).data('slick') || {};

              _.options = $.extend({}, _.defaults, settings, dataSettings);

              _.currentSlide = _.options.initialSlide;

              _.originalSettings = _.options;

              if (typeof document.mozHidden !== 'undefined') {
                  _.hidden = 'mozHidden';
                  _.visibilityChange = 'mozvisibilitychange';
              } else if (typeof document.webkitHidden !== 'undefined') {
                  _.hidden = 'webkitHidden';
                  _.visibilityChange = 'webkitvisibilitychange';
              }

              _.autoPlay = $.proxy(_.autoPlay, _);
              _.autoPlayClear = $.proxy(_.autoPlayClear, _);
              _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
              _.changeSlide = $.proxy(_.changeSlide, _);
              _.clickHandler = $.proxy(_.clickHandler, _);
              _.selectHandler = $.proxy(_.selectHandler, _);
              _.setPosition = $.proxy(_.setPosition, _);
              _.swipeHandler = $.proxy(_.swipeHandler, _);
              _.dragHandler = $.proxy(_.dragHandler, _);
              _.keyHandler = $.proxy(_.keyHandler, _);

              _.instanceUid = instanceUid++;

              // A simple way to check for HTML strings
              // Strict HTML recognition (must start with <)
              // Extracted from jQuery v1.11 source
              _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;


              _.registerBreakpoints();
              _.init(true);

          }

          return Slick;

      }());

      Slick.prototype.activateADA = function() {
          var _ = this;

          _.$slideTrack.find('.slick-active').attr({
              'aria-hidden': 'false'
          }).find('a, input, button, select').attr({
              'tabindex': '0'
          });

      };

      Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {

          var _ = this;

          if (typeof(index) === 'boolean') {
              addBefore = index;
              index = null;
          } else if (index < 0 || (index >= _.slideCount)) {
              return false;
          }

          _.unload();

          if (typeof(index) === 'number') {
              if (index === 0 && _.$slides.length === 0) {
                  $(markup).appendTo(_.$slideTrack);
              } else if (addBefore) {
                  $(markup).insertBefore(_.$slides.eq(index));
              } else {
                  $(markup).insertAfter(_.$slides.eq(index));
              }
          } else {
              if (addBefore === true) {
                  $(markup).prependTo(_.$slideTrack);
              } else {
                  $(markup).appendTo(_.$slideTrack);
              }
          }

          _.$slides = _.$slideTrack.children(this.options.slide);

          _.$slideTrack.children(this.options.slide).detach();

          _.$slideTrack.append(_.$slides);

          _.$slides.each(function(index, element) {
              $(element).attr('data-slick-index', index);
          });

          _.$slidesCache = _.$slides;

          _.reinit();

      };

      Slick.prototype.animateHeight = function() {
          var _ = this;
          if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
              var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
              _.$list.animate({
                  height: targetHeight
              }, _.options.speed);
          }
      };

      Slick.prototype.animateSlide = function(targetLeft, callback) {

          var animProps = {},
              _ = this;

          _.animateHeight();

          if (_.options.rtl === true && _.options.vertical === false) {
              targetLeft = -targetLeft;
          }
          if (_.transformsEnabled === false) {
              if (_.options.vertical === false) {
                  _.$slideTrack.animate({
                      left: targetLeft
                  }, _.options.speed, _.options.easing, callback);
              } else {
                  _.$slideTrack.animate({
                      top: targetLeft
                  }, _.options.speed, _.options.easing, callback);
              }

          } else {

              if (_.cssTransitions === false) {
                  if (_.options.rtl === true) {
                      _.currentLeft = -(_.currentLeft);
                  }
                  $({
                      animStart: _.currentLeft
                  }).animate({
                      animStart: targetLeft
                  }, {
                      duration: _.options.speed,
                      easing: _.options.easing,
                      step: function(now) {
                          now = Math.ceil(now);
                          if (_.options.vertical === false) {
                              animProps[_.animType] = 'translate(' +
                                  now + 'px, 0px)';
                              _.$slideTrack.css(animProps);
                          } else {
                              animProps[_.animType] = 'translate(0px,' +
                                  now + 'px)';
                              _.$slideTrack.css(animProps);
                          }
                      },
                      complete: function() {
                          if (callback) {
                              callback.call();
                          }
                      }
                  });

              } else {

                  _.applyTransition();
                  targetLeft = Math.ceil(targetLeft);

                  if (_.options.vertical === false) {
                      animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                  } else {
                      animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                  }
                  _.$slideTrack.css(animProps);

                  if (callback) {
                      setTimeout(function() {

                          _.disableTransition();

                          callback.call();
                      }, _.options.speed);
                  }

              }

          }

      };

      Slick.prototype.getNavTarget = function() {

          var _ = this,
              asNavFor = _.options.asNavFor;

          if ( asNavFor && asNavFor !== null ) {
              asNavFor = $(asNavFor).not(_.$slider);
          }

          return asNavFor;

      };

      Slick.prototype.asNavFor = function(index) {

          var _ = this,
              asNavFor = _.getNavTarget();

          if ( asNavFor !== null && typeof asNavFor === 'object' ) {
              asNavFor.each(function() {
                  var target = $(this).slick('getSlick');
                  if(!target.unslicked) {
                      target.slideHandler(index, true);
                  }
              });
          }

      };

      Slick.prototype.applyTransition = function(slide) {

          var _ = this,
              transition = {};

          if (_.options.fade === false) {
              transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
          } else {
              transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
          }

          if (_.options.fade === false) {
              _.$slideTrack.css(transition);
          } else {
              _.$slides.eq(slide).css(transition);
          }

      };

      Slick.prototype.autoPlay = function() {

          var _ = this;

          _.autoPlayClear();

          if ( _.slideCount > _.options.slidesToShow ) {
              _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );
          }

      };

      Slick.prototype.autoPlayClear = function() {

          var _ = this;

          if (_.autoPlayTimer) {
              clearInterval(_.autoPlayTimer);
          }

      };

      Slick.prototype.autoPlayIterator = function() {

          var _ = this,
              slideTo = _.currentSlide + _.options.slidesToScroll;

          if ( !_.paused && !_.interrupted && !_.focussed ) {

              if ( _.options.infinite === false ) {

                  if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
                      _.direction = 0;
                  }

                  else if ( _.direction === 0 ) {

                      slideTo = _.currentSlide - _.options.slidesToScroll;

                      if ( _.currentSlide - 1 === 0 ) {
                          _.direction = 1;
                      }

                  }

              }

              _.slideHandler( slideTo );

          }

      };

      Slick.prototype.buildArrows = function() {

          var _ = this;

          if (_.options.arrows === true ) {

              _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
              _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

              if( _.slideCount > _.options.slidesToShow ) {

                  _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                  _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                  if (_.htmlExpr.test(_.options.prevArrow)) {
                      _.$prevArrow.prependTo(_.options.appendArrows);
                  }

                  if (_.htmlExpr.test(_.options.nextArrow)) {
                      _.$nextArrow.appendTo(_.options.appendArrows);
                  }

                  if (_.options.infinite !== true) {
                      _.$prevArrow
                          .addClass('slick-disabled')
                          .attr('aria-disabled', 'true');
                  }

              } else {

                  _.$prevArrow.add( _.$nextArrow )

                      .addClass('slick-hidden')
                      .attr({
                          'aria-disabled': 'true',
                          'tabindex': '-1'
                      });

              }

          }

      };

      Slick.prototype.buildDots = function() {

          var _ = this,
              i, dot;

          if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

              _.$slider.addClass('slick-dotted');

              dot = $('<ul />').addClass(_.options.dotsClass);

              for (i = 0; i <= _.getDotCount(); i += 1) {
                  dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
              }

              _.$dots = dot.appendTo(_.options.appendDots);

              _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');

          }

      };

      Slick.prototype.buildOut = function() {

          var _ = this;

          _.$slides =
              _.$slider
                  .children( _.options.slide + ':not(.slick-cloned)')
                  .addClass('slick-slide');

          _.slideCount = _.$slides.length;

          _.$slides.each(function(index, element) {
              $(element)
                  .attr('data-slick-index', index)
                  .data('originalStyling', $(element).attr('style') || '');
          });

          _.$slider.addClass('slick-slider');

          _.$slideTrack = (_.slideCount === 0) ?
              $('<div class="slick-track"/>').appendTo(_.$slider) :
              _.$slides.wrapAll('<div class="slick-track"/>').parent();

          _.$list = _.$slideTrack.wrap(
              '<div aria-live="polite" class="slick-list"/>').parent();
          _.$slideTrack.css('opacity', 0);

          if (_.options.centerMode === true || _.options.swipeToSlide === true) {
              _.options.slidesToScroll = 1;
          }

          $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

          _.setupInfinite();

          _.buildArrows();

          _.buildDots();

          _.updateDots();


          _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

          if (_.options.draggable === true) {
              _.$list.addClass('draggable');
          }

      };

      Slick.prototype.buildRows = function() {

          var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;

          newSlides = document.createDocumentFragment();
          originalSlides = _.$slider.children();

          if(_.options.rows > 1) {

              slidesPerSection = _.options.slidesPerRow * _.options.rows;
              numOfSlides = Math.ceil(
                  originalSlides.length / slidesPerSection
              );

              for(a = 0; a < numOfSlides; a++){
                  var slide = document.createElement('div');
                  for(b = 0; b < _.options.rows; b++) {
                      var row = document.createElement('div');
                      for(c = 0; c < _.options.slidesPerRow; c++) {
                          var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
                          if (originalSlides.get(target)) {
                              row.appendChild(originalSlides.get(target));
                          }
                      }
                      slide.appendChild(row);
                  }
                  newSlides.appendChild(slide);
              }

              _.$slider.empty().append(newSlides);
              _.$slider.children().children().children()
                  .css({
                      'width':(100 / _.options.slidesPerRow) + '%',
                      'display': 'inline-block'
                  });

          }

      };

      Slick.prototype.checkResponsive = function(initial, forceUpdate) {

          var _ = this,
              breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
          var sliderWidth = _.$slider.width();
          var windowWidth = window.innerWidth || $(window).width();

          if (_.respondTo === 'window') {
              respondToWidth = windowWidth;
          } else if (_.respondTo === 'slider') {
              respondToWidth = sliderWidth;
          } else if (_.respondTo === 'min') {
              respondToWidth = Math.min(windowWidth, sliderWidth);
          }

          if ( _.options.responsive &&
              _.options.responsive.length &&
              _.options.responsive !== null) {

              targetBreakpoint = null;

              for (breakpoint in _.breakpoints) {
                  if (_.breakpoints.hasOwnProperty(breakpoint)) {
                      if (_.originalSettings.mobileFirst === false) {
                          if (respondToWidth < _.breakpoints[breakpoint]) {
                              targetBreakpoint = _.breakpoints[breakpoint];
                          }
                      } else {
                          if (respondToWidth > _.breakpoints[breakpoint]) {
                              targetBreakpoint = _.breakpoints[breakpoint];
                          }
                      }
                  }
              }

              if (targetBreakpoint !== null) {
                  if (_.activeBreakpoint !== null) {
                      if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                          _.activeBreakpoint =
                              targetBreakpoint;
                          if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                              _.unslick(targetBreakpoint);
                          } else {
                              _.options = $.extend({}, _.originalSettings,
                                  _.breakpointSettings[
                                      targetBreakpoint]);
                              if (initial === true) {
                                  _.currentSlide = _.options.initialSlide;
                              }
                              _.refresh(initial);
                          }
                          triggerBreakpoint = targetBreakpoint;
                      }
                  } else {
                      _.activeBreakpoint = targetBreakpoint;
                      if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                          _.unslick(targetBreakpoint);
                      } else {
                          _.options = $.extend({}, _.originalSettings,
                              _.breakpointSettings[
                                  targetBreakpoint]);
                          if (initial === true) {
                              _.currentSlide = _.options.initialSlide;
                          }
                          _.refresh(initial);
                      }
                      triggerBreakpoint = targetBreakpoint;
                  }
              } else {
                  if (_.activeBreakpoint !== null) {
                      _.activeBreakpoint = null;
                      _.options = _.originalSettings;
                      if (initial === true) {
                          _.currentSlide = _.options.initialSlide;
                      }
                      _.refresh(initial);
                      triggerBreakpoint = targetBreakpoint;
                  }
              }

              // only trigger breakpoints during an actual break. not on initialize.
              if( !initial && triggerBreakpoint !== false ) {
                  _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
              }
          }

      };

      Slick.prototype.changeSlide = function(event, dontAnimate) {

          var _ = this,
              $target = $(event.currentTarget),
              indexOffset, slideOffset, unevenOffset;

          // If target is a link, prevent default action.
          if($target.is('a')) {
              event.preventDefault();
          }

          // If target is not the <li> element (ie: a child), find the <li>.
          if(!$target.is('li')) {
              $target = $target.closest('li');
          }

          unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
          indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

          switch (event.data.message) {

              case 'previous':
                  slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                  if (_.slideCount > _.options.slidesToShow) {
                      _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                  }
                  break;

              case 'next':
                  slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                  if (_.slideCount > _.options.slidesToShow) {
                      _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                  }
                  break;

              case 'index':
                  var index = event.data.index === 0 ? 0 :
                      event.data.index || $target.index() * _.options.slidesToScroll;

                  _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                  $target.children().trigger('focus');
                  break;

              default:
                  return;
          }

      };

      Slick.prototype.checkNavigable = function(index) {

          var _ = this,
              navigables, prevNavigable;

          navigables = _.getNavigableIndexes();
          prevNavigable = 0;
          if (index > navigables[navigables.length - 1]) {
              index = navigables[navigables.length - 1];
          } else {
              for (var n in navigables) {
                  if (index < navigables[n]) {
                      index = prevNavigable;
                      break;
                  }
                  prevNavigable = navigables[n];
              }
          }

          return index;
      };

      Slick.prototype.cleanUpEvents = function() {

          var _ = this;

          if (_.options.dots && _.$dots !== null) {

              $('li', _.$dots)
                  .off('click.slick', _.changeSlide)
                  .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
                  .off('mouseleave.slick', $.proxy(_.interrupt, _, false));

          }

          _.$slider.off('focus.slick blur.slick');

          if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
              _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
              _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
          }

          _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
          _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
          _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
          _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

          _.$list.off('click.slick', _.clickHandler);

          $(document).off(_.visibilityChange, _.visibility);

          _.cleanUpSlideEvents();

          if (_.options.accessibility === true) {
              _.$list.off('keydown.slick', _.keyHandler);
          }

          if (_.options.focusOnSelect === true) {
              $(_.$slideTrack).children().off('click.slick', _.selectHandler);
          }

          $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

          $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

          $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

          $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
          $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);

      };

      Slick.prototype.cleanUpSlideEvents = function() {

          var _ = this;

          _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
          _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));

      };

      Slick.prototype.cleanUpRows = function() {

          var _ = this, originalSlides;

          if(_.options.rows > 1) {
              originalSlides = _.$slides.children().children();
              originalSlides.removeAttr('style');
              _.$slider.empty().append(originalSlides);
          }

      };

      Slick.prototype.clickHandler = function(event) {

          var _ = this;

          if (_.shouldClick === false) {
              event.stopImmediatePropagation();
              event.stopPropagation();
              event.preventDefault();
          }

      };

      Slick.prototype.destroy = function(refresh) {

          var _ = this;

          _.autoPlayClear();

          _.touchObject = {};

          _.cleanUpEvents();

          $('.slick-cloned', _.$slider).detach();

          if (_.$dots) {
              _.$dots.remove();
          }


          if ( _.$prevArrow && _.$prevArrow.length ) {

              _.$prevArrow
                  .removeClass('slick-disabled slick-arrow slick-hidden')
                  .removeAttr('aria-hidden aria-disabled tabindex')
                  .css('display','');

              if ( _.htmlExpr.test( _.options.prevArrow )) {
                  _.$prevArrow.remove();
              }
          }

          if ( _.$nextArrow && _.$nextArrow.length ) {

              _.$nextArrow
                  .removeClass('slick-disabled slick-arrow slick-hidden')
                  .removeAttr('aria-hidden aria-disabled tabindex')
                  .css('display','');

              if ( _.htmlExpr.test( _.options.nextArrow )) {
                  _.$nextArrow.remove();
              }

          }


          if (_.$slides) {

              _.$slides
                  .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                  .removeAttr('aria-hidden')
                  .removeAttr('data-slick-index')
                  .each(function(){
                      $(this).attr('style', $(this).data('originalStyling'));
                  });

              _.$slideTrack.children(this.options.slide).detach();

              _.$slideTrack.detach();

              _.$list.detach();

              _.$slider.append(_.$slides);
          }

          _.cleanUpRows();

          _.$slider.removeClass('slick-slider');
          _.$slider.removeClass('slick-initialized');
          _.$slider.removeClass('slick-dotted');

          _.unslicked = true;

          if(!refresh) {
              _.$slider.trigger('destroy', [_]);
          }

      };

      Slick.prototype.disableTransition = function(slide) {

          var _ = this,
              transition = {};

          transition[_.transitionType] = '';

          if (_.options.fade === false) {
              _.$slideTrack.css(transition);
          } else {
              _.$slides.eq(slide).css(transition);
          }

      };

      Slick.prototype.fadeSlide = function(slideIndex, callback) {

          var _ = this;

          if (_.cssTransitions === false) {

              _.$slides.eq(slideIndex).css({
                  zIndex: _.options.zIndex
              });

              _.$slides.eq(slideIndex).animate({
                  opacity: 1
              }, _.options.speed, _.options.easing, callback);

          } else {

              _.applyTransition(slideIndex);

              _.$slides.eq(slideIndex).css({
                  opacity: 1,
                  zIndex: _.options.zIndex
              });

              if (callback) {
                  setTimeout(function() {

                      _.disableTransition(slideIndex);

                      callback.call();
                  }, _.options.speed);
              }

          }

      };

      Slick.prototype.fadeSlideOut = function(slideIndex) {

          var _ = this;

          if (_.cssTransitions === false) {

              _.$slides.eq(slideIndex).animate({
                  opacity: 0,
                  zIndex: _.options.zIndex - 2
              }, _.options.speed, _.options.easing);

          } else {

              _.applyTransition(slideIndex);

              _.$slides.eq(slideIndex).css({
                  opacity: 0,
                  zIndex: _.options.zIndex - 2
              });

          }

      };

      Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {

          var _ = this;

          if (filter !== null) {

              _.$slidesCache = _.$slides;

              _.unload();

              _.$slideTrack.children(this.options.slide).detach();

              _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

              _.reinit();

          }

      };

      Slick.prototype.focusHandler = function() {

          var _ = this;

          _.$slider
              .off('focus.slick blur.slick')
              .on('focus.slick blur.slick',
                  '*:not(.slick-arrow)', function(event) {

              event.stopImmediatePropagation();
              var $sf = $(this);

              setTimeout(function() {

                  if( _.options.pauseOnFocus ) {
                      _.focussed = $sf.is(':focus');
                      _.autoPlay();
                  }

              }, 0);

          });
      };

      Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {

          var _ = this;
          return _.currentSlide;

      };

      Slick.prototype.getDotCount = function() {

          var _ = this;

          var breakPoint = 0;
          var counter = 0;
          var pagerQty = 0;

          if (_.options.infinite === true) {
              while (breakPoint < _.slideCount) {
                  ++pagerQty;
                  breakPoint = counter + _.options.slidesToScroll;
                  counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
              }
          } else if (_.options.centerMode === true) {
              pagerQty = _.slideCount;
          } else if(!_.options.asNavFor) {
              pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
          }else {
              while (breakPoint < _.slideCount) {
                  ++pagerQty;
                  breakPoint = counter + _.options.slidesToScroll;
                  counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
              }
          }

          return pagerQty - 1;

      };

      Slick.prototype.getLeft = function(slideIndex) {

          var _ = this,
              targetLeft,
              verticalHeight,
              verticalOffset = 0,
              targetSlide;

          _.slideOffset = 0;
          verticalHeight = _.$slides.first().outerHeight(true);

          if (_.options.infinite === true) {
              if (_.slideCount > _.options.slidesToShow) {
                  _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                  verticalOffset = (verticalHeight * _.options.slidesToShow) * -1;
              }
              if (_.slideCount % _.options.slidesToScroll !== 0) {
                  if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                      if (slideIndex > _.slideCount) {
                          _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                          verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                      } else {
                          _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                          verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                      }
                  }
              }
          } else {
              if (slideIndex + _.options.slidesToShow > _.slideCount) {
                  _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                  verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
              }
          }

          if (_.slideCount <= _.options.slidesToShow) {
              _.slideOffset = 0;
              verticalOffset = 0;
          }

          if (_.options.centerMode === true && _.options.infinite === true) {
              _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
          } else if (_.options.centerMode === true) {
              _.slideOffset = 0;
              _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
          }

          if (_.options.vertical === false) {
              targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
          } else {
              targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
          }

          if (_.options.variableWidth === true) {

              if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                  targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
              } else {
                  targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
              }

              if (_.options.rtl === true) {
                  if (targetSlide[0]) {
                      targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                  } else {
                      targetLeft =  0;
                  }
              } else {
                  targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
              }

              if (_.options.centerMode === true) {
                  if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                      targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                  } else {
                      targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                  }

                  if (_.options.rtl === true) {
                      if (targetSlide[0]) {
                          targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                      } else {
                          targetLeft =  0;
                      }
                  } else {
                      targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                  }

                  targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
              }
          }

          return targetLeft;

      };

      Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {

          var _ = this;

          return _.options[option];

      };

      Slick.prototype.getNavigableIndexes = function() {

          var _ = this,
              breakPoint = 0,
              counter = 0,
              indexes = [],
              max;

          if (_.options.infinite === false) {
              max = _.slideCount;
          } else {
              breakPoint = _.options.slidesToScroll * -1;
              counter = _.options.slidesToScroll * -1;
              max = _.slideCount * 2;
          }

          while (breakPoint < max) {
              indexes.push(breakPoint);
              breakPoint = counter + _.options.slidesToScroll;
              counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
          }

          return indexes;

      };

      Slick.prototype.getSlick = function() {

          return this;

      };

      Slick.prototype.getSlideCount = function() {

          var _ = this,
              slidesTraversed, swipedSlide, centerOffset;

          centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

          if (_.options.swipeToSlide === true) {
              _.$slideTrack.find('.slick-slide').each(function(index, slide) {
                  if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
                      swipedSlide = slide;
                      return false;
                  }
              });

              slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

              return slidesTraversed;

          } else {
              return _.options.slidesToScroll;
          }

      };

      Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {

          var _ = this;

          _.changeSlide({
              data: {
                  message: 'index',
                  index: parseInt(slide)
              }
          }, dontAnimate);

      };

      Slick.prototype.init = function(creation) {

          var _ = this;

          if (!$(_.$slider).hasClass('slick-initialized')) {

              $(_.$slider).addClass('slick-initialized');

              _.buildRows();
              _.buildOut();
              _.setProps();
              _.startLoad();
              _.loadSlider();
              _.initializeEvents();
              _.updateArrows();
              _.updateDots();
              _.checkResponsive(true);
              _.focusHandler();

          }

          if (creation) {
              _.$slider.trigger('init', [_]);
          }

          if (_.options.accessibility === true) {
              _.initADA();
          }

          if ( _.options.autoplay ) {

              _.paused = false;
              _.autoPlay();

          }

      };

      Slick.prototype.initADA = function() {
          var _ = this;
          _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
              'aria-hidden': 'true',
              'tabindex': '-1'
          }).find('a, input, button, select').attr({
              'tabindex': '-1'
          });

          _.$slideTrack.attr('role', 'listbox');

          _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
              $(this).attr({
                  'role': 'option',
                  'aria-describedby': 'slick-slide' + _.instanceUid + i + ''
              });
          });

          if (_.$dots !== null) {
              _.$dots.attr('role', 'tablist').find('li').each(function(i) {
                  $(this).attr({
                      'role': 'presentation',
                      'aria-selected': 'false',
                      'aria-controls': 'navigation' + _.instanceUid + i + '',
                      'id': 'slick-slide' + _.instanceUid + i + ''
                  });
              })
                  .first().attr('aria-selected', 'true').end()
                  .find('button').attr('role', 'button').end()
                  .closest('div').attr('role', 'toolbar');
          }
          _.activateADA();

      };

      Slick.prototype.initArrowEvents = function() {

          var _ = this;

          if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
              _.$prevArrow
                 .off('click.slick')
                 .on('click.slick', {
                      message: 'previous'
                 }, _.changeSlide);
              _.$nextArrow
                 .off('click.slick')
                 .on('click.slick', {
                      message: 'next'
                 }, _.changeSlide);
          }

      };

      Slick.prototype.initDotEvents = function() {

          var _ = this;

          if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
              $('li', _.$dots).on('click.slick', {
                  message: 'index'
              }, _.changeSlide);
          }

          if ( _.options.dots === true && _.options.pauseOnDotsHover === true ) {

              $('li', _.$dots)
                  .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
                  .on('mouseleave.slick', $.proxy(_.interrupt, _, false));

          }

      };

      Slick.prototype.initSlideEvents = function() {

          var _ = this;

          if ( _.options.pauseOnHover ) {

              _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
              _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));

          }

      };

      Slick.prototype.initializeEvents = function() {

          var _ = this;

          _.initArrowEvents();

          _.initDotEvents();
          _.initSlideEvents();

          _.$list.on('touchstart.slick mousedown.slick', {
              action: 'start'
          }, _.swipeHandler);
          _.$list.on('touchmove.slick mousemove.slick', {
              action: 'move'
          }, _.swipeHandler);
          _.$list.on('touchend.slick mouseup.slick', {
              action: 'end'
          }, _.swipeHandler);
          _.$list.on('touchcancel.slick mouseleave.slick', {
              action: 'end'
          }, _.swipeHandler);

          _.$list.on('click.slick', _.clickHandler);

          $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

          if (_.options.accessibility === true) {
              _.$list.on('keydown.slick', _.keyHandler);
          }

          if (_.options.focusOnSelect === true) {
              $(_.$slideTrack).children().on('click.slick', _.selectHandler);
          }

          $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

          $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

          $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

          $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
          $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);

      };

      Slick.prototype.initUI = function() {

          var _ = this;

          if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

              _.$prevArrow.show();
              _.$nextArrow.show();

          }

          if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

              _.$dots.show();

          }

      };

      Slick.prototype.keyHandler = function(event) {

          var _ = this;
           //Dont slide if the cursor is inside the form fields and arrow keys are pressed
          if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
              if (event.keyCode === 37 && _.options.accessibility === true) {
                  _.changeSlide({
                      data: {
                          message: _.options.rtl === true ? 'next' :  'previous'
                      }
                  });
              } else if (event.keyCode === 39 && _.options.accessibility === true) {
                  _.changeSlide({
                      data: {
                          message: _.options.rtl === true ? 'previous' : 'next'
                      }
                  });
              }
          }

      };

      Slick.prototype.lazyLoad = function() {

          var _ = this,
              loadRange, cloneRange, rangeStart, rangeEnd;

          function loadImages(imagesScope) {

              $('img[data-lazy]', imagesScope).each(function() {

                  var image = $(this),
                      imageSource = $(this).attr('data-lazy'),
                      imageToLoad = document.createElement('img');

                  imageToLoad.onload = function() {

                      image
                          .animate({ opacity: 0 }, 100, function() {
                              image
                                  .attr('src', imageSource)
                                  .animate({ opacity: 1 }, 200, function() {
                                      image
                                          .removeAttr('data-lazy')
                                          .removeClass('slick-loading');
                                  });
                              _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                          });

                  };

                  imageToLoad.onerror = function() {

                      image
                          .removeAttr( 'data-lazy' )
                          .removeClass( 'slick-loading' )
                          .addClass( 'slick-lazyload-error' );

                      _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                  };

                  imageToLoad.src = imageSource;

              });

          }

          if (_.options.centerMode === true) {
              if (_.options.infinite === true) {
                  rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                  rangeEnd = rangeStart + _.options.slidesToShow + 2;
              } else {
                  rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                  rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
              }
          } else {
              rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
              rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
              if (_.options.fade === true) {
                  if (rangeStart > 0) rangeStart--;
                  if (rangeEnd <= _.slideCount) rangeEnd++;
              }
          }

          loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
          loadImages(loadRange);

          if (_.slideCount <= _.options.slidesToShow) {
              cloneRange = _.$slider.find('.slick-slide');
              loadImages(cloneRange);
          } else
          if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
              cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
              loadImages(cloneRange);
          } else if (_.currentSlide === 0) {
              cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
              loadImages(cloneRange);
          }

      };

      Slick.prototype.loadSlider = function() {

          var _ = this;

          _.setPosition();

          _.$slideTrack.css({
              opacity: 1
          });

          _.$slider.removeClass('slick-loading');

          _.initUI();

          if (_.options.lazyLoad === 'progressive') {
              _.progressiveLazyLoad();
          }

      };

      Slick.prototype.next = Slick.prototype.slickNext = function() {

          var _ = this;

          _.changeSlide({
              data: {
                  message: 'next'
              }
          });

      };

      Slick.prototype.orientationChange = function() {

          var _ = this;

          _.checkResponsive();
          _.setPosition();

      };

      Slick.prototype.pause = Slick.prototype.slickPause = function() {

          var _ = this;

          _.autoPlayClear();
          _.paused = true;

      };

      Slick.prototype.play = Slick.prototype.slickPlay = function() {

          var _ = this;

          _.autoPlay();
          _.options.autoplay = true;
          _.paused = false;
          _.focussed = false;
          _.interrupted = false;

      };

      Slick.prototype.postSlide = function(index) {

          var _ = this;

          if( !_.unslicked ) {

              _.$slider.trigger('afterChange', [_, index]);

              _.animating = false;

              _.setPosition();

              _.swipeLeft = null;

              if ( _.options.autoplay ) {
                  _.autoPlay();
              }

              if (_.options.accessibility === true) {
                  _.initADA();
              }

          }

      };

      Slick.prototype.prev = Slick.prototype.slickPrev = function() {

          var _ = this;

          _.changeSlide({
              data: {
                  message: 'previous'
              }
          });

      };

      Slick.prototype.preventDefault = function(event) {

          event.preventDefault();

      };

      Slick.prototype.progressiveLazyLoad = function( tryCount ) {

          tryCount = tryCount || 1;

          var _ = this,
              $imgsToLoad = $( 'img[data-lazy]', _.$slider ),
              image,
              imageSource,
              imageToLoad;

          if ( $imgsToLoad.length ) {

              image = $imgsToLoad.first();
              imageSource = image.attr('data-lazy');
              imageToLoad = document.createElement('img');

              imageToLoad.onload = function() {

                  image
                      .attr( 'src', imageSource )
                      .removeAttr('data-lazy')
                      .removeClass('slick-loading');

                  if ( _.options.adaptiveHeight === true ) {
                      _.setPosition();
                  }

                  _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);
                  _.progressiveLazyLoad();

              };

              imageToLoad.onerror = function() {

                  if ( tryCount < 3 ) {

                      /**
                       * try to load the image 3 times,
                       * leave a slight delay so we don't get
                       * servers blocking the request.
                       */
                      setTimeout( function() {
                          _.progressiveLazyLoad( tryCount + 1 );
                      }, 500 );

                  } else {

                      image
                          .removeAttr( 'data-lazy' )
                          .removeClass( 'slick-loading' )
                          .addClass( 'slick-lazyload-error' );

                      _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                      _.progressiveLazyLoad();

                  }

              };

              imageToLoad.src = imageSource;

          } else {

              _.$slider.trigger('allImagesLoaded', [ _ ]);

          }

      };

      Slick.prototype.refresh = function( initializing ) {

          var _ = this, currentSlide, lastVisibleIndex;

          lastVisibleIndex = _.slideCount - _.options.slidesToShow;

          // in non-infinite sliders, we don't want to go past the
          // last visible index.
          if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
              _.currentSlide = lastVisibleIndex;
          }

          // if less slides than to show, go to start.
          if ( _.slideCount <= _.options.slidesToShow ) {
              _.currentSlide = 0;

          }

          currentSlide = _.currentSlide;

          _.destroy(true);

          $.extend(_, _.initials, { currentSlide: currentSlide });

          _.init();

          if( !initializing ) {

              _.changeSlide({
                  data: {
                      message: 'index',
                      index: currentSlide
                  }
              }, false);

          }

      };

      Slick.prototype.registerBreakpoints = function() {

          var _ = this, breakpoint, currentBreakpoint, l,
              responsiveSettings = _.options.responsive || null;

          if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {

              _.respondTo = _.options.respondTo || 'window';

              for ( breakpoint in responsiveSettings ) {

                  l = _.breakpoints.length-1;
                  currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                  if (responsiveSettings.hasOwnProperty(breakpoint)) {

                      // loop through the breakpoints and cut out any existing
                      // ones with the same breakpoint number, we don't want dupes.
                      while( l >= 0 ) {
                          if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
                              _.breakpoints.splice(l,1);
                          }
                          l--;
                      }

                      _.breakpoints.push(currentBreakpoint);
                      _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;

                  }

              }

              _.breakpoints.sort(function(a, b) {
                  return ( _.options.mobileFirst ) ? a-b : b-a;
              });

          }

      };

      Slick.prototype.reinit = function() {

          var _ = this;

          _.$slides =
              _.$slideTrack
                  .children(_.options.slide)
                  .addClass('slick-slide');

          _.slideCount = _.$slides.length;

          if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
              _.currentSlide = _.currentSlide - _.options.slidesToScroll;
          }

          if (_.slideCount <= _.options.slidesToShow) {
              _.currentSlide = 0;
          }

          _.registerBreakpoints();

          _.setProps();
          _.setupInfinite();
          _.buildArrows();
          _.updateArrows();
          _.initArrowEvents();
          _.buildDots();
          _.updateDots();
          _.initDotEvents();
          _.cleanUpSlideEvents();
          _.initSlideEvents();

          _.checkResponsive(false, true);

          if (_.options.focusOnSelect === true) {
              $(_.$slideTrack).children().on('click.slick', _.selectHandler);
          }

          _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

          _.setPosition();
          _.focusHandler();

          _.paused = !_.options.autoplay;
          _.autoPlay();

          _.$slider.trigger('reInit', [_]);

      };

      Slick.prototype.resize = function() {

          var _ = this;

          if ($(window).width() !== _.windowWidth) {
              clearTimeout(_.windowDelay);
              _.windowDelay = window.setTimeout(function() {
                  _.windowWidth = $(window).width();
                  _.checkResponsive();
                  if( !_.unslicked ) { _.setPosition(); }
              }, 50);
          }
      };

      Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {

          var _ = this;

          if (typeof(index) === 'boolean') {
              removeBefore = index;
              index = removeBefore === true ? 0 : _.slideCount - 1;
          } else {
              index = removeBefore === true ? --index : index;
          }

          if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
              return false;
          }

          _.unload();

          if (removeAll === true) {
              _.$slideTrack.children().remove();
          } else {
              _.$slideTrack.children(this.options.slide).eq(index).remove();
          }

          _.$slides = _.$slideTrack.children(this.options.slide);

          _.$slideTrack.children(this.options.slide).detach();

          _.$slideTrack.append(_.$slides);

          _.$slidesCache = _.$slides;

          _.reinit();

      };

      Slick.prototype.setCSS = function(position) {

          var _ = this,
              positionProps = {},
              x, y;

          if (_.options.rtl === true) {
              position = -position;
          }
          x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
          y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

          positionProps[_.positionProp] = position;

          if (_.transformsEnabled === false) {
              _.$slideTrack.css(positionProps);
          } else {
              positionProps = {};
              if (_.cssTransitions === false) {
                  positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                  _.$slideTrack.css(positionProps);
              } else {
                  positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                  _.$slideTrack.css(positionProps);
              }
          }

      };

      Slick.prototype.setDimensions = function() {

          var _ = this;

          if (_.options.vertical === false) {
              if (_.options.centerMode === true) {
                  _.$list.css({
                      padding: ('0px ' + _.options.centerPadding)
                  });
              }
          } else {
              _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
              if (_.options.centerMode === true) {
                  _.$list.css({
                      padding: (_.options.centerPadding + ' 0px')
                  });
              }
          }

          _.listWidth = _.$list.width();
          _.listHeight = _.$list.height();


          if (_.options.vertical === false && _.options.variableWidth === false) {
              _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
              _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));

          } else if (_.options.variableWidth === true) {
              _.$slideTrack.width(5000 * _.slideCount);
          } else {
              _.slideWidth = Math.ceil(_.listWidth);
              _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
          }

          var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
          if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);

      };

      Slick.prototype.setFade = function() {

          var _ = this,
              targetLeft;

          _.$slides.each(function(index, element) {
              targetLeft = (_.slideWidth * index) * -1;
              if (_.options.rtl === true) {
                  $(element).css({
                      position: 'relative',
                      right: targetLeft,
                      top: 0,
                      zIndex: _.options.zIndex - 2,
                      opacity: 0
                  });
              } else {
                  $(element).css({
                      position: 'relative',
                      left: targetLeft,
                      top: 0,
                      zIndex: _.options.zIndex - 2,
                      opacity: 0
                  });
              }
          });

          _.$slides.eq(_.currentSlide).css({
              zIndex: _.options.zIndex - 1,
              opacity: 1
          });

      };

      Slick.prototype.setHeight = function() {

          var _ = this;

          if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
              var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
              _.$list.css('height', targetHeight);
          }

      };

      Slick.prototype.setOption =
      Slick.prototype.slickSetOption = function() {

          /**
           * accepts arguments in format of:
           *
           *  - for changing a single option's value:
           *     .slick("setOption", option, value, refresh )
           *
           *  - for changing a set of responsive options:
           *     .slick("setOption", 'responsive', [{}, ...], refresh )
           *
           *  - for updating multiple values at once (not responsive)
           *     .slick("setOption", { 'option': value, ... }, refresh )
           */

          var _ = this, l, item, option, value, refresh = false, type;

          if( $.type( arguments[0] ) === 'object' ) {

              option =  arguments[0];
              refresh = arguments[1];
              type = 'multiple';

          } else if ( $.type( arguments[0] ) === 'string' ) {

              option =  arguments[0];
              value = arguments[1];
              refresh = arguments[2];

              if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {

                  type = 'responsive';

              } else if ( typeof arguments[1] !== 'undefined' ) {

                  type = 'single';

              }

          }

          if ( type === 'single' ) {

              _.options[option] = value;


          } else if ( type === 'multiple' ) {

              $.each( option , function( opt, val ) {

                  _.options[opt] = val;

              });


          } else if ( type === 'responsive' ) {

              for ( item in value ) {

                  if( $.type( _.options.responsive ) !== 'array' ) {

                      _.options.responsive = [ value[item] ];

                  } else {

                      l = _.options.responsive.length-1;

                      // loop through the responsive object and splice out duplicates.
                      while( l >= 0 ) {

                          if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {

                              _.options.responsive.splice(l,1);

                          }

                          l--;

                      }

                      _.options.responsive.push( value[item] );

                  }

              }

          }

          if ( refresh ) {

              _.unload();
              _.reinit();

          }

      };

      Slick.prototype.setPosition = function() {

          var _ = this;

          _.setDimensions();

          _.setHeight();

          if (_.options.fade === false) {
              _.setCSS(_.getLeft(_.currentSlide));
          } else {
              _.setFade();
          }

          _.$slider.trigger('setPosition', [_]);

      };

      Slick.prototype.setProps = function() {

          var _ = this,
              bodyStyle = document.body.style;

          _.positionProp = _.options.vertical === true ? 'top' : 'left';

          if (_.positionProp === 'top') {
              _.$slider.addClass('slick-vertical');
          } else {
              _.$slider.removeClass('slick-vertical');
          }

          if (bodyStyle.WebkitTransition !== undefined ||
              bodyStyle.MozTransition !== undefined ||
              bodyStyle.msTransition !== undefined) {
              if (_.options.useCSS === true) {
                  _.cssTransitions = true;
              }
          }

          if ( _.options.fade ) {
              if ( typeof _.options.zIndex === 'number' ) {
                  if( _.options.zIndex < 3 ) {
                      _.options.zIndex = 3;
                  }
              } else {
                  _.options.zIndex = _.defaults.zIndex;
              }
          }

          if (bodyStyle.OTransform !== undefined) {
              _.animType = 'OTransform';
              _.transformType = '-o-transform';
              _.transitionType = 'OTransition';
              if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
          }
          if (bodyStyle.MozTransform !== undefined) {
              _.animType = 'MozTransform';
              _.transformType = '-moz-transform';
              _.transitionType = 'MozTransition';
              if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
          }
          if (bodyStyle.webkitTransform !== undefined) {
              _.animType = 'webkitTransform';
              _.transformType = '-webkit-transform';
              _.transitionType = 'webkitTransition';
              if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
          }
          if (bodyStyle.msTransform !== undefined) {
              _.animType = 'msTransform';
              _.transformType = '-ms-transform';
              _.transitionType = 'msTransition';
              if (bodyStyle.msTransform === undefined) _.animType = false;
          }
          if (bodyStyle.transform !== undefined && _.animType !== false) {
              _.animType = 'transform';
              _.transformType = 'transform';
              _.transitionType = 'transition';
          }
          _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
      };


      Slick.prototype.setSlideClasses = function(index) {

          var _ = this,
              centerOffset, allSlides, indexOffset, remainder;

          allSlides = _.$slider
              .find('.slick-slide')
              .removeClass('slick-active slick-center slick-current')
              .attr('aria-hidden', 'true');

          _.$slides
              .eq(index)
              .addClass('slick-current');

          if (_.options.centerMode === true) {

              centerOffset = Math.floor(_.options.slidesToShow / 2);

              if (_.options.infinite === true) {

                  if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {

                      _.$slides
                          .slice(index - centerOffset, index + centerOffset + 1)
                          .addClass('slick-active')
                          .attr('aria-hidden', 'false');

                  } else {

                      indexOffset = _.options.slidesToShow + index;
                      allSlides
                          .slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2)
                          .addClass('slick-active')
                          .attr('aria-hidden', 'false');

                  }

                  if (index === 0) {

                      allSlides
                          .eq(allSlides.length - 1 - _.options.slidesToShow)
                          .addClass('slick-center');

                  } else if (index === _.slideCount - 1) {

                      allSlides
                          .eq(_.options.slidesToShow)
                          .addClass('slick-center');

                  }

              }

              _.$slides
                  .eq(index)
                  .addClass('slick-center');

          } else {

              if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {

                  _.$slides
                      .slice(index, index + _.options.slidesToShow)
                      .addClass('slick-active')
                      .attr('aria-hidden', 'false');

              } else if (allSlides.length <= _.options.slidesToShow) {

                  allSlides
                      .addClass('slick-active')
                      .attr('aria-hidden', 'false');

              } else {

                  remainder = _.slideCount % _.options.slidesToShow;
                  indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                  if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {

                      allSlides
                          .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                          .addClass('slick-active')
                          .attr('aria-hidden', 'false');

                  } else {

                      allSlides
                          .slice(indexOffset, indexOffset + _.options.slidesToShow)
                          .addClass('slick-active')
                          .attr('aria-hidden', 'false');

                  }

              }

          }

          if (_.options.lazyLoad === 'ondemand') {
              _.lazyLoad();
          }

      };

      Slick.prototype.setupInfinite = function() {

          var _ = this,
              i, slideIndex, infiniteCount;

          if (_.options.fade === true) {
              _.options.centerMode = false;
          }

          if (_.options.infinite === true && _.options.fade === false) {

              slideIndex = null;

              if (_.slideCount > _.options.slidesToShow) {

                  if (_.options.centerMode === true) {
                      infiniteCount = _.options.slidesToShow + 1;
                  } else {
                      infiniteCount = _.options.slidesToShow;
                  }

                  for (i = _.slideCount; i > (_.slideCount -
                          infiniteCount); i -= 1) {
                      slideIndex = i - 1;
                      $(_.$slides[slideIndex]).clone(true).attr('id', '')
                          .attr('data-slick-index', slideIndex - _.slideCount)
                          .prependTo(_.$slideTrack).addClass('slick-cloned');
                  }
                  for (i = 0; i < infiniteCount; i += 1) {
                      slideIndex = i;
                      $(_.$slides[slideIndex]).clone(true).attr('id', '')
                          .attr('data-slick-index', slideIndex + _.slideCount)
                          .appendTo(_.$slideTrack).addClass('slick-cloned');
                  }
                  _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
                      $(this).attr('id', '');
                  });

              }

          }

      };

      Slick.prototype.interrupt = function( toggle ) {

          var _ = this;

          if( !toggle ) {
              _.autoPlay();
          }
          _.interrupted = toggle;

      };

      Slick.prototype.selectHandler = function(event) {

          var _ = this;

          var targetElement =
              $(event.target).is('.slick-slide') ?
                  $(event.target) :
                  $(event.target).parents('.slick-slide');

          var index = parseInt(targetElement.attr('data-slick-index'));

          if (!index) index = 0;

          if (_.slideCount <= _.options.slidesToShow) {

              _.setSlideClasses(index);
              _.asNavFor(index);
              return;

          }

          _.slideHandler(index);

      };

      Slick.prototype.slideHandler = function(index, sync, dontAnimate) {

          var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
              _ = this, navTarget;

          sync = sync || false;

          if (_.animating === true && _.options.waitForAnimate === true) {
              return;
          }

          if (_.options.fade === true && _.currentSlide === index) {
              return;
          }

          if (_.slideCount <= _.options.slidesToShow) {
              return;
          }

          if (sync === false) {
              _.asNavFor(index);
          }

          targetSlide = index;
          targetLeft = _.getLeft(targetSlide);
          slideLeft = _.getLeft(_.currentSlide);

          _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

          if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
              if (_.options.fade === false) {
                  targetSlide = _.currentSlide;
                  if (dontAnimate !== true) {
                      _.animateSlide(slideLeft, function() {
                          _.postSlide(targetSlide);
                      });
                  } else {
                      _.postSlide(targetSlide);
                  }
              }
              return;
          } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
              if (_.options.fade === false) {
                  targetSlide = _.currentSlide;
                  if (dontAnimate !== true) {
                      _.animateSlide(slideLeft, function() {
                          _.postSlide(targetSlide);
                      });
                  } else {
                      _.postSlide(targetSlide);
                  }
              }
              return;
          }

          if ( _.options.autoplay ) {
              clearInterval(_.autoPlayTimer);
          }

          if (targetSlide < 0) {
              if (_.slideCount % _.options.slidesToScroll !== 0) {
                  animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
              } else {
                  animSlide = _.slideCount + targetSlide;
              }
          } else if (targetSlide >= _.slideCount) {
              if (_.slideCount % _.options.slidesToScroll !== 0) {
                  animSlide = 0;
              } else {
                  animSlide = targetSlide - _.slideCount;
              }
          } else {
              animSlide = targetSlide;
          }

          _.animating = true;

          _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

          oldSlide = _.currentSlide;
          _.currentSlide = animSlide;

          _.setSlideClasses(_.currentSlide);

          if ( _.options.asNavFor ) {

              navTarget = _.getNavTarget();
              navTarget = navTarget.slick('getSlick');

              if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {
                  navTarget.setSlideClasses(_.currentSlide);
              }

          }

          _.updateDots();
          _.updateArrows();

          if (_.options.fade === true) {
              if (dontAnimate !== true) {

                  _.fadeSlideOut(oldSlide);

                  _.fadeSlide(animSlide, function() {
                      _.postSlide(animSlide);
                  });

              } else {
                  _.postSlide(animSlide);
              }
              _.animateHeight();
              return;
          }

          if (dontAnimate !== true) {
              _.animateSlide(targetLeft, function() {
                  _.postSlide(animSlide);
              });
          } else {
              _.postSlide(animSlide);
          }

      };

      Slick.prototype.startLoad = function() {

          var _ = this;

          if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

              _.$prevArrow.hide();
              _.$nextArrow.hide();

          }

          if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

              _.$dots.hide();

          }

          _.$slider.addClass('slick-loading');

      };

      Slick.prototype.swipeDirection = function() {

          var xDist, yDist, r, swipeAngle, _ = this;

          xDist = _.touchObject.startX - _.touchObject.curX;
          yDist = _.touchObject.startY - _.touchObject.curY;
          r = Math.atan2(yDist, xDist);

          swipeAngle = Math.round(r * 180 / Math.PI);
          if (swipeAngle < 0) {
              swipeAngle = 360 - Math.abs(swipeAngle);
          }

          if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
              return (_.options.rtl === false ? 'left' : 'right');
          }
          if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
              return (_.options.rtl === false ? 'left' : 'right');
          }
          if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
              return (_.options.rtl === false ? 'right' : 'left');
          }
          if (_.options.verticalSwiping === true) {
              if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                  return 'down';
              } else {
                  return 'up';
              }
          }

          return 'vertical';

      };

      Slick.prototype.swipeEnd = function(event) {

          var _ = this,
              slideCount,
              direction;

          _.dragging = false;
          _.interrupted = false;
          _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;

          if ( _.touchObject.curX === undefined ) {
              return false;
          }

          if ( _.touchObject.edgeHit === true ) {
              _.$slider.trigger('edge', [_, _.swipeDirection() ]);
          }

          if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {

              direction = _.swipeDirection();

              switch ( direction ) {

                  case 'left':
                  case 'down':

                      slideCount =
                          _.options.swipeToSlide ?
                              _.checkNavigable( _.currentSlide + _.getSlideCount() ) :
                              _.currentSlide + _.getSlideCount();

                      _.currentDirection = 0;

                      break;

                  case 'right':
                  case 'up':

                      slideCount =
                          _.options.swipeToSlide ?
                              _.checkNavigable( _.currentSlide - _.getSlideCount() ) :
                              _.currentSlide - _.getSlideCount();

                      _.currentDirection = 1;

                      break;

                  default:


              }

              if( direction != 'vertical' ) {

                  _.slideHandler( slideCount );
                  _.touchObject = {};
                  _.$slider.trigger('swipe', [_, direction ]);

              }

          } else {

              if ( _.touchObject.startX !== _.touchObject.curX ) {

                  _.slideHandler( _.currentSlide );
                  _.touchObject = {};

              }

          }

      };

      Slick.prototype.swipeHandler = function(event) {

          var _ = this;

          if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
              return;
          } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
              return;
          }

          _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
              event.originalEvent.touches.length : 1;

          _.touchObject.minSwipe = _.listWidth / _.options
              .touchThreshold;

          if (_.options.verticalSwiping === true) {
              _.touchObject.minSwipe = _.listHeight / _.options
                  .touchThreshold;
          }

          switch (event.data.action) {

              case 'start':
                  _.swipeStart(event);
                  break;

              case 'move':
                  _.swipeMove(event);
                  break;

              case 'end':
                  _.swipeEnd(event);
                  break;

          }

      };

      Slick.prototype.swipeMove = function(event) {

          var _ = this,
              edgeWasHit = false,
              curLeft, swipeDirection, swipeLength, positionOffset, touches;

          touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

          if (!_.dragging || touches && touches.length !== 1) {
              return false;
          }

          curLeft = _.getLeft(_.currentSlide);

          _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
          _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

          _.touchObject.swipeLength = Math.round(Math.sqrt(
              Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

          if (_.options.verticalSwiping === true) {
              _.touchObject.swipeLength = Math.round(Math.sqrt(
                  Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
          }

          swipeDirection = _.swipeDirection();

          if (swipeDirection === 'vertical') {
              return;
          }

          if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
              event.preventDefault();
          }

          positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
          if (_.options.verticalSwiping === true) {
              positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
          }


          swipeLength = _.touchObject.swipeLength;

          _.touchObject.edgeHit = false;

          if (_.options.infinite === false) {
              if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                  swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                  _.touchObject.edgeHit = true;
              }
          }

          if (_.options.vertical === false) {
              _.swipeLeft = curLeft + swipeLength * positionOffset;
          } else {
              _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
          }
          if (_.options.verticalSwiping === true) {
              _.swipeLeft = curLeft + swipeLength * positionOffset;
          }

          if (_.options.fade === true || _.options.touchMove === false) {
              return false;
          }

          if (_.animating === true) {
              _.swipeLeft = null;
              return false;
          }

          _.setCSS(_.swipeLeft);

      };

      Slick.prototype.swipeStart = function(event) {

          var _ = this,
              touches;

          _.interrupted = true;

          if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
              _.touchObject = {};
              return false;
          }

          if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
              touches = event.originalEvent.touches[0];
          }

          _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
          _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

          _.dragging = true;

      };

      Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {

          var _ = this;

          if (_.$slidesCache !== null) {

              _.unload();

              _.$slideTrack.children(this.options.slide).detach();

              _.$slidesCache.appendTo(_.$slideTrack);

              _.reinit();

          }

      };

      Slick.prototype.unload = function() {

          var _ = this;

          $('.slick-cloned', _.$slider).remove();

          if (_.$dots) {
              _.$dots.remove();
          }

          if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
              _.$prevArrow.remove();
          }

          if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
              _.$nextArrow.remove();
          }

          _.$slides
              .removeClass('slick-slide slick-active slick-visible slick-current')
              .attr('aria-hidden', 'true')
              .css('width', '');

      };

      Slick.prototype.unslick = function(fromBreakpoint) {

          var _ = this;
          _.$slider.trigger('unslick', [_, fromBreakpoint]);
          _.destroy();

      };

      Slick.prototype.updateArrows = function() {

          var _ = this,
              centerOffset;

          centerOffset = Math.floor(_.options.slidesToShow / 2);

          if ( _.options.arrows === true &&
              _.slideCount > _.options.slidesToShow &&
              !_.options.infinite ) {

              _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
              _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

              if (_.currentSlide === 0) {

                  _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                  _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

              } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                  _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                  _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

              } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                  _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                  _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

              }

          }

      };

      Slick.prototype.updateDots = function() {

          var _ = this;

          if (_.$dots !== null) {

              _.$dots
                  .find('li')
                  .removeClass('slick-active')
                  .attr('aria-hidden', 'true');

              _.$dots
                  .find('li')
                  .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                  .addClass('slick-active')
                  .attr('aria-hidden', 'false');

          }

      };

      Slick.prototype.visibility = function() {

          var _ = this;

          if ( _.options.autoplay ) {

              if ( document[_.hidden] ) {

                  _.interrupted = true;

              } else {

                  _.interrupted = false;

              }

          }

      };

      $.fn.slick = function() {
          var _ = this,
              opt = arguments[0],
              args = Array.prototype.slice.call(arguments, 1),
              l = _.length,
              i,
              ret;
          for (i = 0; i < l; i++) {
              if (typeof opt == 'object' || typeof opt == 'undefined')
                  _[i].slick = new Slick(_[i], opt);
              else
                  ret = _[i].slick[opt].apply(_[i].slick, args);
              if (typeof ret != 'undefined') return ret;
          }
          return _;
      };

  }));


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Module dependencies.
   */

  var Emitter = __webpack_require__(176);
  var reduce = __webpack_require__(178);
  var requestBase = __webpack_require__(181);
  var isObject = __webpack_require__(126);

  /**
   * Root reference for iframes.
   */

  var root;
  if (typeof window !== 'undefined') { // Browser window
    root = window;
  } else if (typeof self !== 'undefined') { // Web Worker
    root = self;
  } else { // Other environments
    root = this;
  }

  /**
   * Noop.
   */

  function noop(){};

  /**
   * Expose `request`.
   */

  var request = module.exports = __webpack_require__(182).bind(null, Request);

  /**
   * Determine XHR.
   */

  request.getXHR = function () {
    if (root.XMLHttpRequest
        && (!root.location || 'file:' != root.location.protocol
            || !root.ActiveXObject)) {
      return new XMLHttpRequest;
    } else {
      try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
      try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
      try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
      try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
    }
    return false;
  };

  /**
   * Removes leading and trailing whitespace, added to support IE.
   *
   * @param {String} s
   * @return {String}
   * @api private
   */

  var trim = ''.trim
    ? function(s) { return s.trim(); }
    : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

  /**
   * Serialize the given `obj`.
   *
   * @param {Object} obj
   * @return {String}
   * @api private
   */

  function serialize(obj) {
    if (!isObject(obj)) return obj;
    var pairs = [];
    for (var key in obj) {
      if (null != obj[key]) {
        pushEncodedKeyValuePair(pairs, key, obj[key]);
      }
    }
    return pairs.join('&');
  }

  /**
   * Helps 'serialize' with serializing arrays.
   * Mutates the pairs array.
   *
   * @param {Array} pairs
   * @param {String} key
   * @param {Mixed} val
   */

  function pushEncodedKeyValuePair(pairs, key, val) {
    if (Array.isArray(val)) {
      return val.forEach(function(v) {
        pushEncodedKeyValuePair(pairs, key, v);
      });
    } else if (isObject(val)) {
      for(var subkey in val) {
        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
      }
      return;
    }
    pairs.push(encodeURIComponent(key)
      + '=' + encodeURIComponent(val));
  }

  /**
   * Expose serialization method.
   */

   request.serializeObject = serialize;

   /**
    * Parse the given x-www-form-urlencoded `str`.
    *
    * @param {String} str
    * @return {Object}
    * @api private
    */

  function parseString(str) {
    var obj = {};
    var pairs = str.split('&');
    var pair;
    var pos;

    for (var i = 0, len = pairs.length; i < len; ++i) {
      pair = pairs[i];
      pos = pair.indexOf('=');
      if (pos == -1) {
        obj[decodeURIComponent(pair)] = '';
      } else {
        obj[decodeURIComponent(pair.slice(0, pos))] =
          decodeURIComponent(pair.slice(pos + 1));
      }
    }

    return obj;
  }

  /**
   * Expose parser.
   */

  request.parseString = parseString;

  /**
   * Default MIME type map.
   *
   *     superagent.types.xml = 'application/xml';
   *
   */

  request.types = {
    html: 'text/html',
    json: 'application/json',
    xml: 'application/xml',
    urlencoded: 'application/x-www-form-urlencoded',
    'form': 'application/x-www-form-urlencoded',
    'form-data': 'application/x-www-form-urlencoded'
  };

  /**
   * Default serialization map.
   *
   *     superagent.serialize['application/xml'] = function(obj){
   *       return 'generated xml here';
   *     };
   *
   */

   request.serialize = {
     'application/x-www-form-urlencoded': serialize,
     'application/json': JSON.stringify
   };

   /**
    * Default parsers.
    *
    *     superagent.parse['application/xml'] = function(str){
    *       return { object parsed from str };
    *     };
    *
    */

  request.parse = {
    'application/x-www-form-urlencoded': parseString,
    'application/json': JSON.parse
  };

  /**
   * Parse the given header `str` into
   * an object containing the mapped fields.
   *
   * @param {String} str
   * @return {Object}
   * @api private
   */

  function parseHeader(str) {
    var lines = str.split(/\r?\n/);
    var fields = {};
    var index;
    var line;
    var field;
    var val;

    lines.pop(); // trailing CRLF

    for (var i = 0, len = lines.length; i < len; ++i) {
      line = lines[i];
      index = line.indexOf(':');
      field = line.slice(0, index).toLowerCase();
      val = trim(line.slice(index + 1));
      fields[field] = val;
    }

    return fields;
  }

  /**
   * Check if `mime` is json or has +json structured syntax suffix.
   *
   * @param {String} mime
   * @return {Boolean}
   * @api private
   */

  function isJSON(mime) {
    return /[\/+]json\b/.test(mime);
  }

  /**
   * Return the mime type for the given `str`.
   *
   * @param {String} str
   * @return {String}
   * @api private
   */

  function type(str){
    return str.split(/ *; */).shift();
  };

  /**
   * Return header field parameters.
   *
   * @param {String} str
   * @return {Object}
   * @api private
   */

  function params(str){
    return reduce(str.split(/ *; */), function(obj, str){
      var parts = str.split(/ *= */)
        , key = parts.shift()
        , val = parts.shift();

      if (key && val) obj[key] = val;
      return obj;
    }, {});
  };

  /**
   * Initialize a new `Response` with the given `xhr`.
   *
   *  - set flags (.ok, .error, etc)
   *  - parse header
   *
   * Examples:
   *
   *  Aliasing `superagent` as `request` is nice:
   *
   *      request = superagent;
   *
   *  We can use the promise-like API, or pass callbacks:
   *
   *      request.get('/').end(function(res){});
   *      request.get('/', function(res){});
   *
   *  Sending data can be chained:
   *
   *      request
   *        .post('/user')
   *        .send({ name: 'tj' })
   *        .end(function(res){});
   *
   *  Or passed to `.send()`:
   *
   *      request
   *        .post('/user')
   *        .send({ name: 'tj' }, function(res){});
   *
   *  Or passed to `.post()`:
   *
   *      request
   *        .post('/user', { name: 'tj' })
   *        .end(function(res){});
   *
   * Or further reduced to a single call for simple cases:
   *
   *      request
   *        .post('/user', { name: 'tj' }, function(res){});
   *
   * @param {XMLHTTPRequest} xhr
   * @param {Object} options
   * @api private
   */

  function Response(req, options) {
    options = options || {};
    this.req = req;
    this.xhr = this.req.xhr;
    // responseText is accessible only if responseType is '' or 'text' and on older browsers
    this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
       ? this.xhr.responseText
       : null;
    this.statusText = this.req.xhr.statusText;
    this._setStatusProperties(this.xhr.status);
    this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
    // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
    // getResponseHeader still works. so we get content-type even if getting
    // other headers fails.
    this.header['content-type'] = this.xhr.getResponseHeader('content-type');
    this._setHeaderProperties(this.header);
    this.body = this.req.method != 'HEAD'
      ? this._parseBody(this.text ? this.text : this.xhr.response)
      : null;
  }

  /**
   * Get case-insensitive `field` value.
   *
   * @param {String} field
   * @return {String}
   * @api public
   */

  Response.prototype.get = function(field){
    return this.header[field.toLowerCase()];
  };

  /**
   * Set header related properties:
   *
   *   - `.type` the content type without params
   *
   * A response of "Content-Type: text/plain; charset=utf-8"
   * will provide you with a `.type` of "text/plain".
   *
   * @param {Object} header
   * @api private
   */

  Response.prototype._setHeaderProperties = function(header){
    // content-type
    var ct = this.header['content-type'] || '';
    this.type = type(ct);

    // params
    var obj = params(ct);
    for (var key in obj) this[key] = obj[key];
  };

  /**
   * Parse the given body `str`.
   *
   * Used for auto-parsing of bodies. Parsers
   * are defined on the `superagent.parse` object.
   *
   * @param {String} str
   * @return {Mixed}
   * @api private
   */

  Response.prototype._parseBody = function(str){
    var parse = request.parse[this.type];
    if (!parse && isJSON(this.type)) {
      parse = request.parse['application/json'];
    }
    return parse && str && (str.length || str instanceof Object)
      ? parse(str)
      : null;
  };

  /**
   * Set flags such as `.ok` based on `status`.
   *
   * For example a 2xx response will give you a `.ok` of __true__
   * whereas 5xx will be __false__ and `.error` will be __true__. The
   * `.clientError` and `.serverError` are also available to be more
   * specific, and `.statusType` is the class of error ranging from 1..5
   * sometimes useful for mapping respond colors etc.
   *
   * "sugar" properties are also defined for common cases. Currently providing:
   *
   *   - .noContent
   *   - .badRequest
   *   - .unauthorized
   *   - .notAcceptable
   *   - .notFound
   *
   * @param {Number} status
   * @api private
   */

  Response.prototype._setStatusProperties = function(status){
    // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
    if (status === 1223) {
      status = 204;
    }

    var type = status / 100 | 0;

    // status / class
    this.status = this.statusCode = status;
    this.statusType = type;

    // basics
    this.info = 1 == type;
    this.ok = 2 == type;
    this.clientError = 4 == type;
    this.serverError = 5 == type;
    this.error = (4 == type || 5 == type)
      ? this.toError()
      : false;

    // sugar
    this.accepted = 202 == status;
    this.noContent = 204 == status;
    this.badRequest = 400 == status;
    this.unauthorized = 401 == status;
    this.notAcceptable = 406 == status;
    this.notFound = 404 == status;
    this.forbidden = 403 == status;
  };

  /**
   * Return an `Error` representative of this response.
   *
   * @return {Error}
   * @api public
   */

  Response.prototype.toError = function(){
    var req = this.req;
    var method = req.method;
    var url = req.url;

    var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
    var err = new Error(msg);
    err.status = this.status;
    err.method = method;
    err.url = url;

    return err;
  };

  /**
   * Expose `Response`.
   */

  request.Response = Response;

  /**
   * Initialize a new `Request` with the given `method` and `url`.
   *
   * @param {String} method
   * @param {String} url
   * @api public
   */

  function Request(method, url) {
    var self = this;
    this._query = this._query || [];
    this.method = method;
    this.url = url;
    this.header = {}; // preserves header name case
    this._header = {}; // coerces header names to lowercase
    this.on('end', function(){
      var err = null;
      var res = null;

      try {
        res = new Response(self);
      } catch(e) {
        err = new Error('Parser is unable to parse the response');
        err.parse = true;
        err.original = e;
        // issue #675: return the raw response if the response parsing fails
        err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;
        // issue #876: return the http status code if the response parsing fails
        err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;
        return self.callback(err);
      }

      self.emit('response', res);

      if (err) {
        return self.callback(err, res);
      }

      try {
        if (res.status >= 200 && res.status < 300) {
          return self.callback(err, res);
        }

        var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
        new_err.original = err;
        new_err.response = res;
        new_err.status = res.status;

        self.callback(new_err, res);
      } catch(e) {
        self.callback(e); // #985 touching res may cause INVALID_STATE_ERR on old Android
      }
    });
  }

  /**
   * Mixin `Emitter` and `requestBase`.
   */

  Emitter(Request.prototype);
  for (var key in requestBase) {
    Request.prototype[key] = requestBase[key];
  }

  /**
   * Set Content-Type to `type`, mapping values from `request.types`.
   *
   * Examples:
   *
   *      superagent.types.xml = 'application/xml';
   *
   *      request.post('/')
   *        .type('xml')
   *        .send(xmlstring)
   *        .end(callback);
   *
   *      request.post('/')
   *        .type('application/xml')
   *        .send(xmlstring)
   *        .end(callback);
   *
   * @param {String} type
   * @return {Request} for chaining
   * @api public
   */

  Request.prototype.type = function(type){
    this.set('Content-Type', request.types[type] || type);
    return this;
  };

  /**
   * Set responseType to `val`. Presently valid responseTypes are 'blob' and
   * 'arraybuffer'.
   *
   * Examples:
   *
   *      req.get('/')
   *        .responseType('blob')
   *        .end(callback);
   *
   * @param {String} val
   * @return {Request} for chaining
   * @api public
   */

  Request.prototype.responseType = function(val){
    this._responseType = val;
    return this;
  };

  /**
   * Set Accept to `type`, mapping values from `request.types`.
   *
   * Examples:
   *
   *      superagent.types.json = 'application/json';
   *
   *      request.get('/agent')
   *        .accept('json')
   *        .end(callback);
   *
   *      request.get('/agent')
   *        .accept('application/json')
   *        .end(callback);
   *
   * @param {String} accept
   * @return {Request} for chaining
   * @api public
   */

  Request.prototype.accept = function(type){
    this.set('Accept', request.types[type] || type);
    return this;
  };

  /**
   * Set Authorization field value with `user` and `pass`.
   *
   * @param {String} user
   * @param {String} pass
   * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')
   * @return {Request} for chaining
   * @api public
   */

  Request.prototype.auth = function(user, pass, options){
    if (!options) {
      options = {
        type: 'basic'
      }
    }

    switch (options.type) {
      case 'basic':
        var str = btoa(user + ':' + pass);
        this.set('Authorization', 'Basic ' + str);
      break;

      case 'auto':
        this.username = user;
        this.password = pass;
      break;
    }
    return this;
  };

  /**
  * Add query-string `val`.
  *
  * Examples:
  *
  *   request.get('/shoes')
  *     .query('size=10')
  *     .query({ color: 'blue' })
  *
  * @param {Object|String} val
  * @return {Request} for chaining
  * @api public
  */

  Request.prototype.query = function(val){
    if ('string' != typeof val) val = serialize(val);
    if (val) this._query.push(val);
    return this;
  };

  /**
   * Queue the given `file` as an attachment to the specified `field`,
   * with optional `filename`.
   *
   * ``` js
   * request.post('/upload')
   *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
   *   .end(callback);
   * ```
   *
   * @param {String} field
   * @param {Blob|File} file
   * @param {String} filename
   * @return {Request} for chaining
   * @api public
   */

  Request.prototype.attach = function(field, file, filename){
    this._getFormData().append(field, file, filename || file.name);
    return this;
  };

  Request.prototype._getFormData = function(){
    if (!this._formData) {
      this._formData = new root.FormData();
    }
    return this._formData;
  };

  /**
   * Invoke the callback with `err` and `res`
   * and handle arity check.
   *
   * @param {Error} err
   * @param {Response} res
   * @api private
   */

  Request.prototype.callback = function(err, res){
    var fn = this._callback;
    this.clearTimeout();
    fn(err, res);
  };

  /**
   * Invoke callback with x-domain error.
   *
   * @api private
   */

  Request.prototype.crossDomainError = function(){
    var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
    err.crossDomain = true;

    err.status = this.status;
    err.method = this.method;
    err.url = this.url;

    this.callback(err);
  };

  /**
   * Invoke callback with timeout error.
   *
   * @api private
   */

  Request.prototype._timeoutError = function(){
    var timeout = this._timeout;
    var err = new Error('timeout of ' + timeout + 'ms exceeded');
    err.timeout = timeout;
    this.callback(err);
  };

  /**
   * Compose querystring to append to req.url
   *
   * @api private
   */

  Request.prototype._appendQueryString = function(){
    var query = this._query.join('&');
    if (query) {
      this.url += ~this.url.indexOf('?')
        ? '&' + query
        : '?' + query;
    }
  };

  /**
   * Initiate request, invoking callback `fn(res)`
   * with an instanceof `Response`.
   *
   * @param {Function} fn
   * @return {Request} for chaining
   * @api public
   */

  Request.prototype.end = function(fn){
    var self = this;
    var xhr = this.xhr = request.getXHR();
    var timeout = this._timeout;
    var data = this._formData || this._data;

    // store callback
    this._callback = fn || noop;

    // state change
    xhr.onreadystatechange = function(){
      if (4 != xhr.readyState) return;

      // In IE9, reads to any property (e.g. status) off of an aborted XHR will
      // result in the error "Could not complete the operation due to error c00c023f"
      var status;
      try { status = xhr.status } catch(e) { status = 0; }

      if (0 == status) {
        if (self.timedout) return self._timeoutError();
        if (self._aborted) return;
        return self.crossDomainError();
      }
      self.emit('end');
    };

    // progress
    var handleProgress = function(e){
      if (e.total > 0) {
        e.percent = e.loaded / e.total * 100;
      }
      e.direction = 'download';
      self.emit('progress', e);
    };
    if (this.hasListeners('progress')) {
      xhr.onprogress = handleProgress;
    }
    try {
      if (xhr.upload && this.hasListeners('progress')) {
        xhr.upload.onprogress = handleProgress;
      }
    } catch(e) {
      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
      // Reported here:
      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
    }

    // timeout
    if (timeout && !this._timer) {
      this._timer = setTimeout(function(){
        self.timedout = true;
        self.abort();
      }, timeout);
    }

    // querystring
    this._appendQueryString();

    // initiate request
    if (this.username && this.password) {
      xhr.open(this.method, this.url, true, this.username, this.password);
    } else {
      xhr.open(this.method, this.url, true);
    }

    // CORS
    if (this._withCredentials) xhr.withCredentials = true;

    // body
    if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
      // serialize stuff
      var contentType = this._header['content-type'];
      var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
      if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];
      if (serialize) data = serialize(data);
    }

    // set header fields
    for (var field in this.header) {
      if (null == this.header[field]) continue;
      xhr.setRequestHeader(field, this.header[field]);
    }

    if (this._responseType) {
      xhr.responseType = this._responseType;
    }

    // send stuff
    this.emit('request', this);

    // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
    // We need null here if data is undefined
    xhr.send(typeof data !== 'undefined' ? data : null);
    return this;
  };


  /**
   * Expose `Request`.
   */

  request.Request = Request;

  /**
   * GET `url` with optional callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed|Function} data or fn
   * @param {Function} fn
   * @return {Request}
   * @api public
   */

  request.get = function(url, data, fn){
    var req = request('GET', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.query(data);
    if (fn) req.end(fn);
    return req;
  };

  /**
   * HEAD `url` with optional callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed|Function} data or fn
   * @param {Function} fn
   * @return {Request}
   * @api public
   */

  request.head = function(url, data, fn){
    var req = request('HEAD', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.send(data);
    if (fn) req.end(fn);
    return req;
  };

  /**
   * OPTIONS query to `url` with optional callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed|Function} data or fn
   * @param {Function} fn
   * @return {Request}
   * @api public
   */

  request.options = function(url, data, fn){
    var req = request('OPTIONS', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.send(data);
    if (fn) req.end(fn);
    return req;
  };

  /**
   * DELETE `url` with optional callback `fn(res)`.
   *
   * @param {String} url
   * @param {Function} fn
   * @return {Request}
   * @api public
   */

  function del(url, fn){
    var req = request('DELETE', url);
    if (fn) req.end(fn);
    return req;
  };

  request['del'] = del;
  request['delete'] = del;

  /**
   * PATCH `url` with optional `data` and callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed} data
   * @param {Function} fn
   * @return {Request}
   * @api public
   */

  request.patch = function(url, data, fn){
    var req = request('PATCH', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.send(data);
    if (fn) req.end(fn);
    return req;
  };

  /**
   * POST `url` with optional `data` and callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed} data
   * @param {Function} fn
   * @return {Request}
   * @api public
   */

  request.post = function(url, data, fn){
    var req = request('POST', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.send(data);
    if (fn) req.end(fn);
    return req;
  };

  /**
   * PUT `url` with optional `data` and callback `fn(res)`.
   *
   * @param {String} url
   * @param {Mixed|Function} data or fn
   * @param {Function} fn
   * @return {Request}
   * @api public
   */

  request.put = function(url, data, fn){
    var req = request('PUT', url);
    if ('function' == typeof data) fn = data, data = null;
    if (data) req.send(data);
    if (fn) req.end(fn);
    return req;
  };


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * Module of mixed-in functions shared between node and client code
   */
  var isObject = __webpack_require__(126);

  /**
   * Clear previous timeout.
   *
   * @return {Request} for chaining
   * @api public
   */

  exports.clearTimeout = function _clearTimeout(){
    this._timeout = 0;
    clearTimeout(this._timer);
    return this;
  };

  /**
   * Override default response body parser
   *
   * This function will be called to convert incoming data into request.body
   *
   * @param {Function}
   * @api public
   */

  exports.parse = function parse(fn){
    this._parser = fn;
    return this;
  };

  /**
   * Override default request body serializer
   *
   * This function will be called to convert data set via .send or .attach into payload to send
   *
   * @param {Function}
   * @api public
   */

  exports.serialize = function serialize(fn){
    this._serializer = fn;
    return this;
  };

  /**
   * Set timeout to `ms`.
   *
   * @param {Number} ms
   * @return {Request} for chaining
   * @api public
   */

  exports.timeout = function timeout(ms){
    this._timeout = ms;
    return this;
  };

  /**
   * Promise support
   *
   * @param {Function} resolve
   * @param {Function} reject
   * @return {Request}
   */

  exports.then = function then(resolve, reject) {
    if (!this._fullfilledPromise) {
      var self = this;
      this._fullfilledPromise = new Promise(function(innerResolve, innerReject){
        self.end(function(err, res){
          if (err) innerReject(err); else innerResolve(res);
        });
      });
    }
    return this._fullfilledPromise.then(resolve, reject);
  }

  /**
   * Allow for extension
   */

  exports.use = function use(fn) {
    fn(this);
    return this;
  }


  /**
   * Get request header `field`.
   * Case-insensitive.
   *
   * @param {String} field
   * @return {String}
   * @api public
   */

  exports.get = function(field){
    return this._header[field.toLowerCase()];
  };

  /**
   * Get case-insensitive header `field` value.
   * This is a deprecated internal API. Use `.get(field)` instead.
   *
   * (getHeader is no longer used internally by the superagent code base)
   *
   * @param {String} field
   * @return {String}
   * @api private
   * @deprecated
   */

  exports.getHeader = exports.get;

  /**
   * Set header `field` to `val`, or multiple fields with one object.
   * Case-insensitive.
   *
   * Examples:
   *
   *      req.get('/')
   *        .set('Accept', 'application/json')
   *        .set('X-API-Key', 'foobar')
   *        .end(callback);
   *
   *      req.get('/')
   *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
   *        .end(callback);
   *
   * @param {String|Object} field
   * @param {String} val
   * @return {Request} for chaining
   * @api public
   */

  exports.set = function(field, val){
    if (isObject(field)) {
      for (var key in field) {
        this.set(key, field[key]);
      }
      return this;
    }
    this._header[field.toLowerCase()] = val;
    this.header[field] = val;
    return this;
  };

  /**
   * Remove header `field`.
   * Case-insensitive.
   *
   * Example:
   *
   *      req.get('/')
   *        .unset('User-Agent')
   *        .end(callback);
   *
   * @param {String} field
   */
  exports.unset = function(field){
    delete this._header[field.toLowerCase()];
    delete this.header[field];
    return this;
  };

  /**
   * Write the field `name` and `val` for "multipart/form-data"
   * request bodies.
   *
   * ``` js
   * request.post('/upload')
   *   .field('foo', 'bar')
   *   .end(callback);
   * ```
   *
   * @param {String} name
   * @param {String|Blob|File|Buffer|fs.ReadStream} val
   * @return {Request} for chaining
   * @api public
   */
  exports.field = function(name, val) {
    this._getFormData().append(name, val);
    return this;
  };

  /**
   * Abort the request, and clear potential timeout.
   *
   * @return {Request}
   * @api public
   */
  exports.abort = function(){
    if (this._aborted) {
      return this;
    }
    this._aborted = true;
    this.xhr && this.xhr.abort(); // browser
    this.req && this.req.abort(); // node
    this.clearTimeout();
    this.emit('abort');
    return this;
  };

  /**
   * Enable transmission of cookies with x-domain requests.
   *
   * Note that for this to work the origin must not be
   * using "Access-Control-Allow-Origin" with a wildcard,
   * and also must set "Access-Control-Allow-Credentials"
   * to "true".
   *
   * @api public
   */

  exports.withCredentials = function(){
    // This is browser-only functionality. Node side is no-op.
    this._withCredentials = true;
    return this;
  };

  /**
   * Set the max redirects to `n`. Does noting in browser XHR implementation.
   *
   * @param {Number} n
   * @return {Request} for chaining
   * @api public
   */

  exports.redirects = function(n){
    this._maxRedirects = n;
    return this;
  };

  /**
   * Convert to a plain javascript object (not JSON string) of scalar properties.
   * Note as this method is designed to return a useful non-this value,
   * it cannot be chained.
   *
   * @return {Object} describing method, url, and data of this request
   * @api public
   */

  exports.toJSON = function(){
    return {
      method: this.method,
      url: this.url,
      data: this._data
    };
  };

  /**
   * Check if `obj` is a host object,
   * we don't want to serialize these :)
   *
   * TODO: future proof, move to compoent land
   *
   * @param {Object} obj
   * @return {Boolean}
   * @api private
   */

  exports._isHost = function _isHost(obj) {
    var str = {}.toString.call(obj);

    switch (str) {
      case '[object File]':
      case '[object Blob]':
      case '[object FormData]':
        return true;
      default:
        return false;
    }
  }

  /**
   * Send `data` as the request body, defaulting the `.type()` to "json" when
   * an object is given.
   *
   * Examples:
   *
   *       // manual json
   *       request.post('/user')
   *         .type('json')
   *         .send('{"name":"tj"}')
   *         .end(callback)
   *
   *       // auto json
   *       request.post('/user')
   *         .send({ name: 'tj' })
   *         .end(callback)
   *
   *       // manual x-www-form-urlencoded
   *       request.post('/user')
   *         .type('form')
   *         .send('name=tj')
   *         .end(callback)
   *
   *       // auto x-www-form-urlencoded
   *       request.post('/user')
   *         .type('form')
   *         .send({ name: 'tj' })
   *         .end(callback)
   *
   *       // defaults to x-www-form-urlencoded
   *      request.post('/user')
   *        .send('name=tobi')
   *        .send('species=ferret')
   *        .end(callback)
   *
   * @param {String|Object} data
   * @return {Request} for chaining
   * @api public
   */

  exports.send = function(data){
    var obj = isObject(data);
    var type = this._header['content-type'];

    // merge
    if (obj && isObject(this._data)) {
      for (var key in data) {
        this._data[key] = data[key];
      }
    } else if ('string' == typeof data) {
      // default to x-www-form-urlencoded
      if (!type) this.type('form');
      type = this._header['content-type'];
      if ('application/x-www-form-urlencoded' == type) {
        this._data = this._data
          ? this._data + '&' + data
          : data;
      } else {
        this._data = (this._data || '') + data;
      }
    } else {
      this._data = data;
    }

    if (!obj || this._isHost(data)) return this;

    // default to json
    if (!type) this.type('json');
    return this;
  };


/***/ },
/* 182 */
/***/ function(module, exports) {

  // The node and browser modules expose versions of this with the
  // appropriate constructor function bound as first argument
  /**
   * Issue a request:
   *
   * Examples:
   *
   *    request('GET', '/users').end(callback)
   *    request('/users').end(callback)
   *    request('/users', callback)
   *
   * @param {String} method
   * @param {String|Function} url or callback
   * @return {Request}
   * @api public
   */

  function request(RequestConstructor, method, url) {
    // callback
    if ('function' == typeof url) {
      return new RequestConstructor('GET', method).end(url);
    }

    // url first
    if (2 == arguments.length) {
      return new RequestConstructor('GET', method);
    }

    return new RequestConstructor(method, url);
  }

  module.exports = request;


/***/ },
/* 183 */
/***/ function(module, exports) {

  module.exports = function(module) {
  	if(!module.webpackPolyfill) {
  		module.deprecate = function() {};
  		module.paths = [];
  		// module.parent = undefined by default
  		module.children = [];
  		module.webpackPolyfill = 1;
  	}
  	return module;
  }


/***/ },
/* 184 */
/***/ function(module, exports) {

  /* WEBPACK VAR INJECTION */(function(global) {"use strict"

  module.exports = (function () {
      // Store.js
      var store = {},
  		win = (typeof window != 'undefined' ? window : global),
  		doc = win.document,
  		localStorageName = 'localStorage',
  		scriptTag = 'script',
  		storage

      store.disabled = false
      store.version = '1.3.20'
      store.set = function (key, value) { }
      store.get = function (key, defaultVal) { }
      store.has = function (key) { return store.get(key) !== undefined }
      store.remove = function (key) { }
      store.clear = function () { }
      store.transact = function (key, defaultVal, transactionFn) {
          if (transactionFn == null) {
              transactionFn = defaultVal
              defaultVal = null
          }
          if (defaultVal == null) {
              defaultVal = {}
          }
          var val = store.get(key, defaultVal)
          transactionFn(val)
          store.set(key, val)
      }
      store.getAll = function () {
          var ret = {}
          store.forEach(function (key, val) {
              ret[key] = val
          })
          return ret
      }
      store.forEach = function () { }
      store.serialize = function (value) {
          return JSON.stringify(value)
      }
      store.deserialize = function (value) {
          if (typeof value != 'string') { return undefined }
          try { return JSON.parse(value) }
          catch (e) { return value || undefined }
      }

      // Functions to encapsulate questionable FireFox 3.6.13 behavior
      // when about.config::dom.storage.enabled === false
      // See https://github.com/marcuswestin/store.js/issues#issue/13
      function isLocalStorageNameSupported() {
          try { return (localStorageName in win && win[localStorageName]) }
          catch (err) { return false }
      }

      if (isLocalStorageNameSupported()) {
          storage = win[localStorageName]
          store.set = function (key, val) {
              if (val === undefined) { return store.remove(key) }
              storage.setItem(key, store.serialize(val))
              return val
          }
          store.get = function (key, defaultVal) {
              var val = store.deserialize(storage.getItem(key))
              return (val === undefined ? defaultVal : val)
          }
          store.remove = function (key) { storage.removeItem(key) }
          store.clear = function () { storage.clear() }
          store.forEach = function (callback) {
              for (var i = 0; i < storage.length; i++) {
                  var key = storage.key(i)
                  callback(key, store.get(key))
              }
          }
      } else if (doc && doc.documentElement.addBehavior) {
          var storageOwner,
  			storageContainer
          // Since #userData storage applies only to specific paths, we need to
          // somehow link our data to a specific path.  We choose /favicon.ico
          // as a pretty safe option, since all browsers already make a request to
          // this URL anyway and being a 404 will not hurt us here.  We wrap an
          // iframe pointing to the favicon in an ActiveXObject(htmlfile) object
          // (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)
          // since the iframe access rules appear to allow direct access and
          // manipulation of the document element, even for a 404 page.  This
          // document can be used instead of the current document (which would
          // have been limited to the current path) to perform #userData storage.
          try {
              storageContainer = new ActiveXObject('htmlfile')
              storageContainer.open()
              storageContainer.write('<' + scriptTag + '>document.w=window</' + scriptTag + '><iframe src="/favicon.ico"></iframe>')
              storageContainer.close()
              storageOwner = storageContainer.w.frames[0].document
              storage = storageOwner.createElement('div')
          } catch (e) {
              // somehow ActiveXObject instantiation failed (perhaps some special
              // security settings or otherwse), fall back to per-path storage
              storage = doc.createElement('div')
              storageOwner = doc.body
          }
          var withIEStorage = function (storeFunction) {
              return function () {
                  var args = Array.prototype.slice.call(arguments, 0)
                  args.unshift(storage)
                  // See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx
                  // and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx
                  storageOwner.appendChild(storage)
                  storage.addBehavior('#default#userData')
                  storage.load(localStorageName)
                  var result = storeFunction.apply(store, args)
                  storageOwner.removeChild(storage)
                  return result
              }
          }

          // In IE7, keys cannot start with a digit or contain certain chars.
          // See https://github.com/marcuswestin/store.js/issues/40
          // See https://github.com/marcuswestin/store.js/issues/83
          var forbiddenCharsRegex = new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]", "g")
          var ieKeyFix = function (key) {
              return key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')
          }
          store.set = withIEStorage(function (storage, key, val) {
              key = ieKeyFix(key)
              if (val === undefined) { return store.remove(key) }
              storage.setAttribute(key, store.serialize(val))
              storage.save(localStorageName)
              return val
          })
          store.get = withIEStorage(function (storage, key, defaultVal) {
              key = ieKeyFix(key)
              var val = store.deserialize(storage.getAttribute(key))
              return (val === undefined ? defaultVal : val)
          })
          store.remove = withIEStorage(function (storage, key) {
              key = ieKeyFix(key)
              storage.removeAttribute(key)
              storage.save(localStorageName)
          })
          store.clear = withIEStorage(function (storage) {
              var attributes = storage.XMLDocument.documentElement.attributes
              storage.load(localStorageName)
              for (var i = attributes.length - 1; i >= 0; i--) {
                  storage.removeAttribute(attributes[i].name)
              }
              storage.save(localStorageName)
          })
          store.forEach = withIEStorage(function (storage, callback) {
              var attributes = storage.XMLDocument.documentElement.attributes
              for (var i = 0, attr; attr = attributes[i]; ++i) {
                  callback(attr.name, store.deserialize(storage.getAttribute(attr.name)))
              }
          })
      }

      try {
          var testKey = '__storejs__'
          store.set(testKey, testKey)
          if (store.get(testKey) != testKey) { store.disabled = true }
          store.remove(testKey)
      } catch (e) {
          store.disabled = true
      }
      store.enabled = !store.disabled

      return store
  }())
  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 185 */
/***/ function(module, exports) {

  "use strict";
  var Debouncer = (function () {
      function Debouncer() {
          this._timers = {};
      }
      Debouncer.prototype.dispose = function () {
          this.clear();
      };
      Debouncer.prototype.clear = function () {
          for (var k in this._timers)
              clearTimeout(this._timers[k]);
          this._timers = {};
      };
      Debouncer.prototype.exec = function (action, timeout, key) {
          var _this = this;
          if (timeout === void 0) { timeout = 100; }
          if (key === void 0) { key = "default"; }
          var t = this._timers[key];
          if (t)
              clearTimeout(t);
          this._timers[key] = setTimeout(function () {
              delete _this._timers[key];
              action();
          }, timeout);
      };
      return Debouncer;
  }());
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = Debouncer;


/***/ }
/******/ ]);