// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SF.Common.Notifications;
using SF.Common.Notifications.Models;
using SF.Sys.AtLeastOnceTasks;
using SF.Sys.Entities;
using SFShop.Data;
using System;

namespace SFShop.Backend.Migrations
{
    [DbContext(typeof(SFShopDbContext))]
    [Migration("20180413160255_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataClaimType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("AuthClaimType");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataClient", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100);

                    b.Property<long>("ClientConfigId");

                    b.Property<string>("ClientSecrets")
                        .HasMaxLength(200);

                    b.Property<string>("ClientUri")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("FrontChannelLogoutUri");

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("PostLogoutRedirectUris");

                    b.Property<string>("RedirectUris");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("ClientConfigId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("AuthClient");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataClientClaimValue", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeId");

                    b.ToTable("AuthClientClaimValue");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataClientConfig", b =>
                {
                    b.Property<long>("Id");

                    b.Property<int>("AbsoluteRefreshTokenLifetime");

                    b.Property<int>("AccessTokenLifetime");

                    b.Property<bool>("AllowOfflineAccess");

                    b.Property<bool>("AllowRememberConsent");

                    b.Property<string>("AllowedCorsOrigins")
                        .HasMaxLength(200);

                    b.Property<string>("AllowedGrantTypes");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken");

                    b.Property<int>("AuthorizationCodeLifetime");

                    b.Property<bool>("BackChannelLogoutSessionRequired");

                    b.Property<string>("ClientClaimsPrefix")
                        .HasMaxLength(100);

                    b.Property<int?>("ConsentLifetime");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("FrontChannelLogoutSessionRequired");

                    b.Property<int>("IdentityTokenLifetime");

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<bool>("RequireClientSecret");

                    b.Property<bool>("RequireConsent");

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<int>("SlidingRefreshTokenLifetime");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("AuthClientConfig");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataClientScope", b =>
                {
                    b.Property<long>("ClientConfigId");

                    b.Property<string>("ScopeId")
                        .HasMaxLength(100);

                    b.HasKey("ClientConfigId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.ToTable("AuthClientScope");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataGrant", b =>
                {
                    b.Property<long>("Id")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("AuthGrant");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataGrantItem", b =>
                {
                    b.Property<long>("GrantId");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(200);

                    b.Property<string>("ServiceMethodId")
                        .HasMaxLength(200);

                    b.HasKey("GrantId", "ServiceId", "ServiceMethodId");

                    b.ToTable("AuthGrantItem");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataOperation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("AuthOperation");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataOperationRequiredClaim", b =>
                {
                    b.Property<string>("OperationId");

                    b.Property<string>("ClaimTypeId");

                    b.HasKey("OperationId", "ClaimTypeId");

                    b.HasIndex("ClaimTypeId");

                    b.ToTable("AuthOperationRequiredClaim");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataResource", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<bool>("IsIdentityResource");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("AuthResource");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataResourceRequiredClaim", b =>
                {
                    b.Property<string>("ResourceId");

                    b.Property<string>("ClaimTypeId");

                    b.HasKey("ResourceId", "ClaimTypeId");

                    b.HasIndex("ClaimTypeId");

                    b.ToTable("AuthResourceRequiredClaim");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataResourceSupportedOperation", b =>
                {
                    b.Property<string>("ResourceId");

                    b.Property<string>("OperationId");

                    b.HasKey("ResourceId", "OperationId");

                    b.HasIndex("OperationId");

                    b.ToTable("AuthResourceSupportedOperation");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("InternalRemarks");

                    b.Property<bool>("IsSysRole");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("AuthRole");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataRoleClaimValue", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("RoleId");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TypeId");

                    b.ToTable("AuthRoleClaimValue");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataRoleGrant", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<long>("DstGrantId")
                        .HasMaxLength(100);

                    b.HasKey("RoleId", "DstGrantId");

                    b.HasIndex("DstGrantId");

                    b.ToTable("AuthRoleGrant");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataScope", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("AuthScope");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataScopeResource", b =>
                {
                    b.Property<string>("ScopeId");

                    b.Property<string>("ResourceId")
                        .HasMaxLength(100);

                    b.HasKey("ScopeId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("AuthDataScopeResource");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataUser", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("MainClaimTypeId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MainCredential")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100);

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<string>("SignupClientId")
                        .HasMaxLength(100);

                    b.Property<string>("SignupExtraArgument")
                        .HasMaxLength(200);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("SignupClientId");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("MainClaimTypeId", "MainCredential")
                        .IsUnique();

                    b.ToTable("AuthUser");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataUserClaimValue", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<long>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthUserClaimValue");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataUserCredential", b =>
                {
                    b.Property<string>("ClaimTypeId")
                        .HasMaxLength(100);

                    b.Property<string>("Credential")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("ConfirmedTime");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<long>("UserId");

                    b.HasKey("ClaimTypeId", "Credential");

                    b.HasIndex("ClaimTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("AuthUserCredential");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataUserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AuthUserRole");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Category", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("BannerImage")
                        .HasMaxLength(200);

                    b.Property<string>("BannerUrl")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<int>("ItemCount");

                    b.Property<string>("MobileBannerImage")
                        .HasMaxLength(200);

                    b.Property<string>("MobileBannerUrl")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte>("ObjectState");

                    b.Property<int>("Order");

                    b.Property<long>("OwnerUserId");

                    b.Property<long?>("ParentId");

                    b.Property<string>("Tag")
                        .HasMaxLength(20);

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Tag");

                    b.ToTable("BizProductCategory");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.CategoryItem", b =>
                {
                    b.Property<long>("CategoryId");

                    b.Property<long>("ItemId");

                    b.Property<long>("Order");

                    b.HasKey("CategoryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("CategoryId", "Order");

                    b.ToTable("BizProductCategoryItem");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Item", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("CategoryTags");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<byte>("ObjectState");

                    b.Property<decimal?>("Price");

                    b.Property<long>("ProductId");

                    b.Property<long>("SellerId");

                    b.Property<long?>("SourceItemId");

                    b.Property<int>("SourceLevel");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SourceItemId");

                    b.ToTable("BizProductItem");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Product", b =>
                {
                    b.Property<long>("Id");

                    b.Property<bool>("CouponDisabled");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Image");

                    b.Property<bool>("IsVirtual");

                    b.Property<decimal>("MarketPrice");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte>("ObjectState");

                    b.Property<double>("Order");

                    b.Property<long>("OwnerUserId");

                    b.Property<decimal>("Price");

                    b.Property<DateTime?>("PublishedTime");

                    b.Property<int>("SellCount");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("TypeId");

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("VIADSpecId");

                    b.Property<int>("Visited");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("TypeId");

                    b.HasIndex("ObjectState", "Order");

                    b.HasIndex("ObjectState", "Price");

                    b.HasIndex("ObjectState", "PublishedTime");

                    b.HasIndex("ObjectState", "SellCount");

                    b.HasIndex("ObjectState", "Visited");

                    b.HasIndex("ObjectState", "TypeId", "Order");

                    b.HasIndex("ObjectState", "TypeId", "Price");

                    b.HasIndex("ObjectState", "TypeId", "PublishedTime");

                    b.HasIndex("ObjectState", "TypeId", "SellCount");

                    b.HasIndex("ObjectState", "TypeId", "Visited");

                    b.ToTable("BizProduct");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.ProductDetail", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Detail");

                    b.Property<string>("Images");

                    b.HasKey("Id");

                    b.ToTable("BizProductDetail");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.ProductSpec", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Desc");

                    b.Property<string>("Image")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte>("ObjectState");

                    b.Property<int>("Order");

                    b.Property<long>("ProductId");

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("VIADSpecId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("BizProductSpec");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.ProductType", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte>("ObjectState");

                    b.Property<int>("Order");

                    b.Property<int>("ProductCount");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Unit")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Order");

                    b.ToTable("BizProductType");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Property", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Icon");

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte>("ObjectState");

                    b.Property<int>("Order");

                    b.Property<long?>("ParentId");

                    b.Property<long>("ScopeId");

                    b.Property<long>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ParentId", "Order");

                    b.HasIndex("TypeId", "ParentId", "Name")
                        .IsUnique()
                        .HasFilter("[ParentId] IS NOT NULL");

                    b.ToTable("BizProductProperty");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.PropertyItem", b =>
                {
                    b.Property<long>("PropertyId");

                    b.Property<long>("ProductId");

                    b.Property<double>("Order");

                    b.HasKey("PropertyId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PropertyId", "Order");

                    b.ToTable("BizProductPropertyItem");
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.PropertyScope", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Icon")
                        .HasMaxLength(200);

                    b.Property<string>("Image")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte>("ObjectState");

                    b.Property<int>("Order");

                    b.Property<long>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("Order");

                    b.HasIndex("TypeId", "Name")
                        .IsUnique();

                    b.ToTable("BizProductPropertyScope");
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DataDocument", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("AuthorId");

                    b.Property<long?>("ContainerId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Ident")
                        .HasMaxLength(50);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<int>("ItemOrder");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<DateTime?>("PublishDate");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Ident");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PublishDate");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("ContainerId", "ItemOrder");

                    b.HasIndex("ContainerId", "PublishDate");

                    b.ToTable("CommonDocument");
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DataDocumentAuthor", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("CommonDocumentAuthor");
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DataDocumentCategory", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("ContainerId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<int>("ItemOrder");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("ContainerId", "ItemOrder");

                    b.ToTable("CommonDocumentCategory");
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DataDocumentScope", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("CommonDocumentScope");
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DataDocumentTag", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("ServiceDataScopeId", "Name")
                        .IsUnique()
                        .HasFilter("[ServiceDataScopeId] IS NOT NULL");

                    b.ToTable("CommonDocumentTag");
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DataDocumentTagReference", b =>
                {
                    b.Property<long>("DocumentId");

                    b.Property<long>("TagId");

                    b.HasKey("DocumentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("CommonDocumentTagRef");
                });

            modelBuilder.Entity("SF.Common.FrontEndContents.DataModels.Content", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("Disabled");

                    b.Property<string>("FontIcon")
                        .HasMaxLength(100);

                    b.Property<string>("Icon")
                        .HasMaxLength(200);

                    b.Property<string>("Image")
                        .HasMaxLength(200);

                    b.Property<string>("ItemsData");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ProviderConfig");

                    b.Property<string>("ProviderType")
                        .HasMaxLength(100);

                    b.Property<string>("Summary");

                    b.Property<string>("Title1")
                        .HasMaxLength(200);

                    b.Property<string>("Title2")
                        .HasMaxLength(200);

                    b.Property<string>("Title3")
                        .HasMaxLength(200);

                    b.Property<string>("Uri")
                        .HasMaxLength(200);

                    b.Property<string>("UriTarget")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CommonFrontContent");
                });

            modelBuilder.Entity("SF.Common.FrontEndContents.DataModels.Site", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<long>("TemplateId");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("CommonFrontSite");
                });

            modelBuilder.Entity("SF.Common.FrontEndContents.DataModels.SiteTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CommonFrontSiteTemplate");
                });

            modelBuilder.Entity("SF.Common.Notifications.DataModels.DataNotification", b =>
                {
                    b.Property<long>("Id");

                    b.Property<int>("ActionCount");

                    b.Property<string>("Args");

                    b.Property<string>("BizIdent")
                        .HasMaxLength(100);

                    b.Property<int>("CompletedActionCount");

                    b.Property<string>("Content");

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("Error")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("Expires");

                    b.Property<string>("Image")
                        .HasMaxLength(50);

                    b.Property<string>("Link")
                        .HasMaxLength(200);

                    b.Property<byte>("LogicState");

                    b.Property<byte>("Mode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("PolicyId");

                    b.Property<long?>("SenderId");

                    b.Property<int>("Status");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("BizIdent");

                    b.HasIndex("PolicyId");

                    b.HasIndex("SenderId");

                    b.HasIndex("Expires", "Time");

                    b.ToTable("CommonNotification");
                });

            modelBuilder.Entity("SF.Common.Notifications.DataModels.DataNotificationSendPolicy", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Actions");

                    b.Property<string>("ContentTemplate")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Ident")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NameTemplate")
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Ident");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("CommonNotificationSendPolicy");
                });

            modelBuilder.Entity("SF.Common.Notifications.DataModels.DataNotificationSendRecord", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Args");

                    b.Property<string>("BizIdent")
                        .HasMaxLength(100);

                    b.Property<string>("Content");

                    b.Property<string>("Error")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("Expires");

                    b.Property<DateTime?>("LastSendTime");

                    b.Property<long>("NotificationId");

                    b.Property<long>("ProviderId");

                    b.Property<string>("Result")
                        .HasMaxLength(1000);

                    b.Property<int>("RetryInterval");

                    b.Property<int>("RetryLimit");

                    b.Property<long?>("ScopeId");

                    b.Property<int>("SendCount");

                    b.Property<DateTime>("SendTime");

                    b.Property<int>("Status");

                    b.Property<string>("Target");

                    b.Property<long?>("TargetId");

                    b.Property<string>("Template");

                    b.Property<DateTime>("Time");

                    b.Property<string>("Title");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BizIdent");

                    b.HasIndex("NotificationId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("TargetId");

                    b.HasIndex("Time");

                    b.HasIndex("UserId");

                    b.ToTable("CommonNotificationSendRecord");
                });

            modelBuilder.Entity("SF.Common.Notifications.DataModels.DataNotificationTarget", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("NotificationId");

                    b.Property<byte>("LogicState");

                    b.Property<byte>("Mode");

                    b.Property<DateTime?>("ReadTime");

                    b.Property<DateTime>("Time");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId", "LogicState", "Time");

                    b.ToTable("CommonNotificationTarget");
                });

            modelBuilder.Entity("SF.Common.Notifications.DataModels.DataNotificationUserStatus", b =>
                {
                    b.Property<long>("Id");

                    b.Property<int>("Received");

                    b.Property<int>("ReceivedUnreaded");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("CommonNotificationUserStatus");
                });

            modelBuilder.Entity("SF.Sys.BackEndConsole.Entity.DataModels.DataConsole", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Ident")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Menus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("Pages");

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Ident");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("BackEndAdminConsole");
                });

            modelBuilder.Entity("SF.Sys.BackEndConsole.Entity.DataModels.DataHotMenuCategory", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long>("ConsoleId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("FontIcon")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("ConsoleId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("BackEndAdminHotMenuCategory");
                });

            modelBuilder.Entity("SF.Sys.BackEndConsole.Entity.DataModels.DataHotMenuItem", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long>("CategoryId");

                    b.Property<long>("ConsoleId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("FontIcon")
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ConsoleId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("BackEndAdminHotMenuItem");
                });

            modelBuilder.Entity("SF.Sys.BackEndConsole.Entity.DataModels.DataHotQuery", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long>("ConsoleId");

                    b.Property<long>("ContentId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<long>("PageId");

                    b.Property<string>("Query");

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("ConsoleId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.ToTable("BackEndAdminHotQuery");
                });

            modelBuilder.Entity("SF.Sys.BackEndConsole.Entity.DataModels.DataMenu", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Ident")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("InternalRemarks");

                    b.Property<string>("Items");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("ServiceDataScopeId", "Ident");

                    b.ToTable("SysMenu");
                });

            modelBuilder.Entity("SF.Sys.Data.IdentGenerator.DataModels.IdentSeed", b =>
                {
                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200);

                    b.Property<long>("NextValue");

                    b.Property<int>("Section");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Type");

                    b.ToTable("SysIdentSeed");
                });

            modelBuilder.Entity("SF.Sys.Reminders.DataModels.DataReminder", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long>("BizIdent");

                    b.Property<string>("BizIdentType");

                    b.Property<string>("BizType");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Data")
                        .HasMaxLength(1000);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("RemindableName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<int>("TaskExecCount");

                    b.Property<DateTime?>("TaskLastExecTime");

                    b.Property<string>("TaskMessage");

                    b.Property<DateTime?>("TaskNextExecTime");

                    b.Property<DateTime?>("TaskStartTime");

                    b.Property<int>("TaskState");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("TaskState", "TaskNextExecTime");

                    b.HasIndex("BizType", "BizIdentType", "BizIdent")
                        .IsUnique()
                        .HasFilter("[BizType] IS NOT NULL AND [BizIdentType] IS NOT NULL");

                    b.ToTable("SysReminder");
                });

            modelBuilder.Entity("SF.Sys.Reminders.DataModels.DataRemindRecord", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long>("BizIdent");

                    b.Property<string>("BizIdentType");

                    b.Property<string>("BizType");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Data")
                        .HasMaxLength(1000);

                    b.Property<string>("InternalRemarks");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("RemindableName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<int>("TaskExecCount");

                    b.Property<DateTime?>("TaskLastExecTime");

                    b.Property<string>("TaskMessage");

                    b.Property<DateTime?>("TaskNextExecTime");

                    b.Property<DateTime?>("TaskStartTime");

                    b.Property<int>("TaskState");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("TaskState", "TaskNextExecTime");

                    b.HasIndex("BizType", "BizIdentType", "BizIdent");

                    b.ToTable("SysRemindRecord");
                });

            modelBuilder.Entity("SF.Sys.Services.Management.DataModels.DataServiceInstance", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("ContainerId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .HasMaxLength(100);

                    b.Property<string>("ImplementId")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("ImplementType")
                        .IsRequired();

                    b.Property<string>("InternalRemarks");

                    b.Property<int>("ItemOrder");

                    b.Property<byte>("LogicState");

                    b.Property<string>("Memo")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("OwnerId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100);

                    b.Property<long?>("ServiceDataScopeId");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("ServiceIdent")
                        .HasMaxLength(200);

                    b.Property<string>("ServiceType")
                        .IsRequired();

                    b.Property<string>("Setting");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(100);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<long?>("UpdatorId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("ImplementId");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServiceDataScopeId");

                    b.HasIndex("ServiceIdent");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("ContainerId", "ItemOrder");

                    b.HasIndex("ContainerId", "ServiceId");

                    b.ToTable("SysServiceInstance");
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataClient", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataClientConfig", "ClientConfig")
                        .WithMany()
                        .HasForeignKey("ClientConfigId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataClientClaimValue", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataClient", "Client")
                        .WithMany("ClaimValues")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataClaimType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataClientScope", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataClientConfig", "ClientConfig")
                        .WithMany("Scopes")
                        .HasForeignKey("ClientConfigId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataScope", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataGrantItem", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataGrant", "Grant")
                        .WithMany("Items")
                        .HasForeignKey("GrantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataOperationRequiredClaim", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataClaimType", "ClaimType")
                        .WithMany()
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataResource", "Resource")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataResourceRequiredClaim", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataClaimType", "ClaimType")
                        .WithMany()
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataResource", "Resource")
                        .WithMany("RequiredClaims")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataResourceSupportedOperation", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataOperation", "Operation")
                        .WithMany("Resources")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataResource", "Resource")
                        .WithMany("SupportedOperations")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataRoleClaimValue", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataRole", "Role")
                        .WithMany("ClaimValues")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataClaimType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataRoleGrant", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataGrant", "DstGrant")
                        .WithMany()
                        .HasForeignKey("DstGrantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataRole", "Role")
                        .WithMany("Grants")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataScopeResource", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataResource", "Resource")
                        .WithMany("Scopes")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataScope", "Scope")
                        .WithMany("Resources")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataUser", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataClient", "SignupClient")
                        .WithMany()
                        .HasForeignKey("SignupClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataUserClaimValue", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataClaimType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataUser", "User")
                        .WithMany("ClaimValues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataUserCredential", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataClaimType", "ClaimType")
                        .WithMany()
                        .HasForeignKey("ClaimTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataUser", "User")
                        .WithMany("Credentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Auth.IdentityServices.DataModels.DataUserRole", b =>
                {
                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Auth.IdentityServices.DataModels.DataUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Category", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.CategoryItem", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Biz.Products.Entity.DataModels.Item", "Item")
                        .WithMany("CategoryItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Item", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Product", "Product")
                        .WithMany("Items")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Biz.Products.Entity.DataModels.Item", "SourceItem")
                        .WithMany("ChildItems")
                        .HasForeignKey("SourceItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Product", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.ProductType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.ProductDetail", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Product", "Product")
                        .WithOne("Detail")
                        .HasForeignKey("SF.Biz.Products.Entity.DataModels.ProductDetail", "Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.ProductSpec", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Product", "Product")
                        .WithMany("Specs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.Property", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Property", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Biz.Products.Entity.DataModels.PropertyScope", "Scope")
                        .WithMany("Properties")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Biz.Products.Entity.DataModels.ProductType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.PropertyItem", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.Product", "Product")
                        .WithMany("PropertyItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Biz.Products.Entity.DataModels.Property", "Property")
                        .WithMany("ProductItems")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Biz.Products.Entity.DataModels.PropertyScope", b =>
                {
                    b.HasOne("SF.Biz.Products.Entity.DataModels.ProductType", "Type")
                        .WithMany("PropertyScopes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DataDocument", b =>
                {
                    b.HasOne("SF.Common.Documents.DataModels.DataDocumentAuthor", "Author")
                        .WithMany("Documents")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Common.Documents.DataModels.DataDocumentCategory", "Container")
                        .WithMany("Items")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Common.Documents.DataModels.DataDocumentScope", "Scope")
                        .WithMany("Documents")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DataDocumentAuthor", b =>
                {
                    b.HasOne("SF.Common.Documents.DataModels.DataDocumentScope", "Scope")
                        .WithMany("Authors")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DataDocumentCategory", b =>
                {
                    b.HasOne("SF.Common.Documents.DataModels.DataDocumentCategory", "Container")
                        .WithMany("Children")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Common.Documents.DataModels.DataDocumentScope", "Scope")
                        .WithMany("Categories")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DataDocumentTag", b =>
                {
                    b.HasOne("SF.Common.Documents.DataModels.DataDocumentScope", "Scope")
                        .WithMany("Tags")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Common.Documents.DataModels.DataDocumentTagReference", b =>
                {
                    b.HasOne("SF.Common.Documents.DataModels.DataDocument", "Document")
                        .WithMany("Tags")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Common.Documents.DataModels.DataDocumentTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Common.FrontEndContents.DataModels.Site", b =>
                {
                    b.HasOne("SF.Common.FrontEndContents.DataModels.SiteTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Common.Notifications.DataModels.DataNotification", b =>
                {
                    b.HasOne("SF.Common.Notifications.DataModels.DataNotificationSendPolicy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Common.Notifications.DataModels.DataNotificationSendRecord", b =>
                {
                    b.HasOne("SF.Common.Notifications.DataModels.DataNotification", "Notification")
                        .WithMany("SendRecords")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Common.Notifications.DataModels.DataNotificationTarget", b =>
                {
                    b.HasOne("SF.Common.Notifications.DataModels.DataNotification", "Notification")
                        .WithMany("Targets")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Sys.BackEndConsole.Entity.DataModels.DataHotMenuCategory", b =>
                {
                    b.HasOne("SF.Sys.BackEndConsole.Entity.DataModels.DataConsole", "Console")
                        .WithMany()
                        .HasForeignKey("ConsoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Sys.BackEndConsole.Entity.DataModels.DataHotMenuItem", b =>
                {
                    b.HasOne("SF.Sys.BackEndConsole.Entity.DataModels.DataHotMenuCategory", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SF.Sys.BackEndConsole.Entity.DataModels.DataConsole", "Console")
                        .WithMany()
                        .HasForeignKey("ConsoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Sys.BackEndConsole.Entity.DataModels.DataHotQuery", b =>
                {
                    b.HasOne("SF.Sys.BackEndConsole.Entity.DataModels.DataConsole", "Console")
                        .WithMany()
                        .HasForeignKey("ConsoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SF.Sys.Services.Management.DataModels.DataServiceInstance", b =>
                {
                    b.HasOne("SF.Sys.Services.Management.DataModels.DataServiceInstance", "Container")
                        .WithMany("Children")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
